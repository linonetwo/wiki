{"tiddlers":{"$:/plugins/linonetwo/in-tagtree-of/index.js":{"title":"$:/plugins/linonetwo/in-tagtree-of/index.js","text":"\"use strict\";\n\n// src/index.ts\nexports[\"in-tagtree-of\"] = function inTagTreeOfFilterOperator(source, operator) {\n  const rootTiddler = operator.operand;\n  const isInclusive = operator.suffix === \"inclusive\";\n  const isNotInTagTreeOf = operator.prefix === \"!\";\n  const sourceTiddlers = [];\n  let firstTiddler;\n  const sourceTiddlerCheckedToBeChildrenOfRootTiddler = [];\n  source((tiddler, title) => {\n    sourceTiddlers.push(title);\n    if (firstTiddler === void 0) {\n      firstTiddler = tiddler;\n    }\n  });\n  if (sourceTiddlers.length === 1 && !isNotInTagTreeOf) {\n    const [theOnlyTiddlerTitle] = sourceTiddlers;\n    if (firstTiddler?.fields?.tags?.includes(rootTiddler) === true) {\n      return [theOnlyTiddlerTitle];\n    }\n    if (isInclusive && theOnlyTiddlerTitle === rootTiddler) {\n      return [theOnlyTiddlerTitle];\n    }\n  }\n  let rootTiddlerChildren = $tw.wiki.getGlobalCache(`in-tagtree-of-${rootTiddler}`, () => {\n    const results = [];\n    getTiddlersRecursively(rootTiddler, results);\n    return results;\n  });\n  rootTiddlerChildren = isInclusive ? [...rootTiddlerChildren, rootTiddler] : rootTiddlerChildren;\n  sourceTiddlers.forEach((title) => {\n    if (rootTiddlerChildren.includes(title) !== isNotInTagTreeOf) {\n      sourceTiddlerCheckedToBeChildrenOfRootTiddler.push(title);\n    }\n  });\n  return sourceTiddlerCheckedToBeChildrenOfRootTiddler;\n};\nfunction getTiddlersRecursively(title, results) {\n  const intermediate = $tw.wiki.getTiddlersWithTag(title);\n  let t;\n  let p;\n  if (intermediate.length > 0) {\n    if (results.length > 0) {\n      if (results.length < intermediate.length) {\n        for (t = 0; t < results.length; t++) {\n          p = intermediate.indexOf(results[t]);\n          if (p !== -1) {\n            intermediate.splice(p, 1);\n          }\n        }\n      } else {\n        for (t = intermediate.length - 1; t >= 0; t--) {\n          p = results.indexOf(intermediate[t]);\n          if (p !== -1) {\n            intermediate.splice(t, 1);\n          }\n        }\n      }\n    }\n    $tw.utils.pushTop(results, intermediate);\n    intermediate.forEach(function(title2) {\n      getTiddlersRecursively(title2, results);\n    });\n  }\n}\n","creator":"LinOnetwo","type":"application/javascript","module-type":"filteroperator"},"$:/plugins/linonetwo/in-tagtree-of/readme":{"title":"$:/plugins/linonetwo/in-tagtree-of/readme","creator":"LinOnetwo","type":"text/vnd.tiddlywiki","text":"A very fast version of `kin::to[xxx]`.\n\n> Finds out where a tiddler originates from, is it in a tag tree with xxx as root?\n\n!! Usage\n\nSee [[demo site|https://tiddly-gittly.github.io/in-tagtree-of/]] for interactive examples.\n\n!!! Normal usage\n\n`[[Ling]in-tagtree-of[Clancy]]` : check if `Ling` is ''in a tag tree'' with `Clancy` as root.\n\n`[all[tiddlers]!in-tagtree-of[Clancy]]` : with `!` prefix, get all tiddlers that are ''not'' in a tag tree with `Clancy` as root.\n\n!!! Advanced usage\n\n`[all[tiddlers]in-tagtree-of:inclusive[Clancy]]` : with `inclusive` suffix, get all tiddlers that are ''in a tag tree'' with `Clancy` as root, ''including `Clancy` himself''\n\n!! Difference from taggingtree\n\n[[taggingtree|https://talk.tiddlywiki.org/t/recursive-filter-operators-to-show-all-tiddlers-beneath-a-tag-and-all-tags-above-a-tiddler/3814]] is a [[Selection Constructors|https://tiddlywiki.com/#Selection%20Constructors]], thus can not be used in cascade or FileSystemPaths. See [[How to test filesystempath easily|https://talk.tiddlywiki.org/t/how-to-test-filesystempath-easily/6353]] for details."}}}