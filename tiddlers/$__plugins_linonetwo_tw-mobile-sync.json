{"title":"$:/plugins/linonetwo/tw-mobile-sync","author":"LinOnetwo","description":"Sync data between Mobile HTML (Tiddloid) <-> Desktop NodeJS App (TidGi) ","core-version":">=5.1.22","plugin-type":"plugin","version":"0.1.1","list":"readme ui/ServerList","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"$:/plugins/linonetwo/tw-mobile-sync/browser-background-sync.js\":{\"title\":\"$:/plugins/linonetwo/tw-mobile-sync/browser-background-sync.js\",\"text\":\"var __create = Object.create;\\nvar __defProp = Object.defineProperty;\\nvar __defProps = Object.defineProperties;\\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\\nvar __getOwnPropNames = Object.getOwnPropertyNames;\\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\\nvar __getProtoOf = Object.getPrototypeOf;\\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\\nvar __spreadValues = (a, b) => {\\n  for (var prop in b || (b = {}))\\n    if (__hasOwnProp.call(b, prop))\\n      __defNormalProp(a, prop, b[prop]);\\n  if (__getOwnPropSymbols)\\n    for (var prop of __getOwnPropSymbols(b)) {\\n      if (__propIsEnum.call(b, prop))\\n        __defNormalProp(a, prop, b[prop]);\\n    }\\n  return a;\\n};\\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\\nvar __commonJS = (cb, mod) => function __require() {\\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\\n};\\nvar __copyProps = (to, from, except, desc) => {\\n  if (from && typeof from === \\\"object\\\" || typeof from === \\\"function\\\") {\\n    for (let key of __getOwnPropNames(from))\\n      if (!__hasOwnProp.call(to, key) && key !== except)\\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\\n  }\\n  return to;\\n};\\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, \\\"default\\\", { value: mod, enumerable: true }) : target, mod));\\n\\n// node_modules/lodash/_freeGlobal.js\\nvar require_freeGlobal = __commonJS({\\n  \\\"node_modules/lodash/_freeGlobal.js\\\"(exports2, module2) {\\n    var freeGlobal = typeof global == \\\"object\\\" && global && global.Object === Object && global;\\n    module2.exports = freeGlobal;\\n  }\\n});\\n\\n// node_modules/lodash/_root.js\\nvar require_root = __commonJS({\\n  \\\"node_modules/lodash/_root.js\\\"(exports2, module2) {\\n    var freeGlobal = require_freeGlobal();\\n    var freeSelf = typeof self == \\\"object\\\" && self && self.Object === Object && self;\\n    var root = freeGlobal || freeSelf || Function(\\\"return this\\\")();\\n    module2.exports = root;\\n  }\\n});\\n\\n// node_modules/lodash/_Symbol.js\\nvar require_Symbol = __commonJS({\\n  \\\"node_modules/lodash/_Symbol.js\\\"(exports2, module2) {\\n    var root = require_root();\\n    var Symbol = root.Symbol;\\n    module2.exports = Symbol;\\n  }\\n});\\n\\n// node_modules/lodash/_getRawTag.js\\nvar require_getRawTag = __commonJS({\\n  \\\"node_modules/lodash/_getRawTag.js\\\"(exports2, module2) {\\n    var Symbol = require_Symbol();\\n    var objectProto = Object.prototype;\\n    var hasOwnProperty = objectProto.hasOwnProperty;\\n    var nativeObjectToString = objectProto.toString;\\n    var symToStringTag = Symbol ? Symbol.toStringTag : void 0;\\n    function getRawTag(value) {\\n      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];\\n      try {\\n        value[symToStringTag] = void 0;\\n        var unmasked = true;\\n      } catch (e) {\\n      }\\n      var result = nativeObjectToString.call(value);\\n      if (unmasked) {\\n        if (isOwn) {\\n          value[symToStringTag] = tag;\\n        } else {\\n          delete value[symToStringTag];\\n        }\\n      }\\n      return result;\\n    }\\n    module2.exports = getRawTag;\\n  }\\n});\\n\\n// node_modules/lodash/_objectToString.js\\nvar require_objectToString = __commonJS({\\n  \\\"node_modules/lodash/_objectToString.js\\\"(exports2, module2) {\\n    var objectProto = Object.prototype;\\n    var nativeObjectToString = objectProto.toString;\\n    function objectToString(value) {\\n      return nativeObjectToString.call(value);\\n    }\\n    module2.exports = objectToString;\\n  }\\n});\\n\\n// node_modules/lodash/_baseGetTag.js\\nvar require_baseGetTag = __commonJS({\\n  \\\"node_modules/lodash/_baseGetTag.js\\\"(exports2, module2) {\\n    var Symbol = require_Symbol();\\n    var getRawTag = require_getRawTag();\\n    var objectToString = require_objectToString();\\n    var nullTag = \\\"[object Null]\\\";\\n    var undefinedTag = \\\"[object Undefined]\\\";\\n    var symToStringTag = Symbol ? Symbol.toStringTag : void 0;\\n    function baseGetTag(value) {\\n      if (value == null) {\\n        return value === void 0 ? undefinedTag : nullTag;\\n      }\\n      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\\n    }\\n    module2.exports = baseGetTag;\\n  }\\n});\\n\\n// node_modules/lodash/isObject.js\\nvar require_isObject = __commonJS({\\n  \\\"node_modules/lodash/isObject.js\\\"(exports2, module2) {\\n    function isObject(value) {\\n      var type = typeof value;\\n      return value != null && (type == \\\"object\\\" || type == \\\"function\\\");\\n    }\\n    module2.exports = isObject;\\n  }\\n});\\n\\n// node_modules/lodash/isFunction.js\\nvar require_isFunction = __commonJS({\\n  \\\"node_modules/lodash/isFunction.js\\\"(exports2, module2) {\\n    var baseGetTag = require_baseGetTag();\\n    var isObject = require_isObject();\\n    var asyncTag = \\\"[object AsyncFunction]\\\";\\n    var funcTag = \\\"[object Function]\\\";\\n    var genTag = \\\"[object GeneratorFunction]\\\";\\n    var proxyTag = \\\"[object Proxy]\\\";\\n    function isFunction(value) {\\n      if (!isObject(value)) {\\n        return false;\\n      }\\n      var tag = baseGetTag(value);\\n      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\\n    }\\n    module2.exports = isFunction;\\n  }\\n});\\n\\n// node_modules/lodash/_coreJsData.js\\nvar require_coreJsData = __commonJS({\\n  \\\"node_modules/lodash/_coreJsData.js\\\"(exports2, module2) {\\n    var root = require_root();\\n    var coreJsData = root[\\\"__core-js_shared__\\\"];\\n    module2.exports = coreJsData;\\n  }\\n});\\n\\n// node_modules/lodash/_isMasked.js\\nvar require_isMasked = __commonJS({\\n  \\\"node_modules/lodash/_isMasked.js\\\"(exports2, module2) {\\n    var coreJsData = require_coreJsData();\\n    var maskSrcKey = function() {\\n      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || \\\"\\\");\\n      return uid ? \\\"Symbol(src)_1.\\\" + uid : \\\"\\\";\\n    }();\\n    function isMasked(func) {\\n      return !!maskSrcKey && maskSrcKey in func;\\n    }\\n    module2.exports = isMasked;\\n  }\\n});\\n\\n// node_modules/lodash/_toSource.js\\nvar require_toSource = __commonJS({\\n  \\\"node_modules/lodash/_toSource.js\\\"(exports2, module2) {\\n    var funcProto = Function.prototype;\\n    var funcToString = funcProto.toString;\\n    function toSource(func) {\\n      if (func != null) {\\n        try {\\n          return funcToString.call(func);\\n        } catch (e) {\\n        }\\n        try {\\n          return func + \\\"\\\";\\n        } catch (e) {\\n        }\\n      }\\n      return \\\"\\\";\\n    }\\n    module2.exports = toSource;\\n  }\\n});\\n\\n// node_modules/lodash/_baseIsNative.js\\nvar require_baseIsNative = __commonJS({\\n  \\\"node_modules/lodash/_baseIsNative.js\\\"(exports2, module2) {\\n    var isFunction = require_isFunction();\\n    var isMasked = require_isMasked();\\n    var isObject = require_isObject();\\n    var toSource = require_toSource();\\n    var reRegExpChar = /[\\\\\\\\^$.*+?()[\\\\]{}|]/g;\\n    var reIsHostCtor = /^\\\\[object .+?Constructor\\\\]$/;\\n    var funcProto = Function.prototype;\\n    var objectProto = Object.prototype;\\n    var funcToString = funcProto.toString;\\n    var hasOwnProperty = objectProto.hasOwnProperty;\\n    var reIsNative = RegExp(\\\"^\\\" + funcToString.call(hasOwnProperty).replace(reRegExpChar, \\\"\\\\\\\\$&\\\").replace(/hasOwnProperty|(function).*?(?=\\\\\\\\\\\\()| for .+?(?=\\\\\\\\\\\\])/g, \\\"$1.*?\\\") + \\\"$\\\");\\n    function baseIsNative(value) {\\n      if (!isObject(value) || isMasked(value)) {\\n        return false;\\n      }\\n      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\\n      return pattern.test(toSource(value));\\n    }\\n    module2.exports = baseIsNative;\\n  }\\n});\\n\\n// node_modules/lodash/_getValue.js\\nvar require_getValue = __commonJS({\\n  \\\"node_modules/lodash/_getValue.js\\\"(exports2, module2) {\\n    function getValue(object, key) {\\n      return object == null ? void 0 : object[key];\\n    }\\n    module2.exports = getValue;\\n  }\\n});\\n\\n// node_modules/lodash/_getNative.js\\nvar require_getNative = __commonJS({\\n  \\\"node_modules/lodash/_getNative.js\\\"(exports2, module2) {\\n    var baseIsNative = require_baseIsNative();\\n    var getValue = require_getValue();\\n    function getNative(object, key) {\\n      var value = getValue(object, key);\\n      return baseIsNative(value) ? value : void 0;\\n    }\\n    module2.exports = getNative;\\n  }\\n});\\n\\n// node_modules/lodash/_defineProperty.js\\nvar require_defineProperty = __commonJS({\\n  \\\"node_modules/lodash/_defineProperty.js\\\"(exports2, module2) {\\n    var getNative = require_getNative();\\n    var defineProperty = function() {\\n      try {\\n        var func = getNative(Object, \\\"defineProperty\\\");\\n        func({}, \\\"\\\", {});\\n        return func;\\n      } catch (e) {\\n      }\\n    }();\\n    module2.exports = defineProperty;\\n  }\\n});\\n\\n// node_modules/lodash/_baseAssignValue.js\\nvar require_baseAssignValue = __commonJS({\\n  \\\"node_modules/lodash/_baseAssignValue.js\\\"(exports2, module2) {\\n    var defineProperty = require_defineProperty();\\n    function baseAssignValue(object, key, value) {\\n      if (key == \\\"__proto__\\\" && defineProperty) {\\n        defineProperty(object, key, {\\n          \\\"configurable\\\": true,\\n          \\\"enumerable\\\": true,\\n          \\\"value\\\": value,\\n          \\\"writable\\\": true\\n        });\\n      } else {\\n        object[key] = value;\\n      }\\n    }\\n    module2.exports = baseAssignValue;\\n  }\\n});\\n\\n// node_modules/lodash/_createBaseFor.js\\nvar require_createBaseFor = __commonJS({\\n  \\\"node_modules/lodash/_createBaseFor.js\\\"(exports2, module2) {\\n    function createBaseFor(fromRight) {\\n      return function(object, iteratee, keysFunc) {\\n        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;\\n        while (length--) {\\n          var key = props[fromRight ? length : ++index];\\n          if (iteratee(iterable[key], key, iterable) === false) {\\n            break;\\n          }\\n        }\\n        return object;\\n      };\\n    }\\n    module2.exports = createBaseFor;\\n  }\\n});\\n\\n// node_modules/lodash/_baseFor.js\\nvar require_baseFor = __commonJS({\\n  \\\"node_modules/lodash/_baseFor.js\\\"(exports2, module2) {\\n    var createBaseFor = require_createBaseFor();\\n    var baseFor = createBaseFor();\\n    module2.exports = baseFor;\\n  }\\n});\\n\\n// node_modules/lodash/_baseTimes.js\\nvar require_baseTimes = __commonJS({\\n  \\\"node_modules/lodash/_baseTimes.js\\\"(exports2, module2) {\\n    function baseTimes(n, iteratee) {\\n      var index = -1, result = Array(n);\\n      while (++index < n) {\\n        result[index] = iteratee(index);\\n      }\\n      return result;\\n    }\\n    module2.exports = baseTimes;\\n  }\\n});\\n\\n// node_modules/lodash/isObjectLike.js\\nvar require_isObjectLike = __commonJS({\\n  \\\"node_modules/lodash/isObjectLike.js\\\"(exports2, module2) {\\n    function isObjectLike(value) {\\n      return value != null && typeof value == \\\"object\\\";\\n    }\\n    module2.exports = isObjectLike;\\n  }\\n});\\n\\n// node_modules/lodash/_baseIsArguments.js\\nvar require_baseIsArguments = __commonJS({\\n  \\\"node_modules/lodash/_baseIsArguments.js\\\"(exports2, module2) {\\n    var baseGetTag = require_baseGetTag();\\n    var isObjectLike = require_isObjectLike();\\n    var argsTag = \\\"[object Arguments]\\\";\\n    function baseIsArguments(value) {\\n      return isObjectLike(value) && baseGetTag(value) == argsTag;\\n    }\\n    module2.exports = baseIsArguments;\\n  }\\n});\\n\\n// node_modules/lodash/isArguments.js\\nvar require_isArguments = __commonJS({\\n  \\\"node_modules/lodash/isArguments.js\\\"(exports2, module2) {\\n    var baseIsArguments = require_baseIsArguments();\\n    var isObjectLike = require_isObjectLike();\\n    var objectProto = Object.prototype;\\n    var hasOwnProperty = objectProto.hasOwnProperty;\\n    var propertyIsEnumerable = objectProto.propertyIsEnumerable;\\n    var isArguments = baseIsArguments(function() {\\n      return arguments;\\n    }()) ? baseIsArguments : function(value) {\\n      return isObjectLike(value) && hasOwnProperty.call(value, \\\"callee\\\") && !propertyIsEnumerable.call(value, \\\"callee\\\");\\n    };\\n    module2.exports = isArguments;\\n  }\\n});\\n\\n// node_modules/lodash/isArray.js\\nvar require_isArray = __commonJS({\\n  \\\"node_modules/lodash/isArray.js\\\"(exports2, module2) {\\n    var isArray = Array.isArray;\\n    module2.exports = isArray;\\n  }\\n});\\n\\n// node_modules/lodash/stubFalse.js\\nvar require_stubFalse = __commonJS({\\n  \\\"node_modules/lodash/stubFalse.js\\\"(exports2, module2) {\\n    function stubFalse() {\\n      return false;\\n    }\\n    module2.exports = stubFalse;\\n  }\\n});\\n\\n// node_modules/lodash/isBuffer.js\\nvar require_isBuffer = __commonJS({\\n  \\\"node_modules/lodash/isBuffer.js\\\"(exports2, module2) {\\n    var root = require_root();\\n    var stubFalse = require_stubFalse();\\n    var freeExports = typeof exports2 == \\\"object\\\" && exports2 && !exports2.nodeType && exports2;\\n    var freeModule = freeExports && typeof module2 == \\\"object\\\" && module2 && !module2.nodeType && module2;\\n    var moduleExports = freeModule && freeModule.exports === freeExports;\\n    var Buffer2 = moduleExports ? root.Buffer : void 0;\\n    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;\\n    var isBuffer = nativeIsBuffer || stubFalse;\\n    module2.exports = isBuffer;\\n  }\\n});\\n\\n// node_modules/lodash/_isIndex.js\\nvar require_isIndex = __commonJS({\\n  \\\"node_modules/lodash/_isIndex.js\\\"(exports2, module2) {\\n    var MAX_SAFE_INTEGER = 9007199254740991;\\n    var reIsUint = /^(?:0|[1-9]\\\\d*)$/;\\n    function isIndex(value, length) {\\n      var type = typeof value;\\n      length = length == null ? MAX_SAFE_INTEGER : length;\\n      return !!length && (type == \\\"number\\\" || type != \\\"symbol\\\" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);\\n    }\\n    module2.exports = isIndex;\\n  }\\n});\\n\\n// node_modules/lodash/isLength.js\\nvar require_isLength = __commonJS({\\n  \\\"node_modules/lodash/isLength.js\\\"(exports2, module2) {\\n    var MAX_SAFE_INTEGER = 9007199254740991;\\n    function isLength(value) {\\n      return typeof value == \\\"number\\\" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\\n    }\\n    module2.exports = isLength;\\n  }\\n});\\n\\n// node_modules/lodash/_baseIsTypedArray.js\\nvar require_baseIsTypedArray = __commonJS({\\n  \\\"node_modules/lodash/_baseIsTypedArray.js\\\"(exports2, module2) {\\n    var baseGetTag = require_baseGetTag();\\n    var isLength = require_isLength();\\n    var isObjectLike = require_isObjectLike();\\n    var argsTag = \\\"[object Arguments]\\\";\\n    var arrayTag = \\\"[object Array]\\\";\\n    var boolTag = \\\"[object Boolean]\\\";\\n    var dateTag = \\\"[object Date]\\\";\\n    var errorTag = \\\"[object Error]\\\";\\n    var funcTag = \\\"[object Function]\\\";\\n    var mapTag = \\\"[object Map]\\\";\\n    var numberTag = \\\"[object Number]\\\";\\n    var objectTag = \\\"[object Object]\\\";\\n    var regexpTag = \\\"[object RegExp]\\\";\\n    var setTag = \\\"[object Set]\\\";\\n    var stringTag = \\\"[object String]\\\";\\n    var weakMapTag = \\\"[object WeakMap]\\\";\\n    var arrayBufferTag = \\\"[object ArrayBuffer]\\\";\\n    var dataViewTag = \\\"[object DataView]\\\";\\n    var float32Tag = \\\"[object Float32Array]\\\";\\n    var float64Tag = \\\"[object Float64Array]\\\";\\n    var int8Tag = \\\"[object Int8Array]\\\";\\n    var int16Tag = \\\"[object Int16Array]\\\";\\n    var int32Tag = \\\"[object Int32Array]\\\";\\n    var uint8Tag = \\\"[object Uint8Array]\\\";\\n    var uint8ClampedTag = \\\"[object Uint8ClampedArray]\\\";\\n    var uint16Tag = \\\"[object Uint16Array]\\\";\\n    var uint32Tag = \\\"[object Uint32Array]\\\";\\n    var typedArrayTags = {};\\n    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\\n    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\\n    function baseIsTypedArray(value) {\\n      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\\n    }\\n    module2.exports = baseIsTypedArray;\\n  }\\n});\\n\\n// node_modules/lodash/_baseUnary.js\\nvar require_baseUnary = __commonJS({\\n  \\\"node_modules/lodash/_baseUnary.js\\\"(exports2, module2) {\\n    function baseUnary(func) {\\n      return function(value) {\\n        return func(value);\\n      };\\n    }\\n    module2.exports = baseUnary;\\n  }\\n});\\n\\n// node_modules/lodash/_nodeUtil.js\\nvar require_nodeUtil = __commonJS({\\n  \\\"node_modules/lodash/_nodeUtil.js\\\"(exports2, module2) {\\n    var freeGlobal = require_freeGlobal();\\n    var freeExports = typeof exports2 == \\\"object\\\" && exports2 && !exports2.nodeType && exports2;\\n    var freeModule = freeExports && typeof module2 == \\\"object\\\" && module2 && !module2.nodeType && module2;\\n    var moduleExports = freeModule && freeModule.exports === freeExports;\\n    var freeProcess = moduleExports && freeGlobal.process;\\n    var nodeUtil = function() {\\n      try {\\n        var types = freeModule && freeModule.require && freeModule.require(\\\"util\\\").types;\\n        if (types) {\\n          return types;\\n        }\\n        return freeProcess && freeProcess.binding && freeProcess.binding(\\\"util\\\");\\n      } catch (e) {\\n      }\\n    }();\\n    module2.exports = nodeUtil;\\n  }\\n});\\n\\n// node_modules/lodash/isTypedArray.js\\nvar require_isTypedArray = __commonJS({\\n  \\\"node_modules/lodash/isTypedArray.js\\\"(exports2, module2) {\\n    var baseIsTypedArray = require_baseIsTypedArray();\\n    var baseUnary = require_baseUnary();\\n    var nodeUtil = require_nodeUtil();\\n    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\\n    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\\n    module2.exports = isTypedArray;\\n  }\\n});\\n\\n// node_modules/lodash/_arrayLikeKeys.js\\nvar require_arrayLikeKeys = __commonJS({\\n  \\\"node_modules/lodash/_arrayLikeKeys.js\\\"(exports2, module2) {\\n    var baseTimes = require_baseTimes();\\n    var isArguments = require_isArguments();\\n    var isArray = require_isArray();\\n    var isBuffer = require_isBuffer();\\n    var isIndex = require_isIndex();\\n    var isTypedArray = require_isTypedArray();\\n    var objectProto = Object.prototype;\\n    var hasOwnProperty = objectProto.hasOwnProperty;\\n    function arrayLikeKeys(value, inherited) {\\n      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;\\n      for (var key in value) {\\n        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == \\\"length\\\" || isBuff && (key == \\\"offset\\\" || key == \\\"parent\\\") || isType && (key == \\\"buffer\\\" || key == \\\"byteLength\\\" || key == \\\"byteOffset\\\") || isIndex(key, length)))) {\\n          result.push(key);\\n        }\\n      }\\n      return result;\\n    }\\n    module2.exports = arrayLikeKeys;\\n  }\\n});\\n\\n// node_modules/lodash/_isPrototype.js\\nvar require_isPrototype = __commonJS({\\n  \\\"node_modules/lodash/_isPrototype.js\\\"(exports2, module2) {\\n    var objectProto = Object.prototype;\\n    function isPrototype(value) {\\n      var Ctor = value && value.constructor, proto = typeof Ctor == \\\"function\\\" && Ctor.prototype || objectProto;\\n      return value === proto;\\n    }\\n    module2.exports = isPrototype;\\n  }\\n});\\n\\n// node_modules/lodash/_overArg.js\\nvar require_overArg = __commonJS({\\n  \\\"node_modules/lodash/_overArg.js\\\"(exports2, module2) {\\n    function overArg(func, transform) {\\n      return function(arg) {\\n        return func(transform(arg));\\n      };\\n    }\\n    module2.exports = overArg;\\n  }\\n});\\n\\n// node_modules/lodash/_nativeKeys.js\\nvar require_nativeKeys = __commonJS({\\n  \\\"node_modules/lodash/_nativeKeys.js\\\"(exports2, module2) {\\n    var overArg = require_overArg();\\n    var nativeKeys = overArg(Object.keys, Object);\\n    module2.exports = nativeKeys;\\n  }\\n});\\n\\n// node_modules/lodash/_baseKeys.js\\nvar require_baseKeys = __commonJS({\\n  \\\"node_modules/lodash/_baseKeys.js\\\"(exports2, module2) {\\n    var isPrototype = require_isPrototype();\\n    var nativeKeys = require_nativeKeys();\\n    var objectProto = Object.prototype;\\n    var hasOwnProperty = objectProto.hasOwnProperty;\\n    function baseKeys(object) {\\n      if (!isPrototype(object)) {\\n        return nativeKeys(object);\\n      }\\n      var result = [];\\n      for (var key in Object(object)) {\\n        if (hasOwnProperty.call(object, key) && key != \\\"constructor\\\") {\\n          result.push(key);\\n        }\\n      }\\n      return result;\\n    }\\n    module2.exports = baseKeys;\\n  }\\n});\\n\\n// node_modules/lodash/isArrayLike.js\\nvar require_isArrayLike = __commonJS({\\n  \\\"node_modules/lodash/isArrayLike.js\\\"(exports2, module2) {\\n    var isFunction = require_isFunction();\\n    var isLength = require_isLength();\\n    function isArrayLike(value) {\\n      return value != null && isLength(value.length) && !isFunction(value);\\n    }\\n    module2.exports = isArrayLike;\\n  }\\n});\\n\\n// node_modules/lodash/keys.js\\nvar require_keys = __commonJS({\\n  \\\"node_modules/lodash/keys.js\\\"(exports2, module2) {\\n    var arrayLikeKeys = require_arrayLikeKeys();\\n    var baseKeys = require_baseKeys();\\n    var isArrayLike = require_isArrayLike();\\n    function keys(object) {\\n      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\\n    }\\n    module2.exports = keys;\\n  }\\n});\\n\\n// node_modules/lodash/_baseForOwn.js\\nvar require_baseForOwn = __commonJS({\\n  \\\"node_modules/lodash/_baseForOwn.js\\\"(exports2, module2) {\\n    var baseFor = require_baseFor();\\n    var keys = require_keys();\\n    function baseForOwn(object, iteratee) {\\n      return object && baseFor(object, iteratee, keys);\\n    }\\n    module2.exports = baseForOwn;\\n  }\\n});\\n\\n// node_modules/lodash/_listCacheClear.js\\nvar require_listCacheClear = __commonJS({\\n  \\\"node_modules/lodash/_listCacheClear.js\\\"(exports2, module2) {\\n    function listCacheClear() {\\n      this.__data__ = [];\\n      this.size = 0;\\n    }\\n    module2.exports = listCacheClear;\\n  }\\n});\\n\\n// node_modules/lodash/eq.js\\nvar require_eq = __commonJS({\\n  \\\"node_modules/lodash/eq.js\\\"(exports2, module2) {\\n    function eq(value, other) {\\n      return value === other || value !== value && other !== other;\\n    }\\n    module2.exports = eq;\\n  }\\n});\\n\\n// node_modules/lodash/_assocIndexOf.js\\nvar require_assocIndexOf = __commonJS({\\n  \\\"node_modules/lodash/_assocIndexOf.js\\\"(exports2, module2) {\\n    var eq = require_eq();\\n    function assocIndexOf(array, key) {\\n      var length = array.length;\\n      while (length--) {\\n        if (eq(array[length][0], key)) {\\n          return length;\\n        }\\n      }\\n      return -1;\\n    }\\n    module2.exports = assocIndexOf;\\n  }\\n});\\n\\n// node_modules/lodash/_listCacheDelete.js\\nvar require_listCacheDelete = __commonJS({\\n  \\\"node_modules/lodash/_listCacheDelete.js\\\"(exports2, module2) {\\n    var assocIndexOf = require_assocIndexOf();\\n    var arrayProto = Array.prototype;\\n    var splice = arrayProto.splice;\\n    function listCacheDelete(key) {\\n      var data = this.__data__, index = assocIndexOf(data, key);\\n      if (index < 0) {\\n        return false;\\n      }\\n      var lastIndex = data.length - 1;\\n      if (index == lastIndex) {\\n        data.pop();\\n      } else {\\n        splice.call(data, index, 1);\\n      }\\n      --this.size;\\n      return true;\\n    }\\n    module2.exports = listCacheDelete;\\n  }\\n});\\n\\n// node_modules/lodash/_listCacheGet.js\\nvar require_listCacheGet = __commonJS({\\n  \\\"node_modules/lodash/_listCacheGet.js\\\"(exports2, module2) {\\n    var assocIndexOf = require_assocIndexOf();\\n    function listCacheGet(key) {\\n      var data = this.__data__, index = assocIndexOf(data, key);\\n      return index < 0 ? void 0 : data[index][1];\\n    }\\n    module2.exports = listCacheGet;\\n  }\\n});\\n\\n// node_modules/lodash/_listCacheHas.js\\nvar require_listCacheHas = __commonJS({\\n  \\\"node_modules/lodash/_listCacheHas.js\\\"(exports2, module2) {\\n    var assocIndexOf = require_assocIndexOf();\\n    function listCacheHas(key) {\\n      return assocIndexOf(this.__data__, key) > -1;\\n    }\\n    module2.exports = listCacheHas;\\n  }\\n});\\n\\n// node_modules/lodash/_listCacheSet.js\\nvar require_listCacheSet = __commonJS({\\n  \\\"node_modules/lodash/_listCacheSet.js\\\"(exports2, module2) {\\n    var assocIndexOf = require_assocIndexOf();\\n    function listCacheSet(key, value) {\\n      var data = this.__data__, index = assocIndexOf(data, key);\\n      if (index < 0) {\\n        ++this.size;\\n        data.push([key, value]);\\n      } else {\\n        data[index][1] = value;\\n      }\\n      return this;\\n    }\\n    module2.exports = listCacheSet;\\n  }\\n});\\n\\n// node_modules/lodash/_ListCache.js\\nvar require_ListCache = __commonJS({\\n  \\\"node_modules/lodash/_ListCache.js\\\"(exports2, module2) {\\n    var listCacheClear = require_listCacheClear();\\n    var listCacheDelete = require_listCacheDelete();\\n    var listCacheGet = require_listCacheGet();\\n    var listCacheHas = require_listCacheHas();\\n    var listCacheSet = require_listCacheSet();\\n    function ListCache(entries) {\\n      var index = -1, length = entries == null ? 0 : entries.length;\\n      this.clear();\\n      while (++index < length) {\\n        var entry = entries[index];\\n        this.set(entry[0], entry[1]);\\n      }\\n    }\\n    ListCache.prototype.clear = listCacheClear;\\n    ListCache.prototype[\\\"delete\\\"] = listCacheDelete;\\n    ListCache.prototype.get = listCacheGet;\\n    ListCache.prototype.has = listCacheHas;\\n    ListCache.prototype.set = listCacheSet;\\n    module2.exports = ListCache;\\n  }\\n});\\n\\n// node_modules/lodash/_stackClear.js\\nvar require_stackClear = __commonJS({\\n  \\\"node_modules/lodash/_stackClear.js\\\"(exports2, module2) {\\n    var ListCache = require_ListCache();\\n    function stackClear() {\\n      this.__data__ = new ListCache();\\n      this.size = 0;\\n    }\\n    module2.exports = stackClear;\\n  }\\n});\\n\\n// node_modules/lodash/_stackDelete.js\\nvar require_stackDelete = __commonJS({\\n  \\\"node_modules/lodash/_stackDelete.js\\\"(exports2, module2) {\\n    function stackDelete(key) {\\n      var data = this.__data__, result = data[\\\"delete\\\"](key);\\n      this.size = data.size;\\n      return result;\\n    }\\n    module2.exports = stackDelete;\\n  }\\n});\\n\\n// node_modules/lodash/_stackGet.js\\nvar require_stackGet = __commonJS({\\n  \\\"node_modules/lodash/_stackGet.js\\\"(exports2, module2) {\\n    function stackGet(key) {\\n      return this.__data__.get(key);\\n    }\\n    module2.exports = stackGet;\\n  }\\n});\\n\\n// node_modules/lodash/_stackHas.js\\nvar require_stackHas = __commonJS({\\n  \\\"node_modules/lodash/_stackHas.js\\\"(exports2, module2) {\\n    function stackHas(key) {\\n      return this.__data__.has(key);\\n    }\\n    module2.exports = stackHas;\\n  }\\n});\\n\\n// node_modules/lodash/_Map.js\\nvar require_Map = __commonJS({\\n  \\\"node_modules/lodash/_Map.js\\\"(exports2, module2) {\\n    var getNative = require_getNative();\\n    var root = require_root();\\n    var Map = getNative(root, \\\"Map\\\");\\n    module2.exports = Map;\\n  }\\n});\\n\\n// node_modules/lodash/_nativeCreate.js\\nvar require_nativeCreate = __commonJS({\\n  \\\"node_modules/lodash/_nativeCreate.js\\\"(exports2, module2) {\\n    var getNative = require_getNative();\\n    var nativeCreate = getNative(Object, \\\"create\\\");\\n    module2.exports = nativeCreate;\\n  }\\n});\\n\\n// node_modules/lodash/_hashClear.js\\nvar require_hashClear = __commonJS({\\n  \\\"node_modules/lodash/_hashClear.js\\\"(exports2, module2) {\\n    var nativeCreate = require_nativeCreate();\\n    function hashClear() {\\n      this.__data__ = nativeCreate ? nativeCreate(null) : {};\\n      this.size = 0;\\n    }\\n    module2.exports = hashClear;\\n  }\\n});\\n\\n// node_modules/lodash/_hashDelete.js\\nvar require_hashDelete = __commonJS({\\n  \\\"node_modules/lodash/_hashDelete.js\\\"(exports2, module2) {\\n    function hashDelete(key) {\\n      var result = this.has(key) && delete this.__data__[key];\\n      this.size -= result ? 1 : 0;\\n      return result;\\n    }\\n    module2.exports = hashDelete;\\n  }\\n});\\n\\n// node_modules/lodash/_hashGet.js\\nvar require_hashGet = __commonJS({\\n  \\\"node_modules/lodash/_hashGet.js\\\"(exports2, module2) {\\n    var nativeCreate = require_nativeCreate();\\n    var HASH_UNDEFINED = \\\"__lodash_hash_undefined__\\\";\\n    var objectProto = Object.prototype;\\n    var hasOwnProperty = objectProto.hasOwnProperty;\\n    function hashGet(key) {\\n      var data = this.__data__;\\n      if (nativeCreate) {\\n        var result = data[key];\\n        return result === HASH_UNDEFINED ? void 0 : result;\\n      }\\n      return hasOwnProperty.call(data, key) ? data[key] : void 0;\\n    }\\n    module2.exports = hashGet;\\n  }\\n});\\n\\n// node_modules/lodash/_hashHas.js\\nvar require_hashHas = __commonJS({\\n  \\\"node_modules/lodash/_hashHas.js\\\"(exports2, module2) {\\n    var nativeCreate = require_nativeCreate();\\n    var objectProto = Object.prototype;\\n    var hasOwnProperty = objectProto.hasOwnProperty;\\n    function hashHas(key) {\\n      var data = this.__data__;\\n      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);\\n    }\\n    module2.exports = hashHas;\\n  }\\n});\\n\\n// node_modules/lodash/_hashSet.js\\nvar require_hashSet = __commonJS({\\n  \\\"node_modules/lodash/_hashSet.js\\\"(exports2, module2) {\\n    var nativeCreate = require_nativeCreate();\\n    var HASH_UNDEFINED = \\\"__lodash_hash_undefined__\\\";\\n    function hashSet(key, value) {\\n      var data = this.__data__;\\n      this.size += this.has(key) ? 0 : 1;\\n      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;\\n      return this;\\n    }\\n    module2.exports = hashSet;\\n  }\\n});\\n\\n// node_modules/lodash/_Hash.js\\nvar require_Hash = __commonJS({\\n  \\\"node_modules/lodash/_Hash.js\\\"(exports2, module2) {\\n    var hashClear = require_hashClear();\\n    var hashDelete = require_hashDelete();\\n    var hashGet = require_hashGet();\\n    var hashHas = require_hashHas();\\n    var hashSet = require_hashSet();\\n    function Hash(entries) {\\n      var index = -1, length = entries == null ? 0 : entries.length;\\n      this.clear();\\n      while (++index < length) {\\n        var entry = entries[index];\\n        this.set(entry[0], entry[1]);\\n      }\\n    }\\n    Hash.prototype.clear = hashClear;\\n    Hash.prototype[\\\"delete\\\"] = hashDelete;\\n    Hash.prototype.get = hashGet;\\n    Hash.prototype.has = hashHas;\\n    Hash.prototype.set = hashSet;\\n    module2.exports = Hash;\\n  }\\n});\\n\\n// node_modules/lodash/_mapCacheClear.js\\nvar require_mapCacheClear = __commonJS({\\n  \\\"node_modules/lodash/_mapCacheClear.js\\\"(exports2, module2) {\\n    var Hash = require_Hash();\\n    var ListCache = require_ListCache();\\n    var Map = require_Map();\\n    function mapCacheClear() {\\n      this.size = 0;\\n      this.__data__ = {\\n        \\\"hash\\\": new Hash(),\\n        \\\"map\\\": new (Map || ListCache)(),\\n        \\\"string\\\": new Hash()\\n      };\\n    }\\n    module2.exports = mapCacheClear;\\n  }\\n});\\n\\n// node_modules/lodash/_isKeyable.js\\nvar require_isKeyable = __commonJS({\\n  \\\"node_modules/lodash/_isKeyable.js\\\"(exports2, module2) {\\n    function isKeyable(value) {\\n      var type = typeof value;\\n      return type == \\\"string\\\" || type == \\\"number\\\" || type == \\\"symbol\\\" || type == \\\"boolean\\\" ? value !== \\\"__proto__\\\" : value === null;\\n    }\\n    module2.exports = isKeyable;\\n  }\\n});\\n\\n// node_modules/lodash/_getMapData.js\\nvar require_getMapData = __commonJS({\\n  \\\"node_modules/lodash/_getMapData.js\\\"(exports2, module2) {\\n    var isKeyable = require_isKeyable();\\n    function getMapData(map, key) {\\n      var data = map.__data__;\\n      return isKeyable(key) ? data[typeof key == \\\"string\\\" ? \\\"string\\\" : \\\"hash\\\"] : data.map;\\n    }\\n    module2.exports = getMapData;\\n  }\\n});\\n\\n// node_modules/lodash/_mapCacheDelete.js\\nvar require_mapCacheDelete = __commonJS({\\n  \\\"node_modules/lodash/_mapCacheDelete.js\\\"(exports2, module2) {\\n    var getMapData = require_getMapData();\\n    function mapCacheDelete(key) {\\n      var result = getMapData(this, key)[\\\"delete\\\"](key);\\n      this.size -= result ? 1 : 0;\\n      return result;\\n    }\\n    module2.exports = mapCacheDelete;\\n  }\\n});\\n\\n// node_modules/lodash/_mapCacheGet.js\\nvar require_mapCacheGet = __commonJS({\\n  \\\"node_modules/lodash/_mapCacheGet.js\\\"(exports2, module2) {\\n    var getMapData = require_getMapData();\\n    function mapCacheGet(key) {\\n      return getMapData(this, key).get(key);\\n    }\\n    module2.exports = mapCacheGet;\\n  }\\n});\\n\\n// node_modules/lodash/_mapCacheHas.js\\nvar require_mapCacheHas = __commonJS({\\n  \\\"node_modules/lodash/_mapCacheHas.js\\\"(exports2, module2) {\\n    var getMapData = require_getMapData();\\n    function mapCacheHas(key) {\\n      return getMapData(this, key).has(key);\\n    }\\n    module2.exports = mapCacheHas;\\n  }\\n});\\n\\n// node_modules/lodash/_mapCacheSet.js\\nvar require_mapCacheSet = __commonJS({\\n  \\\"node_modules/lodash/_mapCacheSet.js\\\"(exports2, module2) {\\n    var getMapData = require_getMapData();\\n    function mapCacheSet(key, value) {\\n      var data = getMapData(this, key), size = data.size;\\n      data.set(key, value);\\n      this.size += data.size == size ? 0 : 1;\\n      return this;\\n    }\\n    module2.exports = mapCacheSet;\\n  }\\n});\\n\\n// node_modules/lodash/_MapCache.js\\nvar require_MapCache = __commonJS({\\n  \\\"node_modules/lodash/_MapCache.js\\\"(exports2, module2) {\\n    var mapCacheClear = require_mapCacheClear();\\n    var mapCacheDelete = require_mapCacheDelete();\\n    var mapCacheGet = require_mapCacheGet();\\n    var mapCacheHas = require_mapCacheHas();\\n    var mapCacheSet = require_mapCacheSet();\\n    function MapCache(entries) {\\n      var index = -1, length = entries == null ? 0 : entries.length;\\n      this.clear();\\n      while (++index < length) {\\n        var entry = entries[index];\\n        this.set(entry[0], entry[1]);\\n      }\\n    }\\n    MapCache.prototype.clear = mapCacheClear;\\n    MapCache.prototype[\\\"delete\\\"] = mapCacheDelete;\\n    MapCache.prototype.get = mapCacheGet;\\n    MapCache.prototype.has = mapCacheHas;\\n    MapCache.prototype.set = mapCacheSet;\\n    module2.exports = MapCache;\\n  }\\n});\\n\\n// node_modules/lodash/_stackSet.js\\nvar require_stackSet = __commonJS({\\n  \\\"node_modules/lodash/_stackSet.js\\\"(exports2, module2) {\\n    var ListCache = require_ListCache();\\n    var Map = require_Map();\\n    var MapCache = require_MapCache();\\n    var LARGE_ARRAY_SIZE = 200;\\n    function stackSet(key, value) {\\n      var data = this.__data__;\\n      if (data instanceof ListCache) {\\n        var pairs = data.__data__;\\n        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {\\n          pairs.push([key, value]);\\n          this.size = ++data.size;\\n          return this;\\n        }\\n        data = this.__data__ = new MapCache(pairs);\\n      }\\n      data.set(key, value);\\n      this.size = data.size;\\n      return this;\\n    }\\n    module2.exports = stackSet;\\n  }\\n});\\n\\n// node_modules/lodash/_Stack.js\\nvar require_Stack = __commonJS({\\n  \\\"node_modules/lodash/_Stack.js\\\"(exports2, module2) {\\n    var ListCache = require_ListCache();\\n    var stackClear = require_stackClear();\\n    var stackDelete = require_stackDelete();\\n    var stackGet = require_stackGet();\\n    var stackHas = require_stackHas();\\n    var stackSet = require_stackSet();\\n    function Stack(entries) {\\n      var data = this.__data__ = new ListCache(entries);\\n      this.size = data.size;\\n    }\\n    Stack.prototype.clear = stackClear;\\n    Stack.prototype[\\\"delete\\\"] = stackDelete;\\n    Stack.prototype.get = stackGet;\\n    Stack.prototype.has = stackHas;\\n    Stack.prototype.set = stackSet;\\n    module2.exports = Stack;\\n  }\\n});\\n\\n// node_modules/lodash/_setCacheAdd.js\\nvar require_setCacheAdd = __commonJS({\\n  \\\"node_modules/lodash/_setCacheAdd.js\\\"(exports2, module2) {\\n    var HASH_UNDEFINED = \\\"__lodash_hash_undefined__\\\";\\n    function setCacheAdd(value) {\\n      this.__data__.set(value, HASH_UNDEFINED);\\n      return this;\\n    }\\n    module2.exports = setCacheAdd;\\n  }\\n});\\n\\n// node_modules/lodash/_setCacheHas.js\\nvar require_setCacheHas = __commonJS({\\n  \\\"node_modules/lodash/_setCacheHas.js\\\"(exports2, module2) {\\n    function setCacheHas(value) {\\n      return this.__data__.has(value);\\n    }\\n    module2.exports = setCacheHas;\\n  }\\n});\\n\\n// node_modules/lodash/_SetCache.js\\nvar require_SetCache = __commonJS({\\n  \\\"node_modules/lodash/_SetCache.js\\\"(exports2, module2) {\\n    var MapCache = require_MapCache();\\n    var setCacheAdd = require_setCacheAdd();\\n    var setCacheHas = require_setCacheHas();\\n    function SetCache(values) {\\n      var index = -1, length = values == null ? 0 : values.length;\\n      this.__data__ = new MapCache();\\n      while (++index < length) {\\n        this.add(values[index]);\\n      }\\n    }\\n    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\\n    SetCache.prototype.has = setCacheHas;\\n    module2.exports = SetCache;\\n  }\\n});\\n\\n// node_modules/lodash/_arraySome.js\\nvar require_arraySome = __commonJS({\\n  \\\"node_modules/lodash/_arraySome.js\\\"(exports2, module2) {\\n    function arraySome(array, predicate) {\\n      var index = -1, length = array == null ? 0 : array.length;\\n      while (++index < length) {\\n        if (predicate(array[index], index, array)) {\\n          return true;\\n        }\\n      }\\n      return false;\\n    }\\n    module2.exports = arraySome;\\n  }\\n});\\n\\n// node_modules/lodash/_cacheHas.js\\nvar require_cacheHas = __commonJS({\\n  \\\"node_modules/lodash/_cacheHas.js\\\"(exports2, module2) {\\n    function cacheHas(cache, key) {\\n      return cache.has(key);\\n    }\\n    module2.exports = cacheHas;\\n  }\\n});\\n\\n// node_modules/lodash/_equalArrays.js\\nvar require_equalArrays = __commonJS({\\n  \\\"node_modules/lodash/_equalArrays.js\\\"(exports2, module2) {\\n    var SetCache = require_SetCache();\\n    var arraySome = require_arraySome();\\n    var cacheHas = require_cacheHas();\\n    var COMPARE_PARTIAL_FLAG = 1;\\n    var COMPARE_UNORDERED_FLAG = 2;\\n    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;\\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\\n        return false;\\n      }\\n      var arrStacked = stack.get(array);\\n      var othStacked = stack.get(other);\\n      if (arrStacked && othStacked) {\\n        return arrStacked == other && othStacked == array;\\n      }\\n      var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;\\n      stack.set(array, other);\\n      stack.set(other, array);\\n      while (++index < arrLength) {\\n        var arrValue = array[index], othValue = other[index];\\n        if (customizer) {\\n          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);\\n        }\\n        if (compared !== void 0) {\\n          if (compared) {\\n            continue;\\n          }\\n          result = false;\\n          break;\\n        }\\n        if (seen) {\\n          if (!arraySome(other, function(othValue2, othIndex) {\\n            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {\\n              return seen.push(othIndex);\\n            }\\n          })) {\\n            result = false;\\n            break;\\n          }\\n        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\\n          result = false;\\n          break;\\n        }\\n      }\\n      stack[\\\"delete\\\"](array);\\n      stack[\\\"delete\\\"](other);\\n      return result;\\n    }\\n    module2.exports = equalArrays;\\n  }\\n});\\n\\n// node_modules/lodash/_Uint8Array.js\\nvar require_Uint8Array = __commonJS({\\n  \\\"node_modules/lodash/_Uint8Array.js\\\"(exports2, module2) {\\n    var root = require_root();\\n    var Uint8Array2 = root.Uint8Array;\\n    module2.exports = Uint8Array2;\\n  }\\n});\\n\\n// node_modules/lodash/_mapToArray.js\\nvar require_mapToArray = __commonJS({\\n  \\\"node_modules/lodash/_mapToArray.js\\\"(exports2, module2) {\\n    function mapToArray(map) {\\n      var index = -1, result = Array(map.size);\\n      map.forEach(function(value, key) {\\n        result[++index] = [key, value];\\n      });\\n      return result;\\n    }\\n    module2.exports = mapToArray;\\n  }\\n});\\n\\n// node_modules/lodash/_setToArray.js\\nvar require_setToArray = __commonJS({\\n  \\\"node_modules/lodash/_setToArray.js\\\"(exports2, module2) {\\n    function setToArray(set) {\\n      var index = -1, result = Array(set.size);\\n      set.forEach(function(value) {\\n        result[++index] = value;\\n      });\\n      return result;\\n    }\\n    module2.exports = setToArray;\\n  }\\n});\\n\\n// node_modules/lodash/_equalByTag.js\\nvar require_equalByTag = __commonJS({\\n  \\\"node_modules/lodash/_equalByTag.js\\\"(exports2, module2) {\\n    var Symbol = require_Symbol();\\n    var Uint8Array2 = require_Uint8Array();\\n    var eq = require_eq();\\n    var equalArrays = require_equalArrays();\\n    var mapToArray = require_mapToArray();\\n    var setToArray = require_setToArray();\\n    var COMPARE_PARTIAL_FLAG = 1;\\n    var COMPARE_UNORDERED_FLAG = 2;\\n    var boolTag = \\\"[object Boolean]\\\";\\n    var dateTag = \\\"[object Date]\\\";\\n    var errorTag = \\\"[object Error]\\\";\\n    var mapTag = \\\"[object Map]\\\";\\n    var numberTag = \\\"[object Number]\\\";\\n    var regexpTag = \\\"[object RegExp]\\\";\\n    var setTag = \\\"[object Set]\\\";\\n    var stringTag = \\\"[object String]\\\";\\n    var symbolTag = \\\"[object Symbol]\\\";\\n    var arrayBufferTag = \\\"[object ArrayBuffer]\\\";\\n    var dataViewTag = \\\"[object DataView]\\\";\\n    var symbolProto = Symbol ? Symbol.prototype : void 0;\\n    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;\\n    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\\n      switch (tag) {\\n        case dataViewTag:\\n          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {\\n            return false;\\n          }\\n          object = object.buffer;\\n          other = other.buffer;\\n        case arrayBufferTag:\\n          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {\\n            return false;\\n          }\\n          return true;\\n        case boolTag:\\n        case dateTag:\\n        case numberTag:\\n          return eq(+object, +other);\\n        case errorTag:\\n          return object.name == other.name && object.message == other.message;\\n        case regexpTag:\\n        case stringTag:\\n          return object == other + \\\"\\\";\\n        case mapTag:\\n          var convert = mapToArray;\\n        case setTag:\\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\\n          convert || (convert = setToArray);\\n          if (object.size != other.size && !isPartial) {\\n            return false;\\n          }\\n          var stacked = stack.get(object);\\n          if (stacked) {\\n            return stacked == other;\\n          }\\n          bitmask |= COMPARE_UNORDERED_FLAG;\\n          stack.set(object, other);\\n          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\\n          stack[\\\"delete\\\"](object);\\n          return result;\\n        case symbolTag:\\n          if (symbolValueOf) {\\n            return symbolValueOf.call(object) == symbolValueOf.call(other);\\n          }\\n      }\\n      return false;\\n    }\\n    module2.exports = equalByTag;\\n  }\\n});\\n\\n// node_modules/lodash/_arrayPush.js\\nvar require_arrayPush = __commonJS({\\n  \\\"node_modules/lodash/_arrayPush.js\\\"(exports2, module2) {\\n    function arrayPush(array, values) {\\n      var index = -1, length = values.length, offset = array.length;\\n      while (++index < length) {\\n        array[offset + index] = values[index];\\n      }\\n      return array;\\n    }\\n    module2.exports = arrayPush;\\n  }\\n});\\n\\n// node_modules/lodash/_baseGetAllKeys.js\\nvar require_baseGetAllKeys = __commonJS({\\n  \\\"node_modules/lodash/_baseGetAllKeys.js\\\"(exports2, module2) {\\n    var arrayPush = require_arrayPush();\\n    var isArray = require_isArray();\\n    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\\n      var result = keysFunc(object);\\n      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\\n    }\\n    module2.exports = baseGetAllKeys;\\n  }\\n});\\n\\n// node_modules/lodash/_arrayFilter.js\\nvar require_arrayFilter = __commonJS({\\n  \\\"node_modules/lodash/_arrayFilter.js\\\"(exports2, module2) {\\n    function arrayFilter(array, predicate) {\\n      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];\\n      while (++index < length) {\\n        var value = array[index];\\n        if (predicate(value, index, array)) {\\n          result[resIndex++] = value;\\n        }\\n      }\\n      return result;\\n    }\\n    module2.exports = arrayFilter;\\n  }\\n});\\n\\n// node_modules/lodash/stubArray.js\\nvar require_stubArray = __commonJS({\\n  \\\"node_modules/lodash/stubArray.js\\\"(exports2, module2) {\\n    function stubArray() {\\n      return [];\\n    }\\n    module2.exports = stubArray;\\n  }\\n});\\n\\n// node_modules/lodash/_getSymbols.js\\nvar require_getSymbols = __commonJS({\\n  \\\"node_modules/lodash/_getSymbols.js\\\"(exports2, module2) {\\n    var arrayFilter = require_arrayFilter();\\n    var stubArray = require_stubArray();\\n    var objectProto = Object.prototype;\\n    var propertyIsEnumerable = objectProto.propertyIsEnumerable;\\n    var nativeGetSymbols = Object.getOwnPropertySymbols;\\n    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\\n      if (object == null) {\\n        return [];\\n      }\\n      object = Object(object);\\n      return arrayFilter(nativeGetSymbols(object), function(symbol) {\\n        return propertyIsEnumerable.call(object, symbol);\\n      });\\n    };\\n    module2.exports = getSymbols;\\n  }\\n});\\n\\n// node_modules/lodash/_getAllKeys.js\\nvar require_getAllKeys = __commonJS({\\n  \\\"node_modules/lodash/_getAllKeys.js\\\"(exports2, module2) {\\n    var baseGetAllKeys = require_baseGetAllKeys();\\n    var getSymbols = require_getSymbols();\\n    var keys = require_keys();\\n    function getAllKeys(object) {\\n      return baseGetAllKeys(object, keys, getSymbols);\\n    }\\n    module2.exports = getAllKeys;\\n  }\\n});\\n\\n// node_modules/lodash/_equalObjects.js\\nvar require_equalObjects = __commonJS({\\n  \\\"node_modules/lodash/_equalObjects.js\\\"(exports2, module2) {\\n    var getAllKeys = require_getAllKeys();\\n    var COMPARE_PARTIAL_FLAG = 1;\\n    var objectProto = Object.prototype;\\n    var hasOwnProperty = objectProto.hasOwnProperty;\\n    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;\\n      if (objLength != othLength && !isPartial) {\\n        return false;\\n      }\\n      var index = objLength;\\n      while (index--) {\\n        var key = objProps[index];\\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\\n          return false;\\n        }\\n      }\\n      var objStacked = stack.get(object);\\n      var othStacked = stack.get(other);\\n      if (objStacked && othStacked) {\\n        return objStacked == other && othStacked == object;\\n      }\\n      var result = true;\\n      stack.set(object, other);\\n      stack.set(other, object);\\n      var skipCtor = isPartial;\\n      while (++index < objLength) {\\n        key = objProps[index];\\n        var objValue = object[key], othValue = other[key];\\n        if (customizer) {\\n          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);\\n        }\\n        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {\\n          result = false;\\n          break;\\n        }\\n        skipCtor || (skipCtor = key == \\\"constructor\\\");\\n      }\\n      if (result && !skipCtor) {\\n        var objCtor = object.constructor, othCtor = other.constructor;\\n        if (objCtor != othCtor && (\\\"constructor\\\" in object && \\\"constructor\\\" in other) && !(typeof objCtor == \\\"function\\\" && objCtor instanceof objCtor && typeof othCtor == \\\"function\\\" && othCtor instanceof othCtor)) {\\n          result = false;\\n        }\\n      }\\n      stack[\\\"delete\\\"](object);\\n      stack[\\\"delete\\\"](other);\\n      return result;\\n    }\\n    module2.exports = equalObjects;\\n  }\\n});\\n\\n// node_modules/lodash/_DataView.js\\nvar require_DataView = __commonJS({\\n  \\\"node_modules/lodash/_DataView.js\\\"(exports2, module2) {\\n    var getNative = require_getNative();\\n    var root = require_root();\\n    var DataView = getNative(root, \\\"DataView\\\");\\n    module2.exports = DataView;\\n  }\\n});\\n\\n// node_modules/lodash/_Promise.js\\nvar require_Promise = __commonJS({\\n  \\\"node_modules/lodash/_Promise.js\\\"(exports2, module2) {\\n    var getNative = require_getNative();\\n    var root = require_root();\\n    var Promise2 = getNative(root, \\\"Promise\\\");\\n    module2.exports = Promise2;\\n  }\\n});\\n\\n// node_modules/lodash/_Set.js\\nvar require_Set = __commonJS({\\n  \\\"node_modules/lodash/_Set.js\\\"(exports2, module2) {\\n    var getNative = require_getNative();\\n    var root = require_root();\\n    var Set = getNative(root, \\\"Set\\\");\\n    module2.exports = Set;\\n  }\\n});\\n\\n// node_modules/lodash/_WeakMap.js\\nvar require_WeakMap = __commonJS({\\n  \\\"node_modules/lodash/_WeakMap.js\\\"(exports2, module2) {\\n    var getNative = require_getNative();\\n    var root = require_root();\\n    var WeakMap = getNative(root, \\\"WeakMap\\\");\\n    module2.exports = WeakMap;\\n  }\\n});\\n\\n// node_modules/lodash/_getTag.js\\nvar require_getTag = __commonJS({\\n  \\\"node_modules/lodash/_getTag.js\\\"(exports2, module2) {\\n    var DataView = require_DataView();\\n    var Map = require_Map();\\n    var Promise2 = require_Promise();\\n    var Set = require_Set();\\n    var WeakMap = require_WeakMap();\\n    var baseGetTag = require_baseGetTag();\\n    var toSource = require_toSource();\\n    var mapTag = \\\"[object Map]\\\";\\n    var objectTag = \\\"[object Object]\\\";\\n    var promiseTag = \\\"[object Promise]\\\";\\n    var setTag = \\\"[object Set]\\\";\\n    var weakMapTag = \\\"[object WeakMap]\\\";\\n    var dataViewTag = \\\"[object DataView]\\\";\\n    var dataViewCtorString = toSource(DataView);\\n    var mapCtorString = toSource(Map);\\n    var promiseCtorString = toSource(Promise2);\\n    var setCtorString = toSource(Set);\\n    var weakMapCtorString = toSource(WeakMap);\\n    var getTag = baseGetTag;\\n    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {\\n      getTag = function(value) {\\n        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : \\\"\\\";\\n        if (ctorString) {\\n          switch (ctorString) {\\n            case dataViewCtorString:\\n              return dataViewTag;\\n            case mapCtorString:\\n              return mapTag;\\n            case promiseCtorString:\\n              return promiseTag;\\n            case setCtorString:\\n              return setTag;\\n            case weakMapCtorString:\\n              return weakMapTag;\\n          }\\n        }\\n        return result;\\n      };\\n    }\\n    module2.exports = getTag;\\n  }\\n});\\n\\n// node_modules/lodash/_baseIsEqualDeep.js\\nvar require_baseIsEqualDeep = __commonJS({\\n  \\\"node_modules/lodash/_baseIsEqualDeep.js\\\"(exports2, module2) {\\n    var Stack = require_Stack();\\n    var equalArrays = require_equalArrays();\\n    var equalByTag = require_equalByTag();\\n    var equalObjects = require_equalObjects();\\n    var getTag = require_getTag();\\n    var isArray = require_isArray();\\n    var isBuffer = require_isBuffer();\\n    var isTypedArray = require_isTypedArray();\\n    var COMPARE_PARTIAL_FLAG = 1;\\n    var argsTag = \\\"[object Arguments]\\\";\\n    var arrayTag = \\\"[object Array]\\\";\\n    var objectTag = \\\"[object Object]\\\";\\n    var objectProto = Object.prototype;\\n    var hasOwnProperty = objectProto.hasOwnProperty;\\n    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\\n      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);\\n      objTag = objTag == argsTag ? objectTag : objTag;\\n      othTag = othTag == argsTag ? objectTag : othTag;\\n      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;\\n      if (isSameTag && isBuffer(object)) {\\n        if (!isBuffer(other)) {\\n          return false;\\n        }\\n        objIsArr = true;\\n        objIsObj = false;\\n      }\\n      if (isSameTag && !objIsObj) {\\n        stack || (stack = new Stack());\\n        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\\n      }\\n      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, \\\"__wrapped__\\\"), othIsWrapped = othIsObj && hasOwnProperty.call(other, \\\"__wrapped__\\\");\\n        if (objIsWrapped || othIsWrapped) {\\n          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;\\n          stack || (stack = new Stack());\\n          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\\n        }\\n      }\\n      if (!isSameTag) {\\n        return false;\\n      }\\n      stack || (stack = new Stack());\\n      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\\n    }\\n    module2.exports = baseIsEqualDeep;\\n  }\\n});\\n\\n// node_modules/lodash/_baseIsEqual.js\\nvar require_baseIsEqual = __commonJS({\\n  \\\"node_modules/lodash/_baseIsEqual.js\\\"(exports2, module2) {\\n    var baseIsEqualDeep = require_baseIsEqualDeep();\\n    var isObjectLike = require_isObjectLike();\\n    function baseIsEqual(value, other, bitmask, customizer, stack) {\\n      if (value === other) {\\n        return true;\\n      }\\n      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {\\n        return value !== value && other !== other;\\n      }\\n      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\\n    }\\n    module2.exports = baseIsEqual;\\n  }\\n});\\n\\n// node_modules/lodash/_baseIsMatch.js\\nvar require_baseIsMatch = __commonJS({\\n  \\\"node_modules/lodash/_baseIsMatch.js\\\"(exports2, module2) {\\n    var Stack = require_Stack();\\n    var baseIsEqual = require_baseIsEqual();\\n    var COMPARE_PARTIAL_FLAG = 1;\\n    var COMPARE_UNORDERED_FLAG = 2;\\n    function baseIsMatch(object, source, matchData, customizer) {\\n      var index = matchData.length, length = index, noCustomizer = !customizer;\\n      if (object == null) {\\n        return !length;\\n      }\\n      object = Object(object);\\n      while (index--) {\\n        var data = matchData[index];\\n        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {\\n          return false;\\n        }\\n      }\\n      while (++index < length) {\\n        data = matchData[index];\\n        var key = data[0], objValue = object[key], srcValue = data[1];\\n        if (noCustomizer && data[2]) {\\n          if (objValue === void 0 && !(key in object)) {\\n            return false;\\n          }\\n        } else {\\n          var stack = new Stack();\\n          if (customizer) {\\n            var result = customizer(objValue, srcValue, key, object, source, stack);\\n          }\\n          if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {\\n            return false;\\n          }\\n        }\\n      }\\n      return true;\\n    }\\n    module2.exports = baseIsMatch;\\n  }\\n});\\n\\n// node_modules/lodash/_isStrictComparable.js\\nvar require_isStrictComparable = __commonJS({\\n  \\\"node_modules/lodash/_isStrictComparable.js\\\"(exports2, module2) {\\n    var isObject = require_isObject();\\n    function isStrictComparable(value) {\\n      return value === value && !isObject(value);\\n    }\\n    module2.exports = isStrictComparable;\\n  }\\n});\\n\\n// node_modules/lodash/_getMatchData.js\\nvar require_getMatchData = __commonJS({\\n  \\\"node_modules/lodash/_getMatchData.js\\\"(exports2, module2) {\\n    var isStrictComparable = require_isStrictComparable();\\n    var keys = require_keys();\\n    function getMatchData(object) {\\n      var result = keys(object), length = result.length;\\n      while (length--) {\\n        var key = result[length], value = object[key];\\n        result[length] = [key, value, isStrictComparable(value)];\\n      }\\n      return result;\\n    }\\n    module2.exports = getMatchData;\\n  }\\n});\\n\\n// node_modules/lodash/_matchesStrictComparable.js\\nvar require_matchesStrictComparable = __commonJS({\\n  \\\"node_modules/lodash/_matchesStrictComparable.js\\\"(exports2, module2) {\\n    function matchesStrictComparable(key, srcValue) {\\n      return function(object) {\\n        if (object == null) {\\n          return false;\\n        }\\n        return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));\\n      };\\n    }\\n    module2.exports = matchesStrictComparable;\\n  }\\n});\\n\\n// node_modules/lodash/_baseMatches.js\\nvar require_baseMatches = __commonJS({\\n  \\\"node_modules/lodash/_baseMatches.js\\\"(exports2, module2) {\\n    var baseIsMatch = require_baseIsMatch();\\n    var getMatchData = require_getMatchData();\\n    var matchesStrictComparable = require_matchesStrictComparable();\\n    function baseMatches(source) {\\n      var matchData = getMatchData(source);\\n      if (matchData.length == 1 && matchData[0][2]) {\\n        return matchesStrictComparable(matchData[0][0], matchData[0][1]);\\n      }\\n      return function(object) {\\n        return object === source || baseIsMatch(object, source, matchData);\\n      };\\n    }\\n    module2.exports = baseMatches;\\n  }\\n});\\n\\n// node_modules/lodash/isSymbol.js\\nvar require_isSymbol = __commonJS({\\n  \\\"node_modules/lodash/isSymbol.js\\\"(exports2, module2) {\\n    var baseGetTag = require_baseGetTag();\\n    var isObjectLike = require_isObjectLike();\\n    var symbolTag = \\\"[object Symbol]\\\";\\n    function isSymbol(value) {\\n      return typeof value == \\\"symbol\\\" || isObjectLike(value) && baseGetTag(value) == symbolTag;\\n    }\\n    module2.exports = isSymbol;\\n  }\\n});\\n\\n// node_modules/lodash/_isKey.js\\nvar require_isKey = __commonJS({\\n  \\\"node_modules/lodash/_isKey.js\\\"(exports2, module2) {\\n    var isArray = require_isArray();\\n    var isSymbol = require_isSymbol();\\n    var reIsDeepProp = /\\\\.|\\\\[(?:[^[\\\\]]*|([\\\"'])(?:(?!\\\\1)[^\\\\\\\\]|\\\\\\\\.)*?\\\\1)\\\\]/;\\n    var reIsPlainProp = /^\\\\w*$/;\\n    function isKey(value, object) {\\n      if (isArray(value)) {\\n        return false;\\n      }\\n      var type = typeof value;\\n      if (type == \\\"number\\\" || type == \\\"symbol\\\" || type == \\\"boolean\\\" || value == null || isSymbol(value)) {\\n        return true;\\n      }\\n      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);\\n    }\\n    module2.exports = isKey;\\n  }\\n});\\n\\n// node_modules/lodash/memoize.js\\nvar require_memoize = __commonJS({\\n  \\\"node_modules/lodash/memoize.js\\\"(exports2, module2) {\\n    var MapCache = require_MapCache();\\n    var FUNC_ERROR_TEXT = \\\"Expected a function\\\";\\n    function memoize(func, resolver) {\\n      if (typeof func != \\\"function\\\" || resolver != null && typeof resolver != \\\"function\\\") {\\n        throw new TypeError(FUNC_ERROR_TEXT);\\n      }\\n      var memoized = function() {\\n        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;\\n        if (cache.has(key)) {\\n          return cache.get(key);\\n        }\\n        var result = func.apply(this, args);\\n        memoized.cache = cache.set(key, result) || cache;\\n        return result;\\n      };\\n      memoized.cache = new (memoize.Cache || MapCache)();\\n      return memoized;\\n    }\\n    memoize.Cache = MapCache;\\n    module2.exports = memoize;\\n  }\\n});\\n\\n// node_modules/lodash/_memoizeCapped.js\\nvar require_memoizeCapped = __commonJS({\\n  \\\"node_modules/lodash/_memoizeCapped.js\\\"(exports2, module2) {\\n    var memoize = require_memoize();\\n    var MAX_MEMOIZE_SIZE = 500;\\n    function memoizeCapped(func) {\\n      var result = memoize(func, function(key) {\\n        if (cache.size === MAX_MEMOIZE_SIZE) {\\n          cache.clear();\\n        }\\n        return key;\\n      });\\n      var cache = result.cache;\\n      return result;\\n    }\\n    module2.exports = memoizeCapped;\\n  }\\n});\\n\\n// node_modules/lodash/_stringToPath.js\\nvar require_stringToPath = __commonJS({\\n  \\\"node_modules/lodash/_stringToPath.js\\\"(exports2, module2) {\\n    var memoizeCapped = require_memoizeCapped();\\n    var rePropName = /[^.[\\\\]]+|\\\\[(?:(-?\\\\d+(?:\\\\.\\\\d+)?)|([\\\"'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2)\\\\]|(?=(?:\\\\.|\\\\[\\\\])(?:\\\\.|\\\\[\\\\]|$))/g;\\n    var reEscapeChar = /\\\\\\\\(\\\\\\\\)?/g;\\n    var stringToPath = memoizeCapped(function(string) {\\n      var result = [];\\n      if (string.charCodeAt(0) === 46) {\\n        result.push(\\\"\\\");\\n      }\\n      string.replace(rePropName, function(match, number, quote, subString) {\\n        result.push(quote ? subString.replace(reEscapeChar, \\\"$1\\\") : number || match);\\n      });\\n      return result;\\n    });\\n    module2.exports = stringToPath;\\n  }\\n});\\n\\n// node_modules/lodash/_arrayMap.js\\nvar require_arrayMap = __commonJS({\\n  \\\"node_modules/lodash/_arrayMap.js\\\"(exports2, module2) {\\n    function arrayMap(array, iteratee) {\\n      var index = -1, length = array == null ? 0 : array.length, result = Array(length);\\n      while (++index < length) {\\n        result[index] = iteratee(array[index], index, array);\\n      }\\n      return result;\\n    }\\n    module2.exports = arrayMap;\\n  }\\n});\\n\\n// node_modules/lodash/_baseToString.js\\nvar require_baseToString = __commonJS({\\n  \\\"node_modules/lodash/_baseToString.js\\\"(exports2, module2) {\\n    var Symbol = require_Symbol();\\n    var arrayMap = require_arrayMap();\\n    var isArray = require_isArray();\\n    var isSymbol = require_isSymbol();\\n    var INFINITY = 1 / 0;\\n    var symbolProto = Symbol ? Symbol.prototype : void 0;\\n    var symbolToString = symbolProto ? symbolProto.toString : void 0;\\n    function baseToString(value) {\\n      if (typeof value == \\\"string\\\") {\\n        return value;\\n      }\\n      if (isArray(value)) {\\n        return arrayMap(value, baseToString) + \\\"\\\";\\n      }\\n      if (isSymbol(value)) {\\n        return symbolToString ? symbolToString.call(value) : \\\"\\\";\\n      }\\n      var result = value + \\\"\\\";\\n      return result == \\\"0\\\" && 1 / value == -INFINITY ? \\\"-0\\\" : result;\\n    }\\n    module2.exports = baseToString;\\n  }\\n});\\n\\n// node_modules/lodash/toString.js\\nvar require_toString = __commonJS({\\n  \\\"node_modules/lodash/toString.js\\\"(exports2, module2) {\\n    var baseToString = require_baseToString();\\n    function toString(value) {\\n      return value == null ? \\\"\\\" : baseToString(value);\\n    }\\n    module2.exports = toString;\\n  }\\n});\\n\\n// node_modules/lodash/_castPath.js\\nvar require_castPath = __commonJS({\\n  \\\"node_modules/lodash/_castPath.js\\\"(exports2, module2) {\\n    var isArray = require_isArray();\\n    var isKey = require_isKey();\\n    var stringToPath = require_stringToPath();\\n    var toString = require_toString();\\n    function castPath(value, object) {\\n      if (isArray(value)) {\\n        return value;\\n      }\\n      return isKey(value, object) ? [value] : stringToPath(toString(value));\\n    }\\n    module2.exports = castPath;\\n  }\\n});\\n\\n// node_modules/lodash/_toKey.js\\nvar require_toKey = __commonJS({\\n  \\\"node_modules/lodash/_toKey.js\\\"(exports2, module2) {\\n    var isSymbol = require_isSymbol();\\n    var INFINITY = 1 / 0;\\n    function toKey(value) {\\n      if (typeof value == \\\"string\\\" || isSymbol(value)) {\\n        return value;\\n      }\\n      var result = value + \\\"\\\";\\n      return result == \\\"0\\\" && 1 / value == -INFINITY ? \\\"-0\\\" : result;\\n    }\\n    module2.exports = toKey;\\n  }\\n});\\n\\n// node_modules/lodash/_baseGet.js\\nvar require_baseGet = __commonJS({\\n  \\\"node_modules/lodash/_baseGet.js\\\"(exports2, module2) {\\n    var castPath = require_castPath();\\n    var toKey = require_toKey();\\n    function baseGet(object, path) {\\n      path = castPath(path, object);\\n      var index = 0, length = path.length;\\n      while (object != null && index < length) {\\n        object = object[toKey(path[index++])];\\n      }\\n      return index && index == length ? object : void 0;\\n    }\\n    module2.exports = baseGet;\\n  }\\n});\\n\\n// node_modules/lodash/get.js\\nvar require_get = __commonJS({\\n  \\\"node_modules/lodash/get.js\\\"(exports2, module2) {\\n    var baseGet = require_baseGet();\\n    function get(object, path, defaultValue) {\\n      var result = object == null ? void 0 : baseGet(object, path);\\n      return result === void 0 ? defaultValue : result;\\n    }\\n    module2.exports = get;\\n  }\\n});\\n\\n// node_modules/lodash/_baseHasIn.js\\nvar require_baseHasIn = __commonJS({\\n  \\\"node_modules/lodash/_baseHasIn.js\\\"(exports2, module2) {\\n    function baseHasIn(object, key) {\\n      return object != null && key in Object(object);\\n    }\\n    module2.exports = baseHasIn;\\n  }\\n});\\n\\n// node_modules/lodash/_hasPath.js\\nvar require_hasPath = __commonJS({\\n  \\\"node_modules/lodash/_hasPath.js\\\"(exports2, module2) {\\n    var castPath = require_castPath();\\n    var isArguments = require_isArguments();\\n    var isArray = require_isArray();\\n    var isIndex = require_isIndex();\\n    var isLength = require_isLength();\\n    var toKey = require_toKey();\\n    function hasPath(object, path, hasFunc) {\\n      path = castPath(path, object);\\n      var index = -1, length = path.length, result = false;\\n      while (++index < length) {\\n        var key = toKey(path[index]);\\n        if (!(result = object != null && hasFunc(object, key))) {\\n          break;\\n        }\\n        object = object[key];\\n      }\\n      if (result || ++index != length) {\\n        return result;\\n      }\\n      length = object == null ? 0 : object.length;\\n      return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));\\n    }\\n    module2.exports = hasPath;\\n  }\\n});\\n\\n// node_modules/lodash/hasIn.js\\nvar require_hasIn = __commonJS({\\n  \\\"node_modules/lodash/hasIn.js\\\"(exports2, module2) {\\n    var baseHasIn = require_baseHasIn();\\n    var hasPath = require_hasPath();\\n    function hasIn(object, path) {\\n      return object != null && hasPath(object, path, baseHasIn);\\n    }\\n    module2.exports = hasIn;\\n  }\\n});\\n\\n// node_modules/lodash/_baseMatchesProperty.js\\nvar require_baseMatchesProperty = __commonJS({\\n  \\\"node_modules/lodash/_baseMatchesProperty.js\\\"(exports2, module2) {\\n    var baseIsEqual = require_baseIsEqual();\\n    var get = require_get();\\n    var hasIn = require_hasIn();\\n    var isKey = require_isKey();\\n    var isStrictComparable = require_isStrictComparable();\\n    var matchesStrictComparable = require_matchesStrictComparable();\\n    var toKey = require_toKey();\\n    var COMPARE_PARTIAL_FLAG = 1;\\n    var COMPARE_UNORDERED_FLAG = 2;\\n    function baseMatchesProperty(path, srcValue) {\\n      if (isKey(path) && isStrictComparable(srcValue)) {\\n        return matchesStrictComparable(toKey(path), srcValue);\\n      }\\n      return function(object) {\\n        var objValue = get(object, path);\\n        return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\\n      };\\n    }\\n    module2.exports = baseMatchesProperty;\\n  }\\n});\\n\\n// node_modules/lodash/identity.js\\nvar require_identity = __commonJS({\\n  \\\"node_modules/lodash/identity.js\\\"(exports2, module2) {\\n    function identity(value) {\\n      return value;\\n    }\\n    module2.exports = identity;\\n  }\\n});\\n\\n// node_modules/lodash/_baseProperty.js\\nvar require_baseProperty = __commonJS({\\n  \\\"node_modules/lodash/_baseProperty.js\\\"(exports2, module2) {\\n    function baseProperty(key) {\\n      return function(object) {\\n        return object == null ? void 0 : object[key];\\n      };\\n    }\\n    module2.exports = baseProperty;\\n  }\\n});\\n\\n// node_modules/lodash/_basePropertyDeep.js\\nvar require_basePropertyDeep = __commonJS({\\n  \\\"node_modules/lodash/_basePropertyDeep.js\\\"(exports2, module2) {\\n    var baseGet = require_baseGet();\\n    function basePropertyDeep(path) {\\n      return function(object) {\\n        return baseGet(object, path);\\n      };\\n    }\\n    module2.exports = basePropertyDeep;\\n  }\\n});\\n\\n// node_modules/lodash/property.js\\nvar require_property = __commonJS({\\n  \\\"node_modules/lodash/property.js\\\"(exports2, module2) {\\n    var baseProperty = require_baseProperty();\\n    var basePropertyDeep = require_basePropertyDeep();\\n    var isKey = require_isKey();\\n    var toKey = require_toKey();\\n    function property(path) {\\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\\n    }\\n    module2.exports = property;\\n  }\\n});\\n\\n// node_modules/lodash/_baseIteratee.js\\nvar require_baseIteratee = __commonJS({\\n  \\\"node_modules/lodash/_baseIteratee.js\\\"(exports2, module2) {\\n    var baseMatches = require_baseMatches();\\n    var baseMatchesProperty = require_baseMatchesProperty();\\n    var identity = require_identity();\\n    var isArray = require_isArray();\\n    var property = require_property();\\n    function baseIteratee(value) {\\n      if (typeof value == \\\"function\\\") {\\n        return value;\\n      }\\n      if (value == null) {\\n        return identity;\\n      }\\n      if (typeof value == \\\"object\\\") {\\n        return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);\\n      }\\n      return property(value);\\n    }\\n    module2.exports = baseIteratee;\\n  }\\n});\\n\\n// node_modules/lodash/mapValues.js\\nvar require_mapValues = __commonJS({\\n  \\\"node_modules/lodash/mapValues.js\\\"(exports2, module2) {\\n    var baseAssignValue = require_baseAssignValue();\\n    var baseForOwn = require_baseForOwn();\\n    var baseIteratee = require_baseIteratee();\\n    function mapValues2(object, iteratee) {\\n      var result = {};\\n      iteratee = baseIteratee(iteratee, 3);\\n      baseForOwn(object, function(value, key, object2) {\\n        baseAssignValue(result, key, iteratee(value, key, object2));\\n      });\\n      return result;\\n    }\\n    module2.exports = mapValues2;\\n  }\\n});\\n\\n// node_modules/lodash/_arrayEach.js\\nvar require_arrayEach = __commonJS({\\n  \\\"node_modules/lodash/_arrayEach.js\\\"(exports2, module2) {\\n    function arrayEach(array, iteratee) {\\n      var index = -1, length = array == null ? 0 : array.length;\\n      while (++index < length) {\\n        if (iteratee(array[index], index, array) === false) {\\n          break;\\n        }\\n      }\\n      return array;\\n    }\\n    module2.exports = arrayEach;\\n  }\\n});\\n\\n// node_modules/lodash/_assignValue.js\\nvar require_assignValue = __commonJS({\\n  \\\"node_modules/lodash/_assignValue.js\\\"(exports2, module2) {\\n    var baseAssignValue = require_baseAssignValue();\\n    var eq = require_eq();\\n    var objectProto = Object.prototype;\\n    var hasOwnProperty = objectProto.hasOwnProperty;\\n    function assignValue(object, key, value) {\\n      var objValue = object[key];\\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {\\n        baseAssignValue(object, key, value);\\n      }\\n    }\\n    module2.exports = assignValue;\\n  }\\n});\\n\\n// node_modules/lodash/_copyObject.js\\nvar require_copyObject = __commonJS({\\n  \\\"node_modules/lodash/_copyObject.js\\\"(exports2, module2) {\\n    var assignValue = require_assignValue();\\n    var baseAssignValue = require_baseAssignValue();\\n    function copyObject(source, props, object, customizer) {\\n      var isNew = !object;\\n      object || (object = {});\\n      var index = -1, length = props.length;\\n      while (++index < length) {\\n        var key = props[index];\\n        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;\\n        if (newValue === void 0) {\\n          newValue = source[key];\\n        }\\n        if (isNew) {\\n          baseAssignValue(object, key, newValue);\\n        } else {\\n          assignValue(object, key, newValue);\\n        }\\n      }\\n      return object;\\n    }\\n    module2.exports = copyObject;\\n  }\\n});\\n\\n// node_modules/lodash/_baseAssign.js\\nvar require_baseAssign = __commonJS({\\n  \\\"node_modules/lodash/_baseAssign.js\\\"(exports2, module2) {\\n    var copyObject = require_copyObject();\\n    var keys = require_keys();\\n    function baseAssign(object, source) {\\n      return object && copyObject(source, keys(source), object);\\n    }\\n    module2.exports = baseAssign;\\n  }\\n});\\n\\n// node_modules/lodash/_nativeKeysIn.js\\nvar require_nativeKeysIn = __commonJS({\\n  \\\"node_modules/lodash/_nativeKeysIn.js\\\"(exports2, module2) {\\n    function nativeKeysIn(object) {\\n      var result = [];\\n      if (object != null) {\\n        for (var key in Object(object)) {\\n          result.push(key);\\n        }\\n      }\\n      return result;\\n    }\\n    module2.exports = nativeKeysIn;\\n  }\\n});\\n\\n// node_modules/lodash/_baseKeysIn.js\\nvar require_baseKeysIn = __commonJS({\\n  \\\"node_modules/lodash/_baseKeysIn.js\\\"(exports2, module2) {\\n    var isObject = require_isObject();\\n    var isPrototype = require_isPrototype();\\n    var nativeKeysIn = require_nativeKeysIn();\\n    var objectProto = Object.prototype;\\n    var hasOwnProperty = objectProto.hasOwnProperty;\\n    function baseKeysIn(object) {\\n      if (!isObject(object)) {\\n        return nativeKeysIn(object);\\n      }\\n      var isProto = isPrototype(object), result = [];\\n      for (var key in object) {\\n        if (!(key == \\\"constructor\\\" && (isProto || !hasOwnProperty.call(object, key)))) {\\n          result.push(key);\\n        }\\n      }\\n      return result;\\n    }\\n    module2.exports = baseKeysIn;\\n  }\\n});\\n\\n// node_modules/lodash/keysIn.js\\nvar require_keysIn = __commonJS({\\n  \\\"node_modules/lodash/keysIn.js\\\"(exports2, module2) {\\n    var arrayLikeKeys = require_arrayLikeKeys();\\n    var baseKeysIn = require_baseKeysIn();\\n    var isArrayLike = require_isArrayLike();\\n    function keysIn(object) {\\n      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\\n    }\\n    module2.exports = keysIn;\\n  }\\n});\\n\\n// node_modules/lodash/_baseAssignIn.js\\nvar require_baseAssignIn = __commonJS({\\n  \\\"node_modules/lodash/_baseAssignIn.js\\\"(exports2, module2) {\\n    var copyObject = require_copyObject();\\n    var keysIn = require_keysIn();\\n    function baseAssignIn(object, source) {\\n      return object && copyObject(source, keysIn(source), object);\\n    }\\n    module2.exports = baseAssignIn;\\n  }\\n});\\n\\n// node_modules/lodash/_cloneBuffer.js\\nvar require_cloneBuffer = __commonJS({\\n  \\\"node_modules/lodash/_cloneBuffer.js\\\"(exports2, module2) {\\n    var root = require_root();\\n    var freeExports = typeof exports2 == \\\"object\\\" && exports2 && !exports2.nodeType && exports2;\\n    var freeModule = freeExports && typeof module2 == \\\"object\\\" && module2 && !module2.nodeType && module2;\\n    var moduleExports = freeModule && freeModule.exports === freeExports;\\n    var Buffer2 = moduleExports ? root.Buffer : void 0;\\n    var allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;\\n    function cloneBuffer(buffer, isDeep) {\\n      if (isDeep) {\\n        return buffer.slice();\\n      }\\n      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\\n      buffer.copy(result);\\n      return result;\\n    }\\n    module2.exports = cloneBuffer;\\n  }\\n});\\n\\n// node_modules/lodash/_copyArray.js\\nvar require_copyArray = __commonJS({\\n  \\\"node_modules/lodash/_copyArray.js\\\"(exports2, module2) {\\n    function copyArray(source, array) {\\n      var index = -1, length = source.length;\\n      array || (array = Array(length));\\n      while (++index < length) {\\n        array[index] = source[index];\\n      }\\n      return array;\\n    }\\n    module2.exports = copyArray;\\n  }\\n});\\n\\n// node_modules/lodash/_copySymbols.js\\nvar require_copySymbols = __commonJS({\\n  \\\"node_modules/lodash/_copySymbols.js\\\"(exports2, module2) {\\n    var copyObject = require_copyObject();\\n    var getSymbols = require_getSymbols();\\n    function copySymbols(source, object) {\\n      return copyObject(source, getSymbols(source), object);\\n    }\\n    module2.exports = copySymbols;\\n  }\\n});\\n\\n// node_modules/lodash/_getPrototype.js\\nvar require_getPrototype = __commonJS({\\n  \\\"node_modules/lodash/_getPrototype.js\\\"(exports2, module2) {\\n    var overArg = require_overArg();\\n    var getPrototype = overArg(Object.getPrototypeOf, Object);\\n    module2.exports = getPrototype;\\n  }\\n});\\n\\n// node_modules/lodash/_getSymbolsIn.js\\nvar require_getSymbolsIn = __commonJS({\\n  \\\"node_modules/lodash/_getSymbolsIn.js\\\"(exports2, module2) {\\n    var arrayPush = require_arrayPush();\\n    var getPrototype = require_getPrototype();\\n    var getSymbols = require_getSymbols();\\n    var stubArray = require_stubArray();\\n    var nativeGetSymbols = Object.getOwnPropertySymbols;\\n    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\\n      var result = [];\\n      while (object) {\\n        arrayPush(result, getSymbols(object));\\n        object = getPrototype(object);\\n      }\\n      return result;\\n    };\\n    module2.exports = getSymbolsIn;\\n  }\\n});\\n\\n// node_modules/lodash/_copySymbolsIn.js\\nvar require_copySymbolsIn = __commonJS({\\n  \\\"node_modules/lodash/_copySymbolsIn.js\\\"(exports2, module2) {\\n    var copyObject = require_copyObject();\\n    var getSymbolsIn = require_getSymbolsIn();\\n    function copySymbolsIn(source, object) {\\n      return copyObject(source, getSymbolsIn(source), object);\\n    }\\n    module2.exports = copySymbolsIn;\\n  }\\n});\\n\\n// node_modules/lodash/_getAllKeysIn.js\\nvar require_getAllKeysIn = __commonJS({\\n  \\\"node_modules/lodash/_getAllKeysIn.js\\\"(exports2, module2) {\\n    var baseGetAllKeys = require_baseGetAllKeys();\\n    var getSymbolsIn = require_getSymbolsIn();\\n    var keysIn = require_keysIn();\\n    function getAllKeysIn(object) {\\n      return baseGetAllKeys(object, keysIn, getSymbolsIn);\\n    }\\n    module2.exports = getAllKeysIn;\\n  }\\n});\\n\\n// node_modules/lodash/_initCloneArray.js\\nvar require_initCloneArray = __commonJS({\\n  \\\"node_modules/lodash/_initCloneArray.js\\\"(exports2, module2) {\\n    var objectProto = Object.prototype;\\n    var hasOwnProperty = objectProto.hasOwnProperty;\\n    function initCloneArray(array) {\\n      var length = array.length, result = new array.constructor(length);\\n      if (length && typeof array[0] == \\\"string\\\" && hasOwnProperty.call(array, \\\"index\\\")) {\\n        result.index = array.index;\\n        result.input = array.input;\\n      }\\n      return result;\\n    }\\n    module2.exports = initCloneArray;\\n  }\\n});\\n\\n// node_modules/lodash/_cloneArrayBuffer.js\\nvar require_cloneArrayBuffer = __commonJS({\\n  \\\"node_modules/lodash/_cloneArrayBuffer.js\\\"(exports2, module2) {\\n    var Uint8Array2 = require_Uint8Array();\\n    function cloneArrayBuffer(arrayBuffer) {\\n      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\\n      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));\\n      return result;\\n    }\\n    module2.exports = cloneArrayBuffer;\\n  }\\n});\\n\\n// node_modules/lodash/_cloneDataView.js\\nvar require_cloneDataView = __commonJS({\\n  \\\"node_modules/lodash/_cloneDataView.js\\\"(exports2, module2) {\\n    var cloneArrayBuffer = require_cloneArrayBuffer();\\n    function cloneDataView(dataView, isDeep) {\\n      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\\n      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\\n    }\\n    module2.exports = cloneDataView;\\n  }\\n});\\n\\n// node_modules/lodash/_cloneRegExp.js\\nvar require_cloneRegExp = __commonJS({\\n  \\\"node_modules/lodash/_cloneRegExp.js\\\"(exports2, module2) {\\n    var reFlags = /\\\\w*$/;\\n    function cloneRegExp(regexp) {\\n      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\\n      result.lastIndex = regexp.lastIndex;\\n      return result;\\n    }\\n    module2.exports = cloneRegExp;\\n  }\\n});\\n\\n// node_modules/lodash/_cloneSymbol.js\\nvar require_cloneSymbol = __commonJS({\\n  \\\"node_modules/lodash/_cloneSymbol.js\\\"(exports2, module2) {\\n    var Symbol = require_Symbol();\\n    var symbolProto = Symbol ? Symbol.prototype : void 0;\\n    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;\\n    function cloneSymbol(symbol) {\\n      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\\n    }\\n    module2.exports = cloneSymbol;\\n  }\\n});\\n\\n// node_modules/lodash/_cloneTypedArray.js\\nvar require_cloneTypedArray = __commonJS({\\n  \\\"node_modules/lodash/_cloneTypedArray.js\\\"(exports2, module2) {\\n    var cloneArrayBuffer = require_cloneArrayBuffer();\\n    function cloneTypedArray(typedArray, isDeep) {\\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\\n    }\\n    module2.exports = cloneTypedArray;\\n  }\\n});\\n\\n// node_modules/lodash/_initCloneByTag.js\\nvar require_initCloneByTag = __commonJS({\\n  \\\"node_modules/lodash/_initCloneByTag.js\\\"(exports2, module2) {\\n    var cloneArrayBuffer = require_cloneArrayBuffer();\\n    var cloneDataView = require_cloneDataView();\\n    var cloneRegExp = require_cloneRegExp();\\n    var cloneSymbol = require_cloneSymbol();\\n    var cloneTypedArray = require_cloneTypedArray();\\n    var boolTag = \\\"[object Boolean]\\\";\\n    var dateTag = \\\"[object Date]\\\";\\n    var mapTag = \\\"[object Map]\\\";\\n    var numberTag = \\\"[object Number]\\\";\\n    var regexpTag = \\\"[object RegExp]\\\";\\n    var setTag = \\\"[object Set]\\\";\\n    var stringTag = \\\"[object String]\\\";\\n    var symbolTag = \\\"[object Symbol]\\\";\\n    var arrayBufferTag = \\\"[object ArrayBuffer]\\\";\\n    var dataViewTag = \\\"[object DataView]\\\";\\n    var float32Tag = \\\"[object Float32Array]\\\";\\n    var float64Tag = \\\"[object Float64Array]\\\";\\n    var int8Tag = \\\"[object Int8Array]\\\";\\n    var int16Tag = \\\"[object Int16Array]\\\";\\n    var int32Tag = \\\"[object Int32Array]\\\";\\n    var uint8Tag = \\\"[object Uint8Array]\\\";\\n    var uint8ClampedTag = \\\"[object Uint8ClampedArray]\\\";\\n    var uint16Tag = \\\"[object Uint16Array]\\\";\\n    var uint32Tag = \\\"[object Uint32Array]\\\";\\n    function initCloneByTag(object, tag, isDeep) {\\n      var Ctor = object.constructor;\\n      switch (tag) {\\n        case arrayBufferTag:\\n          return cloneArrayBuffer(object);\\n        case boolTag:\\n        case dateTag:\\n          return new Ctor(+object);\\n        case dataViewTag:\\n          return cloneDataView(object, isDeep);\\n        case float32Tag:\\n        case float64Tag:\\n        case int8Tag:\\n        case int16Tag:\\n        case int32Tag:\\n        case uint8Tag:\\n        case uint8ClampedTag:\\n        case uint16Tag:\\n        case uint32Tag:\\n          return cloneTypedArray(object, isDeep);\\n        case mapTag:\\n          return new Ctor();\\n        case numberTag:\\n        case stringTag:\\n          return new Ctor(object);\\n        case regexpTag:\\n          return cloneRegExp(object);\\n        case setTag:\\n          return new Ctor();\\n        case symbolTag:\\n          return cloneSymbol(object);\\n      }\\n    }\\n    module2.exports = initCloneByTag;\\n  }\\n});\\n\\n// node_modules/lodash/_baseCreate.js\\nvar require_baseCreate = __commonJS({\\n  \\\"node_modules/lodash/_baseCreate.js\\\"(exports2, module2) {\\n    var isObject = require_isObject();\\n    var objectCreate = Object.create;\\n    var baseCreate = function() {\\n      function object() {\\n      }\\n      return function(proto) {\\n        if (!isObject(proto)) {\\n          return {};\\n        }\\n        if (objectCreate) {\\n          return objectCreate(proto);\\n        }\\n        object.prototype = proto;\\n        var result = new object();\\n        object.prototype = void 0;\\n        return result;\\n      };\\n    }();\\n    module2.exports = baseCreate;\\n  }\\n});\\n\\n// node_modules/lodash/_initCloneObject.js\\nvar require_initCloneObject = __commonJS({\\n  \\\"node_modules/lodash/_initCloneObject.js\\\"(exports2, module2) {\\n    var baseCreate = require_baseCreate();\\n    var getPrototype = require_getPrototype();\\n    var isPrototype = require_isPrototype();\\n    function initCloneObject(object) {\\n      return typeof object.constructor == \\\"function\\\" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};\\n    }\\n    module2.exports = initCloneObject;\\n  }\\n});\\n\\n// node_modules/lodash/_baseIsMap.js\\nvar require_baseIsMap = __commonJS({\\n  \\\"node_modules/lodash/_baseIsMap.js\\\"(exports2, module2) {\\n    var getTag = require_getTag();\\n    var isObjectLike = require_isObjectLike();\\n    var mapTag = \\\"[object Map]\\\";\\n    function baseIsMap(value) {\\n      return isObjectLike(value) && getTag(value) == mapTag;\\n    }\\n    module2.exports = baseIsMap;\\n  }\\n});\\n\\n// node_modules/lodash/isMap.js\\nvar require_isMap = __commonJS({\\n  \\\"node_modules/lodash/isMap.js\\\"(exports2, module2) {\\n    var baseIsMap = require_baseIsMap();\\n    var baseUnary = require_baseUnary();\\n    var nodeUtil = require_nodeUtil();\\n    var nodeIsMap = nodeUtil && nodeUtil.isMap;\\n    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\\n    module2.exports = isMap;\\n  }\\n});\\n\\n// node_modules/lodash/_baseIsSet.js\\nvar require_baseIsSet = __commonJS({\\n  \\\"node_modules/lodash/_baseIsSet.js\\\"(exports2, module2) {\\n    var getTag = require_getTag();\\n    var isObjectLike = require_isObjectLike();\\n    var setTag = \\\"[object Set]\\\";\\n    function baseIsSet(value) {\\n      return isObjectLike(value) && getTag(value) == setTag;\\n    }\\n    module2.exports = baseIsSet;\\n  }\\n});\\n\\n// node_modules/lodash/isSet.js\\nvar require_isSet = __commonJS({\\n  \\\"node_modules/lodash/isSet.js\\\"(exports2, module2) {\\n    var baseIsSet = require_baseIsSet();\\n    var baseUnary = require_baseUnary();\\n    var nodeUtil = require_nodeUtil();\\n    var nodeIsSet = nodeUtil && nodeUtil.isSet;\\n    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\\n    module2.exports = isSet;\\n  }\\n});\\n\\n// node_modules/lodash/_baseClone.js\\nvar require_baseClone = __commonJS({\\n  \\\"node_modules/lodash/_baseClone.js\\\"(exports2, module2) {\\n    var Stack = require_Stack();\\n    var arrayEach = require_arrayEach();\\n    var assignValue = require_assignValue();\\n    var baseAssign = require_baseAssign();\\n    var baseAssignIn = require_baseAssignIn();\\n    var cloneBuffer = require_cloneBuffer();\\n    var copyArray = require_copyArray();\\n    var copySymbols = require_copySymbols();\\n    var copySymbolsIn = require_copySymbolsIn();\\n    var getAllKeys = require_getAllKeys();\\n    var getAllKeysIn = require_getAllKeysIn();\\n    var getTag = require_getTag();\\n    var initCloneArray = require_initCloneArray();\\n    var initCloneByTag = require_initCloneByTag();\\n    var initCloneObject = require_initCloneObject();\\n    var isArray = require_isArray();\\n    var isBuffer = require_isBuffer();\\n    var isMap = require_isMap();\\n    var isObject = require_isObject();\\n    var isSet = require_isSet();\\n    var keys = require_keys();\\n    var keysIn = require_keysIn();\\n    var CLONE_DEEP_FLAG = 1;\\n    var CLONE_FLAT_FLAG = 2;\\n    var CLONE_SYMBOLS_FLAG = 4;\\n    var argsTag = \\\"[object Arguments]\\\";\\n    var arrayTag = \\\"[object Array]\\\";\\n    var boolTag = \\\"[object Boolean]\\\";\\n    var dateTag = \\\"[object Date]\\\";\\n    var errorTag = \\\"[object Error]\\\";\\n    var funcTag = \\\"[object Function]\\\";\\n    var genTag = \\\"[object GeneratorFunction]\\\";\\n    var mapTag = \\\"[object Map]\\\";\\n    var numberTag = \\\"[object Number]\\\";\\n    var objectTag = \\\"[object Object]\\\";\\n    var regexpTag = \\\"[object RegExp]\\\";\\n    var setTag = \\\"[object Set]\\\";\\n    var stringTag = \\\"[object String]\\\";\\n    var symbolTag = \\\"[object Symbol]\\\";\\n    var weakMapTag = \\\"[object WeakMap]\\\";\\n    var arrayBufferTag = \\\"[object ArrayBuffer]\\\";\\n    var dataViewTag = \\\"[object DataView]\\\";\\n    var float32Tag = \\\"[object Float32Array]\\\";\\n    var float64Tag = \\\"[object Float64Array]\\\";\\n    var int8Tag = \\\"[object Int8Array]\\\";\\n    var int16Tag = \\\"[object Int16Array]\\\";\\n    var int32Tag = \\\"[object Int32Array]\\\";\\n    var uint8Tag = \\\"[object Uint8Array]\\\";\\n    var uint8ClampedTag = \\\"[object Uint8ClampedArray]\\\";\\n    var uint16Tag = \\\"[object Uint16Array]\\\";\\n    var uint32Tag = \\\"[object Uint32Array]\\\";\\n    var cloneableTags = {};\\n    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\\n    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;\\n    function baseClone(value, bitmask, customizer, key, object, stack) {\\n      var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;\\n      if (customizer) {\\n        result = object ? customizer(value, key, object, stack) : customizer(value);\\n      }\\n      if (result !== void 0) {\\n        return result;\\n      }\\n      if (!isObject(value)) {\\n        return value;\\n      }\\n      var isArr = isArray(value);\\n      if (isArr) {\\n        result = initCloneArray(value);\\n        if (!isDeep) {\\n          return copyArray(value, result);\\n        }\\n      } else {\\n        var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;\\n        if (isBuffer(value)) {\\n          return cloneBuffer(value, isDeep);\\n        }\\n        if (tag == objectTag || tag == argsTag || isFunc && !object) {\\n          result = isFlat || isFunc ? {} : initCloneObject(value);\\n          if (!isDeep) {\\n            return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));\\n          }\\n        } else {\\n          if (!cloneableTags[tag]) {\\n            return object ? value : {};\\n          }\\n          result = initCloneByTag(value, tag, isDeep);\\n        }\\n      }\\n      stack || (stack = new Stack());\\n      var stacked = stack.get(value);\\n      if (stacked) {\\n        return stacked;\\n      }\\n      stack.set(value, result);\\n      if (isSet(value)) {\\n        value.forEach(function(subValue) {\\n          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\\n        });\\n      } else if (isMap(value)) {\\n        value.forEach(function(subValue, key2) {\\n          result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));\\n        });\\n      }\\n      var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;\\n      var props = isArr ? void 0 : keysFunc(value);\\n      arrayEach(props || value, function(subValue, key2) {\\n        if (props) {\\n          key2 = subValue;\\n          subValue = value[key2];\\n        }\\n        assignValue(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));\\n      });\\n      return result;\\n    }\\n    module2.exports = baseClone;\\n  }\\n});\\n\\n// node_modules/lodash/cloneDeep.js\\nvar require_cloneDeep = __commonJS({\\n  \\\"node_modules/lodash/cloneDeep.js\\\"(exports2, module2) {\\n    var baseClone = require_baseClone();\\n    var CLONE_DEEP_FLAG = 1;\\n    var CLONE_SYMBOLS_FLAG = 4;\\n    function cloneDeep2(value) {\\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\\n    }\\n    module2.exports = cloneDeep2;\\n  }\\n});\\n\\n// src/browser-background-sync.ts\\nvar import_mapValues = __toESM(require_mapValues());\\n\\n// src/constants.ts\\nvar activeServerStateTiddlerTitle = `$:/state/tw-mobile-sync/activeServer`;\\n\\n// src/filters.ts\\nfunction getDiffFilter(lastSync) {\\n  return `[all[]] :filter[get[modified]compare:date:gt[${lastSync ?? \\\"\\\"}]]`;\\n}\\nvar serverListFilter = `[prefix[$:/state/tw-mobile-sync/server/]] -[[$:/state/tw-mobile-sync/server/new]] -[[$:/state/tw-mobile-sync/server/new/scan-qr-widget-open]]`;\\n\\n// src/sync/getEndPoint.ts\\nvar syncRoute = \\\"/tw-mobile-sync/html-node-sync\\\";\\nvar statusRoute = \\\"/tw-mobile-sync/status\\\";\\nvar fullHtmlRoute = \\\"/tw-mobile-sync/get-full-html\\\";\\nfunction getSyncEndPoint(ipAddress, port) {\\n  return `http://${ipAddress}:${port}${syncRoute}`;\\n}\\nfunction getStatusEndPoint(ipAddress, port) {\\n  return `http://${ipAddress}:${port}${statusRoute}`;\\n}\\nfunction getFullHtmlEndPoint(ipAddress, port) {\\n  return `http://${ipAddress}:${port}${fullHtmlRoute}`;\\n}\\n\\n// src/browser-background-sync.ts\\nvar import_cloneDeep = __toESM(require_cloneDeep());\\nexports.name = \\\"browser-background-sync\\\";\\nexports.platforms = [\\\"browser\\\"];\\nexports.after = [\\\"render\\\"];\\nexports.synchronous = true;\\nvar BackgroundSyncManager = class {\\n  loop;\\n  loopInterval = 1e3 * 60 * 5;\\n  lock = false;\\n  constructor() {\\n    this.loopInterval = 1e3 * 60 * 5;\\n    this.setupListener();\\n  }\\n  setupListener() {\\n    $tw.rootWidget.addEventListener(\\\"tw-mobile-sync-get-server-status\\\", (event) => this.getServerStatus());\\n    $tw.rootWidget.addEventListener(\\\"tw-mobile-sync-set-active-server-and-sync\\\", async (event) => {\\n      const titleToActive = event.paramObject?.title;\\n      await this.setActiveServerAndSync(titleToActive);\\n    });\\n    $tw.rootWidget.addEventListener(\\\"tw-mobile-sync-sync-start\\\", (event) => this.start());\\n    $tw.rootWidget.addEventListener(\\\"tw-mobile-sync-download-full-html\\\", (event) => this.downloadFullHtmlAndApplyToWiki());\\n  }\\n  async start(skipStatusCheck) {\\n    if (this.loop) {\\n      clearInterval(this.loop);\\n      this.lock = false;\\n    }\\n    const loopHandler = async () => {\\n      if (this.lock) {\\n        return;\\n      }\\n      this.lock = true;\\n      try {\\n        if (skipStatusCheck !== true) {\\n          await this.getServerStatus();\\n        }\\n        await this.syncWithServer();\\n      } finally {\\n        this.lock = false;\\n      }\\n    };\\n    await loopHandler();\\n    this.loop = setInterval(loopHandler, this.loopInterval);\\n  }\\n  async setActiveServerAndSync(titleToActive) {\\n    try {\\n      if (typeof titleToActive === \\\"string\\\") {\\n        if ($tw.wiki.getTiddler(titleToActive) !== void 0) {\\n          await this.getServerStatus();\\n          const serverToActive = $tw.wiki.getTiddler(titleToActive);\\n          if (serverToActive !== void 0) {\\n            const newStatus = [\\\"onlineActive\\\" /* onlineActive */, \\\"online\\\" /* online */].includes(serverToActive.fields.text) ? \\\"onlineActive\\\" /* onlineActive */ : \\\"offlineActive\\\" /* offlineActive */;\\n            $tw.wiki.addTiddler(__spreadProps(__spreadValues({}, serverToActive.fields), { text: newStatus }));\\n            this.setActiveServerTiddlerTitle(titleToActive, serverToActive.fields.lastSync);\\n            await this.start(true);\\n          }\\n        }\\n      }\\n    } catch (error) {\\n      console.error(error);\\n    }\\n  }\\n  getActiveServerTiddlerTitle() {\\n    return $tw.wiki.getTiddlerText(activeServerStateTiddlerTitle);\\n  }\\n  setActiveServerTiddlerTitle(title, lastSync) {\\n    $tw.wiki.addTiddler({ title: activeServerStateTiddlerTitle, text: title, lastSync });\\n    const serverToActive = $tw.wiki.getTiddler(title);\\n    if (serverToActive !== void 0) {\\n      $tw.wiki.addTiddler(__spreadProps(__spreadValues({}, serverToActive.fields), { lastSync }));\\n    }\\n  }\\n  async getServerStatus() {\\n    const timeout = 1e3;\\n    const activeTiddlerTitle = this.getActiveServerTiddlerTitle();\\n    const serverListWithUpdatedStatus = await Promise.all(this.serverList.map(async (serverInfoTiddler) => {\\n      const active = serverInfoTiddler.fields.title === activeTiddlerTitle;\\n      try {\\n        const controller = new AbortController();\\n        const id = setTimeout(() => controller.abort(), timeout);\\n        const response = await fetch(getStatusEndPoint(serverInfoTiddler.fields.ipAddress, serverInfoTiddler.fields.port), {\\n          signal: controller.signal\\n        }).then((response2) => response2.json());\\n        clearTimeout(id);\\n        if (typeof response.tiddlywiki_version === \\\"string\\\") {\\n          return __spreadProps(__spreadValues({}, serverInfoTiddler), {\\n            fields: __spreadProps(__spreadValues({}, serverInfoTiddler.fields), {\\n              text: active ? \\\"onlineActive\\\" /* onlineActive */ : \\\"online\\\" /* online */\\n            })\\n          });\\n        }\\n      } catch (error) {\\n        console.error(`${error.message} ${serverInfoTiddler.fields.name}`);\\n      }\\n      return __spreadProps(__spreadValues({}, serverInfoTiddler), {\\n        fields: __spreadProps(__spreadValues({}, serverInfoTiddler.fields), {\\n          text: active ? \\\"offlineActive\\\" /* offlineActive */ : \\\"offline\\\" /* offline */\\n        })\\n      });\\n    }));\\n    serverListWithUpdatedStatus.forEach((tiddler) => {\\n      $tw.wiki.addTiddler(tiddler.fields);\\n    });\\n  }\\n  async syncWithServer() {\\n    const onlineActiveServer = this.onlineActiveServer;\\n    if (onlineActiveServer !== void 0) {\\n      try {\\n        const changedTiddlersFromClient = this.currentModifiedTiddlers;\\n        const changedTiddlersFromServer = await fetch(getSyncEndPoint(onlineActiveServer.fields.ipAddress, onlineActiveServer.fields.port), {\\n          method: \\\"POST\\\",\\n          mode: \\\"cors\\\",\\n          body: JSON.stringify({ tiddlers: changedTiddlersFromClient, lastSync: onlineActiveServer.fields.lastSync }),\\n          headers: {\\n            \\\"X-Requested-With\\\": \\\"TiddlyWiki\\\",\\n            \\\"Content-Type\\\": \\\"application/json\\\"\\n          }\\n        }).then((response) => response.json());\\n        changedTiddlersFromServer.forEach((tiddler) => {\\n          $tw.wiki.addTiddler(tiddler);\\n        });\\n        this.setActiveServerTiddlerTitle(onlineActiveServer.fields.title, this.getLastSyncString());\\n      } catch (error) {\\n        console.error(error);\\n      }\\n    }\\n  }\\n  async downloadFullHtmlAndApplyToWiki() {\\n    const onlineActiveServer = this.onlineActiveServer;\\n    if (onlineActiveServer !== void 0) {\\n      try {\\n        const fullHtml = await fetch(getFullHtmlEndPoint(onlineActiveServer.fields.ipAddress, onlineActiveServer.fields.port), {\\n          mode: \\\"cors\\\",\\n          headers: {\\n            \\\"X-Requested-With\\\": \\\"TiddlyWiki\\\",\\n            \\\"Content-Type\\\": \\\"application/json\\\"\\n          }\\n        }).then((response) => response.text());\\n        this.setActiveServerTiddlerTitle(onlineActiveServer.fields.title, this.getLastSyncString());\\n        const serverList = (0, import_cloneDeep.default)(this.serverList);\\n        document.write(fullHtml);\\n        document.close();\\n        $tw.wiki.addTiddlers(serverList.map((tiddler) => tiddler.fields));\\n      } catch (error) {\\n        console.error(error);\\n      }\\n    }\\n  }\\n  get onlineActiveServer() {\\n    return this.serverList.find((serverInfoTiddler) => {\\n      return serverInfoTiddler?.fields?.text === \\\"onlineActive\\\" /* onlineActive */;\\n    });\\n  }\\n  getLastSyncString() {\\n    return $tw.utils.stringifyDate(new Date());\\n  }\\n  get currentModifiedTiddlers() {\\n    const onlineActiveServer = this.onlineActiveServer;\\n    if (onlineActiveServer === void 0) {\\n      return [];\\n    }\\n    const lastSync = onlineActiveServer.fields.lastSync;\\n    const diffTiddlersFilter = getDiffFilter(lastSync);\\n    const diffTiddlers = $tw.wiki.compileFilter(diffTiddlersFilter)() ?? [];\\n    return diffTiddlers.map((title) => {\\n      return $tw.wiki.getTiddler(title);\\n    }).filter((tiddler) => tiddler !== void 0).map((tiddler) => (0, import_mapValues.default)(tiddler.fields, (value) => {\\n      if (value instanceof Date) {\\n        return $tw.utils.stringifyDate(value);\\n      }\\n      return value;\\n    }));\\n  }\\n  get serverList() {\\n    const serverList = $tw.wiki.compileFilter(serverListFilter)() ?? [];\\n    return serverList.map((serverInfoTiddlerTitle) => {\\n      return $tw.wiki.getTiddler(serverInfoTiddlerTitle);\\n    });\\n  }\\n};\\nexports.startup = () => {\\n  const syncManager = new BackgroundSyncManager();\\n  syncManager.start();\\n};\\n//# sourceMappingURL=data:application/json;base64,\\n\",\"creator\":\"LinOnetwo\",\"type\":\"application/javascript\",\"module-type\":\"startup\"},\"$:/plugins/linonetwo/tw-mobile-sync/develop\":{\"title\":\"$:/plugins/linonetwo/tw-mobile-sync/develop\",\"creator\":\"LinOnetwo\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Use [[SIOC|https://github.com/taurenshaman/semantic-web/blob/cee9e421eed3f31a602f82375fb92fb109d638b7/data/sioc.rdf]] Ontology for server tiddler.\\n\"},\"$:/plugins/linonetwo/tw-mobile-sync/readme\":{\"title\":\"$:/plugins/linonetwo/tw-mobile-sync/readme\",\"creator\":\"LinOnetwo\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"! Sync Between NodeJS and Mobile HTML 在桌面端（NodeJS）和移动端（HTML文件）之间同步\\n\\n本插件可以让你在基于NodeJS技术的桌面应用（例如太记）和基于HTML文件的手机端（例如Tiddloid安卓应用）之间同步数据。\\n\\n手机应用 ↔ 桌面应用 ↔ 云端\\n\\nThis plugin enables you sync date between NodeJS server App (e.g. TidGi App) and HTML file based mobile App (e.g. Tiddloid Android App).\\n\\nMobile App ↔ Desktop App ↔ Cloud\\n\\n!! How to use\\n\\n首先在手机端扫码，打开当前这个知识库的网页，然后保存出 HTML 文件后（详见中文教程的[[如何保存|https://tw-cn.netlify.app/#TiddlyGit%E5%A4%AA%E8%AE%B0]]章节），在 Tiddloid 里打开保存的 HTML 文件（可能需要先将文件移出下载目录不然Tiddloid无权限访问，详见其[[说明书|https://github.com/donmor/Tiddloid]]）。\\n\\n然后打开[[服务器列表|$:/plugins/linonetwo/tw-mobile-sync/ui/ServerList]]，录入一下服务器地址：\\n\\n# 将上面扫码得到的 URL 复制一下，填入[[服务器列表|$:/plugins/linonetwo/tw-mobile-sync/ui/ServerList]]里的「智能识别黏贴框」，然后点击「智能识别」按钮，会自动将 URL 解析后填入相应框内。你也可以点击「扫二维码」按钮开始扫码，扫码结果会自动填入「智能识别黏贴框」内\\n# 此时，「服务器IP」和「服务器端口」框里应该要已经填好了 ip 和端口号\\n# 你需要填写一下「服务器名」这个框\\n# 点击「新增服务器」，会新建一个服务器信息条目，请确认创建此条目\\n# 这时新的服务器应该就出现在服务器列表里了，你可以点击「启用同步并立即同步」按钮，这样就可以在桌面端和手机端同步数据了\\n# 之后会每五分钟自动同步一次用户创建的条目（不包含插件），如果需要从桌面端同步插件到手机端，需要使用「[[拉取并覆盖|$:/plugins/linonetwo/tw-mobile-sync/ui/DownloadFullHtml]]」功能\\n\\nFirst scan the code on your cell phone, open the current knowledge base page, then save the HTML file (see the [[How to save|https://tw-cn.netlify.app/#TiddlyGit%E5%A4%AA%E8%AE%B0]] section of the Chinese tutorial for more details) and open the saved HTML file in Tiddloid (You may need to move the file out of the download directory first or Tiddloid will not have access to it, see its [[Instructions|https://github.com/donmor/Tiddloid]] for details).\\n\\nThen open the [[Server List|$:/plugins/linonetwo/tw-mobile-sync/ui/ServerList]] and enter the following server address.\\n\\n# Copy the URL you got from the code above and fill in the \\\"Smart Identify Sticky Box\\\" in [[Server List|$:/plugins/linonetwo/tw-mobile-sync/ui/ServerList]], then click the \\\"Smart Identify\\\" button, the URL will be automatically parsed and filled in the corresponding box. You can also click the \\\"Scan QR Code\\\" button to start scanning the code, and the result will be automatically filled into the \\\"Smart Identify Sticky Box\\\".\\n# At this point, the \\\"Server IP\\\" and \\\"Server Port\\\" boxes should already be filled with the ip and port numbers.\\n# You need to fill in the \\\"server name\\\" box\\n# Click on \\\"Add Server\\\", a new server information entry will be created, please confirm to create this entry\\n# The new server should now appear in the server list, you can click the \\\"Enable sync and sync now\\\" button to sync data between desktop and mobile.\\n# If you need to sync the plugin from desktop to mobile, you need to use the \\\"[[pull and overwrite|$:/plugins/linonetwo/tw-mobile-sync/ui/DownloadFullHtml]]\\\" function.\\n\\nTranslated with www.DeepL.com/Translator (free version)\\n\\n!! Server list and forms 服务器列表和新增表单\\n\\n[[Server List|$:/plugins/linonetwo/tw-mobile-sync/ui/ServerList]] contains syncable servers, and button to add new server.\\n\\n!! QrCode of current server 当前服务器的二维码\\n\\n\\\\define image()\\n<img src=<<makeqr text:\\\"\\\"\\\"$(url)$\\\"\\\"\\\" size:\\\"350\\\">>/>\\n\\\\end\\n\\n<$set name=\\\"url\\\" value={{$:/info/url/full}}>\\n  <<image>>\\n</$set>\\n\\nScan to add this server 扫码以添加此服务器 ({{$:/info/url/full}}).\\n\\n（二维码：当前服务器的地址）\\n\\nNeeds official QR plugin [[$:/plugins/tiddlywiki/qrcode]] to work. 需要安装官方二维码插件 [[$:/plugins/tiddlywiki/qrcode]] 才会有二维码出现在上面\\n\"},\"$:/plugins/linonetwo/tw-mobile-sync/scan-qr-widget-style.css\":{\"title\":\"$:/plugins/linonetwo/tw-mobile-sync/scan-qr-widget-style.css\",\"tags\":\"$:/tags/Stylesheet\",\"type\":\"text/css\",\"text\":\"#scan-qr-widget-loadingMessage {\\n  text-align: center;\\n  padding: 40px;\\n  background-color: #eee;\\n}\\n\\n#scan-qr-widget-canvas {\\n  width: 100%;\\n}\\n\\n#scan-qr-widget-output {\\n  margin-top: 20px;\\n  background: #eee;\\n  padding: 10px;\\n  padding-bottom: 0;\\n}\\n\\n#scan-qr-widget-output div {\\n  padding-bottom: 10px;\\n  word-wrap: break-word;\\n}\\n\\n#scan-qr-widget-noQRFound {\\n  text-align: center;\\n}\\n\"},\"$:/plugins/linonetwo/tw-mobile-sync/scan-qr-widget.js\":{\"title\":\"$:/plugins/linonetwo/tw-mobile-sync/scan-qr-widget.js\",\"text\":\"var __defProp = Object.defineProperty;\\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\\nvar __spreadValues = (a, b) => {\\n  for (var prop in b || (b = {}))\\n    if (__hasOwnProp.call(b, prop))\\n      __defNormalProp(a, prop, b[prop]);\\n  if (__getOwnPropSymbols)\\n    for (var prop of __getOwnPropSymbols(b)) {\\n      if (__propIsEnum.call(b, prop))\\n        __defNormalProp(a, prop, b[prop]);\\n    }\\n  return a;\\n};\\n\\n// node_modules/jsqr-es6/dist/jsQR.js\\nvar BitMatrix = class {\\n  constructor(data, width) {\\n    this.width = width;\\n    this.height = data.length / width;\\n    this.data = data;\\n  }\\n  static createEmpty(width, height) {\\n    return new BitMatrix(new Uint8ClampedArray(width * height), width);\\n  }\\n  get(x, y) {\\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\\n      return false;\\n    }\\n    return !!this.data[y * this.width + x];\\n  }\\n  set(x, y, v) {\\n    this.data[y * this.width + x] = v ? 1 : 0;\\n  }\\n  setRegion(left, top, width, height, v) {\\n    for (let y = top; y < top + height; y++) {\\n      for (let x = left; x < left + width; x++) {\\n        this.set(x, y, !!v);\\n      }\\n    }\\n  }\\n};\\nvar REGION_SIZE = 8;\\nvar MIN_DYNAMIC_RANGE = 24;\\nfunction numBetween(value, min, max) {\\n  return value < min ? min : value > max ? max : value;\\n}\\nvar Matrix = class {\\n  constructor(width, height, buffer) {\\n    this.width = width;\\n    const bufferSize = width * height;\\n    if (buffer && buffer.length !== bufferSize) {\\n      throw new Error(\\\"Wrong buffer size\\\");\\n    }\\n    this.data = buffer || new Uint8ClampedArray(bufferSize);\\n  }\\n  get(x, y) {\\n    return this.data[y * this.width + x];\\n  }\\n  set(x, y, value) {\\n    this.data[y * this.width + x] = value;\\n  }\\n};\\nfunction binarize(data, width, height, returnInverted, greyscaleWeights, canOverwriteImage) {\\n  const pixelCount = width * height;\\n  if (data.length !== pixelCount * 4) {\\n    throw new Error(\\\"Malformed data passed to binarizer.\\\");\\n  }\\n  let bufferOffset = 0;\\n  let greyscaleBuffer;\\n  if (canOverwriteImage) {\\n    greyscaleBuffer = new Uint8ClampedArray(data.buffer, bufferOffset, pixelCount);\\n    bufferOffset += pixelCount;\\n  }\\n  const greyscalePixels = new Matrix(width, height, greyscaleBuffer);\\n  if (greyscaleWeights.useIntegerApproximation) {\\n    for (let y = 0; y < height; y++) {\\n      for (let x = 0; x < width; x++) {\\n        const pixelPosition = (y * width + x) * 4;\\n        const r = data[pixelPosition];\\n        const g = data[pixelPosition + 1];\\n        const b = data[pixelPosition + 2];\\n        greyscalePixels.set(x, y, greyscaleWeights.red * r + greyscaleWeights.green * g + greyscaleWeights.blue * b + 128 >> 8);\\n      }\\n    }\\n  } else {\\n    for (let y = 0; y < height; y++) {\\n      for (let x = 0; x < width; x++) {\\n        const pixelPosition = (y * width + x) * 4;\\n        const r = data[pixelPosition];\\n        const g = data[pixelPosition + 1];\\n        const b = data[pixelPosition + 2];\\n        greyscalePixels.set(x, y, greyscaleWeights.red * r + greyscaleWeights.green * g + greyscaleWeights.blue * b);\\n      }\\n    }\\n  }\\n  const horizontalRegionCount = Math.ceil(width / REGION_SIZE);\\n  const verticalRegionCount = Math.ceil(height / REGION_SIZE);\\n  const blackPointsCount = horizontalRegionCount * verticalRegionCount;\\n  let blackPointsBuffer;\\n  if (canOverwriteImage) {\\n    blackPointsBuffer = new Uint8ClampedArray(data.buffer, bufferOffset, blackPointsCount);\\n    bufferOffset += blackPointsCount;\\n  }\\n  const blackPoints = new Matrix(horizontalRegionCount, verticalRegionCount, blackPointsBuffer);\\n  for (let verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++) {\\n    for (let hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {\\n      let min = Infinity;\\n      let max = 0;\\n      for (let y = 0; y < REGION_SIZE; y++) {\\n        for (let x = 0; x < REGION_SIZE; x++) {\\n          const pixelLumosity = greyscalePixels.get(hortizontalRegion * REGION_SIZE + x, verticalRegion * REGION_SIZE + y);\\n          min = Math.min(min, pixelLumosity);\\n          max = Math.max(max, pixelLumosity);\\n        }\\n      }\\n      let average = (min + max) / 2;\\n      const blackBias = 1.11;\\n      average = Math.min(255, average * blackBias);\\n      if (max - min <= MIN_DYNAMIC_RANGE) {\\n        average = min / 2;\\n        if (verticalRegion > 0 && hortizontalRegion > 0) {\\n          const averageNeighborBlackPoint = (blackPoints.get(hortizontalRegion, verticalRegion - 1) + 2 * blackPoints.get(hortizontalRegion - 1, verticalRegion) + blackPoints.get(hortizontalRegion - 1, verticalRegion - 1)) / 4;\\n          if (min < averageNeighborBlackPoint) {\\n            average = averageNeighborBlackPoint;\\n          }\\n        }\\n      }\\n      blackPoints.set(hortizontalRegion, verticalRegion, average);\\n    }\\n  }\\n  let binarized;\\n  if (canOverwriteImage) {\\n    const binarizedBuffer = new Uint8ClampedArray(data.buffer, bufferOffset, pixelCount);\\n    bufferOffset += pixelCount;\\n    binarized = new BitMatrix(binarizedBuffer, width);\\n  } else {\\n    binarized = BitMatrix.createEmpty(width, height);\\n  }\\n  let inverted = null;\\n  if (returnInverted) {\\n    if (canOverwriteImage) {\\n      const invertedBuffer = new Uint8ClampedArray(data.buffer, bufferOffset, pixelCount);\\n      inverted = new BitMatrix(invertedBuffer, width);\\n    } else {\\n      inverted = BitMatrix.createEmpty(width, height);\\n    }\\n  }\\n  for (let verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++) {\\n    for (let hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {\\n      const left = numBetween(hortizontalRegion, 2, horizontalRegionCount - 3);\\n      const top = numBetween(verticalRegion, 2, verticalRegionCount - 3);\\n      let sum2 = 0;\\n      for (let xRegion = -2; xRegion <= 2; xRegion++) {\\n        for (let yRegion = -2; yRegion <= 2; yRegion++) {\\n          sum2 += blackPoints.get(left + xRegion, top + yRegion);\\n        }\\n      }\\n      const threshold = sum2 / 25;\\n      for (let xRegion = 0; xRegion < REGION_SIZE; xRegion++) {\\n        for (let yRegion = 0; yRegion < REGION_SIZE; yRegion++) {\\n          const x = hortizontalRegion * REGION_SIZE + xRegion;\\n          const y = verticalRegion * REGION_SIZE + yRegion;\\n          const lum = greyscalePixels.get(x, y);\\n          binarized.set(x, y, lum <= threshold);\\n          if (returnInverted) {\\n            inverted.set(x, y, !(lum <= threshold));\\n          }\\n        }\\n      }\\n    }\\n  }\\n  if (returnInverted) {\\n    return { binarized, inverted };\\n  }\\n  return { binarized };\\n}\\nvar BitStream = class {\\n  constructor(bytes) {\\n    this.byteOffset = 0;\\n    this.bitOffset = 0;\\n    this.bytes = bytes;\\n  }\\n  readBits(numBits) {\\n    if (numBits < 1 || numBits > 32 || numBits > this.available()) {\\n      throw new Error(\\\"Cannot read \\\" + numBits.toString() + \\\" bits\\\");\\n    }\\n    let result = 0;\\n    if (this.bitOffset > 0) {\\n      const bitsLeft = 8 - this.bitOffset;\\n      const toRead = numBits < bitsLeft ? numBits : bitsLeft;\\n      const bitsToNotRead = bitsLeft - toRead;\\n      const mask = 255 >> 8 - toRead << bitsToNotRead;\\n      result = (this.bytes[this.byteOffset] & mask) >> bitsToNotRead;\\n      numBits -= toRead;\\n      this.bitOffset += toRead;\\n      if (this.bitOffset === 8) {\\n        this.bitOffset = 0;\\n        this.byteOffset++;\\n      }\\n    }\\n    if (numBits > 0) {\\n      while (numBits >= 8) {\\n        result = result << 8 | this.bytes[this.byteOffset] & 255;\\n        this.byteOffset++;\\n        numBits -= 8;\\n      }\\n      if (numBits > 0) {\\n        const bitsToNotRead = 8 - numBits;\\n        const mask = 255 >> bitsToNotRead << bitsToNotRead;\\n        result = result << numBits | (this.bytes[this.byteOffset] & mask) >> bitsToNotRead;\\n        this.bitOffset += numBits;\\n      }\\n    }\\n    return result;\\n  }\\n  available() {\\n    return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;\\n  }\\n};\\nvar Mode;\\n(function(Mode2) {\\n  Mode2[\\\"Numeric\\\"] = \\\"numeric\\\";\\n  Mode2[\\\"Alphanumeric\\\"] = \\\"alphanumeric\\\";\\n  Mode2[\\\"Byte\\\"] = \\\"byte\\\";\\n  Mode2[\\\"Kanji\\\"] = \\\"kanji\\\";\\n  Mode2[\\\"ECI\\\"] = \\\"eci\\\";\\n  Mode2[\\\"StructuredAppend\\\"] = \\\"structuredappend\\\";\\n})(Mode || (Mode = {}));\\nvar ModeByte;\\n(function(ModeByte2) {\\n  ModeByte2[ModeByte2[\\\"Terminator\\\"] = 0] = \\\"Terminator\\\";\\n  ModeByte2[ModeByte2[\\\"Numeric\\\"] = 1] = \\\"Numeric\\\";\\n  ModeByte2[ModeByte2[\\\"Alphanumeric\\\"] = 2] = \\\"Alphanumeric\\\";\\n  ModeByte2[ModeByte2[\\\"Byte\\\"] = 4] = \\\"Byte\\\";\\n  ModeByte2[ModeByte2[\\\"Kanji\\\"] = 8] = \\\"Kanji\\\";\\n  ModeByte2[ModeByte2[\\\"ECI\\\"] = 7] = \\\"ECI\\\";\\n  ModeByte2[ModeByte2[\\\"StructuredAppend\\\"] = 3] = \\\"StructuredAppend\\\";\\n})(ModeByte || (ModeByte = {}));\\nfunction decodeNumeric(stream, size) {\\n  const bytes = [];\\n  let text = \\\"\\\";\\n  const characterCountSize = [10, 12, 14][size];\\n  let length = stream.readBits(characterCountSize);\\n  while (length >= 3) {\\n    const num = stream.readBits(10);\\n    if (num >= 1e3) {\\n      throw new Error(\\\"Invalid numeric value above 999\\\");\\n    }\\n    const a = Math.floor(num / 100);\\n    const b = Math.floor(num / 10) % 10;\\n    const c = num % 10;\\n    bytes.push(48 + a, 48 + b, 48 + c);\\n    text += a.toString() + b.toString() + c.toString();\\n    length -= 3;\\n  }\\n  if (length === 2) {\\n    const num = stream.readBits(7);\\n    if (num >= 100) {\\n      throw new Error(\\\"Invalid numeric value above 99\\\");\\n    }\\n    const a = Math.floor(num / 10);\\n    const b = num % 10;\\n    bytes.push(48 + a, 48 + b);\\n    text += a.toString() + b.toString();\\n  } else if (length === 1) {\\n    const num = stream.readBits(4);\\n    if (num >= 10) {\\n      throw new Error(\\\"Invalid numeric value above 9\\\");\\n    }\\n    bytes.push(48 + num);\\n    text += num.toString();\\n  }\\n  return { bytes, text };\\n}\\nvar AlphanumericCharacterCodes = [\\n  \\\"0\\\",\\n  \\\"1\\\",\\n  \\\"2\\\",\\n  \\\"3\\\",\\n  \\\"4\\\",\\n  \\\"5\\\",\\n  \\\"6\\\",\\n  \\\"7\\\",\\n  \\\"8\\\",\\n  \\\"9\\\",\\n  \\\"A\\\",\\n  \\\"B\\\",\\n  \\\"C\\\",\\n  \\\"D\\\",\\n  \\\"E\\\",\\n  \\\"F\\\",\\n  \\\"G\\\",\\n  \\\"H\\\",\\n  \\\"I\\\",\\n  \\\"J\\\",\\n  \\\"K\\\",\\n  \\\"L\\\",\\n  \\\"M\\\",\\n  \\\"N\\\",\\n  \\\"O\\\",\\n  \\\"P\\\",\\n  \\\"Q\\\",\\n  \\\"R\\\",\\n  \\\"S\\\",\\n  \\\"T\\\",\\n  \\\"U\\\",\\n  \\\"V\\\",\\n  \\\"W\\\",\\n  \\\"X\\\",\\n  \\\"Y\\\",\\n  \\\"Z\\\",\\n  \\\" \\\",\\n  \\\"$\\\",\\n  \\\"%\\\",\\n  \\\"*\\\",\\n  \\\"+\\\",\\n  \\\"-\\\",\\n  \\\".\\\",\\n  \\\"/\\\",\\n  \\\":\\\"\\n];\\nfunction decodeAlphanumeric(stream, size) {\\n  const bytes = [];\\n  let text = \\\"\\\";\\n  const characterCountSize = [9, 11, 13][size];\\n  let length = stream.readBits(characterCountSize);\\n  while (length >= 2) {\\n    const v = stream.readBits(11);\\n    const a = Math.floor(v / 45);\\n    const b = v % 45;\\n    bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0), AlphanumericCharacterCodes[b].charCodeAt(0));\\n    text += AlphanumericCharacterCodes[a] + AlphanumericCharacterCodes[b];\\n    length -= 2;\\n  }\\n  if (length === 1) {\\n    const a = stream.readBits(6);\\n    bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0));\\n    text += AlphanumericCharacterCodes[a];\\n  }\\n  return { bytes, text };\\n}\\nfunction decodeByte(stream, size) {\\n  const bytes = [];\\n  let text = \\\"\\\";\\n  const characterCountSize = [8, 16, 16][size];\\n  const length = stream.readBits(characterCountSize);\\n  for (let i = 0; i < length; i++) {\\n    const b = stream.readBits(8);\\n    bytes.push(b);\\n  }\\n  try {\\n    text += decodeURIComponent(bytes.map((b) => `%${(\\\"0\\\" + b.toString(16)).substr(-2)}`).join(\\\"\\\"));\\n  } catch (_a) {\\n  }\\n  return { bytes, text };\\n}\\nfunction decodeKanji(stream, size) {\\n  const bytes = [];\\n  const characterCountSize = [8, 10, 12][size];\\n  const length = stream.readBits(characterCountSize);\\n  for (let i = 0; i < length; i++) {\\n    const k = stream.readBits(13);\\n    let c = Math.floor(k / 192) << 8 | k % 192;\\n    if (c < 7936) {\\n      c += 33088;\\n    } else {\\n      c += 49472;\\n    }\\n    bytes.push(c >> 8, c & 255);\\n  }\\n  const text = new TextDecoder(\\\"shift-jis\\\").decode(Uint8Array.from(bytes));\\n  return { bytes, text };\\n}\\nfunction decode$2(data, version) {\\n  const stream = new BitStream(data);\\n  const size = version <= 9 ? 0 : version <= 26 ? 1 : 2;\\n  const result = {\\n    text: \\\"\\\",\\n    bytes: [],\\n    chunks: [],\\n    version\\n  };\\n  while (stream.available() >= 4) {\\n    const mode = stream.readBits(4);\\n    if (mode === ModeByte.Terminator) {\\n      return result;\\n    } else if (mode === ModeByte.ECI) {\\n      if (stream.readBits(1) === 0) {\\n        result.chunks.push({\\n          type: Mode.ECI,\\n          assignmentNumber: stream.readBits(7)\\n        });\\n      } else if (stream.readBits(1) === 0) {\\n        result.chunks.push({\\n          type: Mode.ECI,\\n          assignmentNumber: stream.readBits(14)\\n        });\\n      } else if (stream.readBits(1) === 0) {\\n        result.chunks.push({\\n          type: Mode.ECI,\\n          assignmentNumber: stream.readBits(21)\\n        });\\n      } else {\\n        result.chunks.push({\\n          type: Mode.ECI,\\n          assignmentNumber: -1\\n        });\\n      }\\n    } else if (mode === ModeByte.Numeric) {\\n      const numericResult = decodeNumeric(stream, size);\\n      result.text += numericResult.text;\\n      result.bytes.push(...numericResult.bytes);\\n      result.chunks.push({\\n        type: Mode.Numeric,\\n        text: numericResult.text\\n      });\\n    } else if (mode === ModeByte.Alphanumeric) {\\n      const alphanumericResult = decodeAlphanumeric(stream, size);\\n      result.text += alphanumericResult.text;\\n      result.bytes.push(...alphanumericResult.bytes);\\n      result.chunks.push({\\n        type: Mode.Alphanumeric,\\n        text: alphanumericResult.text\\n      });\\n    } else if (mode === ModeByte.Byte) {\\n      const byteResult = decodeByte(stream, size);\\n      result.text += byteResult.text;\\n      result.bytes.push(...byteResult.bytes);\\n      result.chunks.push({\\n        type: Mode.Byte,\\n        bytes: byteResult.bytes,\\n        text: byteResult.text\\n      });\\n    } else if (mode === ModeByte.Kanji) {\\n      const kanjiResult = decodeKanji(stream, size);\\n      result.text += kanjiResult.text;\\n      result.bytes.push(...kanjiResult.bytes);\\n      result.chunks.push({\\n        type: Mode.Kanji,\\n        bytes: kanjiResult.bytes,\\n        text: kanjiResult.text\\n      });\\n    } else if (mode === ModeByte.StructuredAppend) {\\n      result.chunks.push({\\n        type: Mode.StructuredAppend,\\n        currentSequence: stream.readBits(4),\\n        totalSequence: stream.readBits(4),\\n        parity: stream.readBits(8)\\n      });\\n    }\\n  }\\n  if (stream.available() === 0 || stream.readBits(stream.available()) === 0) {\\n    return result;\\n  }\\n}\\nvar GenericGFPoly = class {\\n  constructor(field, coefficients) {\\n    if (coefficients.length === 0) {\\n      throw new Error(\\\"No coefficients.\\\");\\n    }\\n    this.field = field;\\n    const coefficientsLength = coefficients.length;\\n    if (coefficientsLength > 1 && coefficients[0] === 0) {\\n      let firstNonZero = 1;\\n      while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {\\n        firstNonZero++;\\n      }\\n      if (firstNonZero === coefficientsLength) {\\n        this.coefficients = field.zero.coefficients;\\n      } else {\\n        this.coefficients = new Uint8ClampedArray(coefficientsLength - firstNonZero);\\n        for (let i = 0; i < this.coefficients.length; i++) {\\n          this.coefficients[i] = coefficients[firstNonZero + i];\\n        }\\n      }\\n    } else {\\n      this.coefficients = coefficients;\\n    }\\n  }\\n  degree() {\\n    return this.coefficients.length - 1;\\n  }\\n  isZero() {\\n    return this.coefficients[0] === 0;\\n  }\\n  getCoefficient(degree) {\\n    return this.coefficients[this.coefficients.length - 1 - degree];\\n  }\\n  addOrSubtract(other) {\\n    if (this.isZero()) {\\n      return other;\\n    }\\n    if (other.isZero()) {\\n      return this;\\n    }\\n    let smallerCoefficients = this.coefficients;\\n    let largerCoefficients = other.coefficients;\\n    if (smallerCoefficients.length > largerCoefficients.length) {\\n      [smallerCoefficients, largerCoefficients] = [largerCoefficients, smallerCoefficients];\\n    }\\n    const sumDiff = new Uint8ClampedArray(largerCoefficients.length);\\n    const lengthDiff = largerCoefficients.length - smallerCoefficients.length;\\n    for (let i = 0; i < lengthDiff; i++) {\\n      sumDiff[i] = largerCoefficients[i];\\n    }\\n    for (let i = lengthDiff; i < largerCoefficients.length; i++) {\\n      sumDiff[i] = addOrSubtractGF(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);\\n    }\\n    return new GenericGFPoly(this.field, sumDiff);\\n  }\\n  multiply(scalar) {\\n    if (scalar === 0) {\\n      return this.field.zero;\\n    }\\n    if (scalar === 1) {\\n      return this;\\n    }\\n    const size = this.coefficients.length;\\n    const product = new Uint8ClampedArray(size);\\n    for (let i = 0; i < size; i++) {\\n      product[i] = this.field.multiply(this.coefficients[i], scalar);\\n    }\\n    return new GenericGFPoly(this.field, product);\\n  }\\n  multiplyPoly(other) {\\n    if (this.isZero() || other.isZero()) {\\n      return this.field.zero;\\n    }\\n    const aCoefficients = this.coefficients;\\n    const aLength = aCoefficients.length;\\n    const bCoefficients = other.coefficients;\\n    const bLength = bCoefficients.length;\\n    const product = new Uint8ClampedArray(aLength + bLength - 1);\\n    for (let i = 0; i < aLength; i++) {\\n      const aCoeff = aCoefficients[i];\\n      for (let j = 0; j < bLength; j++) {\\n        product[i + j] = addOrSubtractGF(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));\\n      }\\n    }\\n    return new GenericGFPoly(this.field, product);\\n  }\\n  multiplyByMonomial(degree, coefficient) {\\n    if (degree < 0) {\\n      throw new Error(\\\"Invalid degree less than 0\\\");\\n    }\\n    if (coefficient === 0) {\\n      return this.field.zero;\\n    }\\n    const size = this.coefficients.length;\\n    const product = new Uint8ClampedArray(size + degree);\\n    for (let i = 0; i < size; i++) {\\n      product[i] = this.field.multiply(this.coefficients[i], coefficient);\\n    }\\n    return new GenericGFPoly(this.field, product);\\n  }\\n  evaluateAt(a) {\\n    let result = 0;\\n    if (a === 0) {\\n      return this.getCoefficient(0);\\n    }\\n    const size = this.coefficients.length;\\n    if (a === 1) {\\n      this.coefficients.forEach((coefficient) => {\\n        result = addOrSubtractGF(result, coefficient);\\n      });\\n      return result;\\n    }\\n    result = this.coefficients[0];\\n    for (let i = 1; i < size; i++) {\\n      result = addOrSubtractGF(this.field.multiply(a, result), this.coefficients[i]);\\n    }\\n    return result;\\n  }\\n};\\nfunction addOrSubtractGF(a, b) {\\n  return a ^ b;\\n}\\nvar GenericGF = class {\\n  constructor(primitive, size, genBase) {\\n    this.primitive = primitive;\\n    this.size = size;\\n    this.generatorBase = genBase;\\n    this.expTable = new Array(this.size);\\n    this.logTable = new Array(this.size);\\n    let x = 1;\\n    for (let i = 0; i < this.size; i++) {\\n      this.expTable[i] = x;\\n      x = x * 2;\\n      if (x >= this.size) {\\n        x = (x ^ this.primitive) & this.size - 1;\\n      }\\n    }\\n    for (let i = 0; i < this.size - 1; i++) {\\n      this.logTable[this.expTable[i]] = i;\\n    }\\n    this.zero = new GenericGFPoly(this, Uint8ClampedArray.from([0]));\\n    this.one = new GenericGFPoly(this, Uint8ClampedArray.from([1]));\\n  }\\n  multiply(a, b) {\\n    if (a === 0 || b === 0) {\\n      return 0;\\n    }\\n    return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.size - 1)];\\n  }\\n  inverse(a) {\\n    if (a === 0) {\\n      throw new Error(\\\"Can't invert 0\\\");\\n    }\\n    return this.expTable[this.size - this.logTable[a] - 1];\\n  }\\n  buildMonomial(degree, coefficient) {\\n    if (degree < 0) {\\n      throw new Error(\\\"Invalid monomial degree less than 0\\\");\\n    }\\n    if (coefficient === 0) {\\n      return this.zero;\\n    }\\n    const coefficients = new Uint8ClampedArray(degree + 1);\\n    coefficients[0] = coefficient;\\n    return new GenericGFPoly(this, coefficients);\\n  }\\n  log(a) {\\n    if (a === 0) {\\n      throw new Error(\\\"Can't take log(0)\\\");\\n    }\\n    return this.logTable[a];\\n  }\\n  exp(a) {\\n    return this.expTable[a];\\n  }\\n};\\nfunction runEuclideanAlgorithm(field, a, b, R) {\\n  if (a.degree() < b.degree()) {\\n    [a, b] = [b, a];\\n  }\\n  let rLast = a;\\n  let r = b;\\n  let tLast = field.zero;\\n  let t = field.one;\\n  while (r.degree() >= R / 2) {\\n    const rLastLast = rLast;\\n    const tLastLast = tLast;\\n    rLast = r;\\n    tLast = t;\\n    if (rLast.isZero()) {\\n      return null;\\n    }\\n    r = rLastLast;\\n    let q = field.zero;\\n    const denominatorLeadingTerm = rLast.getCoefficient(rLast.degree());\\n    const dltInverse = field.inverse(denominatorLeadingTerm);\\n    while (r.degree() >= rLast.degree() && !r.isZero()) {\\n      const degreeDiff = r.degree() - rLast.degree();\\n      const scale = field.multiply(r.getCoefficient(r.degree()), dltInverse);\\n      q = q.addOrSubtract(field.buildMonomial(degreeDiff, scale));\\n      r = r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff, scale));\\n    }\\n    t = q.multiplyPoly(tLast).addOrSubtract(tLastLast);\\n    if (r.degree() >= rLast.degree()) {\\n      return null;\\n    }\\n  }\\n  const sigmaTildeAtZero = t.getCoefficient(0);\\n  if (sigmaTildeAtZero === 0) {\\n    return null;\\n  }\\n  const inverse = field.inverse(sigmaTildeAtZero);\\n  return [t.multiply(inverse), r.multiply(inverse)];\\n}\\nfunction findErrorLocations(field, errorLocator) {\\n  const numErrors = errorLocator.degree();\\n  if (numErrors === 1) {\\n    return [errorLocator.getCoefficient(1)];\\n  }\\n  const result = new Array(numErrors);\\n  let errorCount = 0;\\n  for (let i = 1; i < field.size && errorCount < numErrors; i++) {\\n    if (errorLocator.evaluateAt(i) === 0) {\\n      result[errorCount] = field.inverse(i);\\n      errorCount++;\\n    }\\n  }\\n  if (errorCount !== numErrors) {\\n    return null;\\n  }\\n  return result;\\n}\\nfunction findErrorMagnitudes(field, errorEvaluator, errorLocations) {\\n  const s = errorLocations.length;\\n  const result = new Array(s);\\n  for (let i = 0; i < s; i++) {\\n    const xiInverse = field.inverse(errorLocations[i]);\\n    let denominator = 1;\\n    for (let j = 0; j < s; j++) {\\n      if (i !== j) {\\n        denominator = field.multiply(denominator, addOrSubtractGF(1, field.multiply(errorLocations[j], xiInverse)));\\n      }\\n    }\\n    result[i] = field.multiply(errorEvaluator.evaluateAt(xiInverse), field.inverse(denominator));\\n    if (field.generatorBase !== 0) {\\n      result[i] = field.multiply(result[i], xiInverse);\\n    }\\n  }\\n  return result;\\n}\\nfunction decode$1(bytes, twoS) {\\n  const outputBytes = new Uint8ClampedArray(bytes.length);\\n  outputBytes.set(bytes);\\n  const field = new GenericGF(285, 256, 0);\\n  const poly = new GenericGFPoly(field, outputBytes);\\n  const syndromeCoefficients = new Uint8ClampedArray(twoS);\\n  let error = false;\\n  for (let s = 0; s < twoS; s++) {\\n    const evaluation = poly.evaluateAt(field.exp(s + field.generatorBase));\\n    syndromeCoefficients[syndromeCoefficients.length - 1 - s] = evaluation;\\n    if (evaluation !== 0) {\\n      error = true;\\n    }\\n  }\\n  if (!error) {\\n    return outputBytes;\\n  }\\n  const syndrome = new GenericGFPoly(field, syndromeCoefficients);\\n  const sigmaOmega = runEuclideanAlgorithm(field, field.buildMonomial(twoS, 1), syndrome, twoS);\\n  if (sigmaOmega === null) {\\n    return null;\\n  }\\n  const errorLocations = findErrorLocations(field, sigmaOmega[0]);\\n  if (errorLocations == null) {\\n    return null;\\n  }\\n  const errorMagnitudes = findErrorMagnitudes(field, sigmaOmega[1], errorLocations);\\n  for (let i = 0; i < errorLocations.length; i++) {\\n    const position = outputBytes.length - 1 - field.log(errorLocations[i]);\\n    if (position < 0) {\\n      return null;\\n    }\\n    outputBytes[position] = addOrSubtractGF(outputBytes[position], errorMagnitudes[i]);\\n  }\\n  return outputBytes;\\n}\\nvar VERSIONS = [\\n  {\\n    infoBits: null,\\n    versionNumber: 1,\\n    alignmentPatternCenters: [],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 7,\\n        ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 19 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 10,\\n        ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 16 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 13,\\n        ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 13 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 17,\\n        ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 9 }]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: null,\\n    versionNumber: 2,\\n    alignmentPatternCenters: [6, 18],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 10,\\n        ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 34 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 16,\\n        ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 28 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 22,\\n        ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 22 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 16 }]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: null,\\n    versionNumber: 3,\\n    alignmentPatternCenters: [6, 22],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 15,\\n        ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 55 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 26,\\n        ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 44 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 18,\\n        ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 17 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 22,\\n        ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 13 }]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: null,\\n    versionNumber: 4,\\n    alignmentPatternCenters: [6, 26],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 20,\\n        ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 80 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 18,\\n        ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 32 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 26,\\n        ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 24 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 16,\\n        ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 9 }]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: null,\\n    versionNumber: 5,\\n    alignmentPatternCenters: [6, 30],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 26,\\n        ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 108 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 24,\\n        ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 43 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 18,\\n        ecBlocks: [\\n          { numBlocks: 2, dataCodewordsPerBlock: 15 },\\n          { numBlocks: 2, dataCodewordsPerBlock: 16 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 22,\\n        ecBlocks: [\\n          { numBlocks: 2, dataCodewordsPerBlock: 11 },\\n          { numBlocks: 2, dataCodewordsPerBlock: 12 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: null,\\n    versionNumber: 6,\\n    alignmentPatternCenters: [6, 34],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 18,\\n        ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 68 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 16,\\n        ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 27 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 24,\\n        ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 19 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 15 }]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 31892,\\n    versionNumber: 7,\\n    alignmentPatternCenters: [6, 22, 38],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 20,\\n        ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 78 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 18,\\n        ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 31 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 18,\\n        ecBlocks: [\\n          { numBlocks: 2, dataCodewordsPerBlock: 14 },\\n          { numBlocks: 4, dataCodewordsPerBlock: 15 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 26,\\n        ecBlocks: [\\n          { numBlocks: 4, dataCodewordsPerBlock: 13 },\\n          { numBlocks: 1, dataCodewordsPerBlock: 14 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 34236,\\n    versionNumber: 8,\\n    alignmentPatternCenters: [6, 24, 42],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 24,\\n        ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 97 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 22,\\n        ecBlocks: [\\n          { numBlocks: 2, dataCodewordsPerBlock: 38 },\\n          { numBlocks: 2, dataCodewordsPerBlock: 39 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 22,\\n        ecBlocks: [\\n          { numBlocks: 4, dataCodewordsPerBlock: 18 },\\n          { numBlocks: 2, dataCodewordsPerBlock: 19 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 26,\\n        ecBlocks: [\\n          { numBlocks: 4, dataCodewordsPerBlock: 14 },\\n          { numBlocks: 2, dataCodewordsPerBlock: 15 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 39577,\\n    versionNumber: 9,\\n    alignmentPatternCenters: [6, 26, 46],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 116 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 22,\\n        ecBlocks: [\\n          { numBlocks: 3, dataCodewordsPerBlock: 36 },\\n          { numBlocks: 2, dataCodewordsPerBlock: 37 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 20,\\n        ecBlocks: [\\n          { numBlocks: 4, dataCodewordsPerBlock: 16 },\\n          { numBlocks: 4, dataCodewordsPerBlock: 17 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 24,\\n        ecBlocks: [\\n          { numBlocks: 4, dataCodewordsPerBlock: 12 },\\n          { numBlocks: 4, dataCodewordsPerBlock: 13 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 42195,\\n    versionNumber: 10,\\n    alignmentPatternCenters: [6, 28, 50],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 18,\\n        ecBlocks: [\\n          { numBlocks: 2, dataCodewordsPerBlock: 68 },\\n          { numBlocks: 2, dataCodewordsPerBlock: 69 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 26,\\n        ecBlocks: [\\n          { numBlocks: 4, dataCodewordsPerBlock: 43 },\\n          { numBlocks: 1, dataCodewordsPerBlock: 44 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 24,\\n        ecBlocks: [\\n          { numBlocks: 6, dataCodewordsPerBlock: 19 },\\n          { numBlocks: 2, dataCodewordsPerBlock: 20 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 6, dataCodewordsPerBlock: 15 },\\n          { numBlocks: 2, dataCodewordsPerBlock: 16 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 48118,\\n    versionNumber: 11,\\n    alignmentPatternCenters: [6, 30, 54],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 20,\\n        ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 81 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 1, dataCodewordsPerBlock: 50 },\\n          { numBlocks: 4, dataCodewordsPerBlock: 51 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 4, dataCodewordsPerBlock: 22 },\\n          { numBlocks: 4, dataCodewordsPerBlock: 23 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 24,\\n        ecBlocks: [\\n          { numBlocks: 3, dataCodewordsPerBlock: 12 },\\n          { numBlocks: 8, dataCodewordsPerBlock: 13 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 51042,\\n    versionNumber: 12,\\n    alignmentPatternCenters: [6, 32, 58],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 24,\\n        ecBlocks: [\\n          { numBlocks: 2, dataCodewordsPerBlock: 92 },\\n          { numBlocks: 2, dataCodewordsPerBlock: 93 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 22,\\n        ecBlocks: [\\n          { numBlocks: 6, dataCodewordsPerBlock: 36 },\\n          { numBlocks: 2, dataCodewordsPerBlock: 37 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 26,\\n        ecBlocks: [\\n          { numBlocks: 4, dataCodewordsPerBlock: 20 },\\n          { numBlocks: 6, dataCodewordsPerBlock: 21 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 7, dataCodewordsPerBlock: 14 },\\n          { numBlocks: 4, dataCodewordsPerBlock: 15 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 55367,\\n    versionNumber: 13,\\n    alignmentPatternCenters: [6, 34, 62],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 26,\\n        ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 107 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 22,\\n        ecBlocks: [\\n          { numBlocks: 8, dataCodewordsPerBlock: 37 },\\n          { numBlocks: 1, dataCodewordsPerBlock: 38 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 24,\\n        ecBlocks: [\\n          { numBlocks: 8, dataCodewordsPerBlock: 20 },\\n          { numBlocks: 4, dataCodewordsPerBlock: 21 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 22,\\n        ecBlocks: [\\n          { numBlocks: 12, dataCodewordsPerBlock: 11 },\\n          { numBlocks: 4, dataCodewordsPerBlock: 12 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 58893,\\n    versionNumber: 14,\\n    alignmentPatternCenters: [6, 26, 46, 66],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 3, dataCodewordsPerBlock: 115 },\\n          { numBlocks: 1, dataCodewordsPerBlock: 116 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 24,\\n        ecBlocks: [\\n          { numBlocks: 4, dataCodewordsPerBlock: 40 },\\n          { numBlocks: 5, dataCodewordsPerBlock: 41 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 20,\\n        ecBlocks: [\\n          { numBlocks: 11, dataCodewordsPerBlock: 16 },\\n          { numBlocks: 5, dataCodewordsPerBlock: 17 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 24,\\n        ecBlocks: [\\n          { numBlocks: 11, dataCodewordsPerBlock: 12 },\\n          { numBlocks: 5, dataCodewordsPerBlock: 13 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 63784,\\n    versionNumber: 15,\\n    alignmentPatternCenters: [6, 26, 48, 70],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 22,\\n        ecBlocks: [\\n          { numBlocks: 5, dataCodewordsPerBlock: 87 },\\n          { numBlocks: 1, dataCodewordsPerBlock: 88 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 24,\\n        ecBlocks: [\\n          { numBlocks: 5, dataCodewordsPerBlock: 41 },\\n          { numBlocks: 5, dataCodewordsPerBlock: 42 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 5, dataCodewordsPerBlock: 24 },\\n          { numBlocks: 7, dataCodewordsPerBlock: 25 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 24,\\n        ecBlocks: [\\n          { numBlocks: 11, dataCodewordsPerBlock: 12 },\\n          { numBlocks: 7, dataCodewordsPerBlock: 13 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 68472,\\n    versionNumber: 16,\\n    alignmentPatternCenters: [6, 26, 50, 74],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 24,\\n        ecBlocks: [\\n          { numBlocks: 5, dataCodewordsPerBlock: 98 },\\n          { numBlocks: 1, dataCodewordsPerBlock: 99 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 7, dataCodewordsPerBlock: 45 },\\n          { numBlocks: 3, dataCodewordsPerBlock: 46 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 24,\\n        ecBlocks: [\\n          { numBlocks: 15, dataCodewordsPerBlock: 19 },\\n          { numBlocks: 2, dataCodewordsPerBlock: 20 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 3, dataCodewordsPerBlock: 15 },\\n          { numBlocks: 13, dataCodewordsPerBlock: 16 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 70749,\\n    versionNumber: 17,\\n    alignmentPatternCenters: [6, 30, 54, 78],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 1, dataCodewordsPerBlock: 107 },\\n          { numBlocks: 5, dataCodewordsPerBlock: 108 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 10, dataCodewordsPerBlock: 46 },\\n          { numBlocks: 1, dataCodewordsPerBlock: 47 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 1, dataCodewordsPerBlock: 22 },\\n          { numBlocks: 15, dataCodewordsPerBlock: 23 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 2, dataCodewordsPerBlock: 14 },\\n          { numBlocks: 17, dataCodewordsPerBlock: 15 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 76311,\\n    versionNumber: 18,\\n    alignmentPatternCenters: [6, 30, 56, 82],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 5, dataCodewordsPerBlock: 120 },\\n          { numBlocks: 1, dataCodewordsPerBlock: 121 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 26,\\n        ecBlocks: [\\n          { numBlocks: 9, dataCodewordsPerBlock: 43 },\\n          { numBlocks: 4, dataCodewordsPerBlock: 44 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 17, dataCodewordsPerBlock: 22 },\\n          { numBlocks: 1, dataCodewordsPerBlock: 23 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 2, dataCodewordsPerBlock: 14 },\\n          { numBlocks: 19, dataCodewordsPerBlock: 15 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 79154,\\n    versionNumber: 19,\\n    alignmentPatternCenters: [6, 30, 58, 86],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 3, dataCodewordsPerBlock: 113 },\\n          { numBlocks: 4, dataCodewordsPerBlock: 114 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 26,\\n        ecBlocks: [\\n          { numBlocks: 3, dataCodewordsPerBlock: 44 },\\n          { numBlocks: 11, dataCodewordsPerBlock: 45 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 26,\\n        ecBlocks: [\\n          { numBlocks: 17, dataCodewordsPerBlock: 21 },\\n          { numBlocks: 4, dataCodewordsPerBlock: 22 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 26,\\n        ecBlocks: [\\n          { numBlocks: 9, dataCodewordsPerBlock: 13 },\\n          { numBlocks: 16, dataCodewordsPerBlock: 14 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 84390,\\n    versionNumber: 20,\\n    alignmentPatternCenters: [6, 34, 62, 90],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 3, dataCodewordsPerBlock: 107 },\\n          { numBlocks: 5, dataCodewordsPerBlock: 108 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 26,\\n        ecBlocks: [\\n          { numBlocks: 3, dataCodewordsPerBlock: 41 },\\n          { numBlocks: 13, dataCodewordsPerBlock: 42 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 15, dataCodewordsPerBlock: 24 },\\n          { numBlocks: 5, dataCodewordsPerBlock: 25 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 15, dataCodewordsPerBlock: 15 },\\n          { numBlocks: 10, dataCodewordsPerBlock: 16 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 87683,\\n    versionNumber: 21,\\n    alignmentPatternCenters: [6, 28, 50, 72, 94],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 4, dataCodewordsPerBlock: 116 },\\n          { numBlocks: 4, dataCodewordsPerBlock: 117 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 26,\\n        ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 42 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 17, dataCodewordsPerBlock: 22 },\\n          { numBlocks: 6, dataCodewordsPerBlock: 23 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 19, dataCodewordsPerBlock: 16 },\\n          { numBlocks: 6, dataCodewordsPerBlock: 17 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 92361,\\n    versionNumber: 22,\\n    alignmentPatternCenters: [6, 26, 50, 74, 98],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 2, dataCodewordsPerBlock: 111 },\\n          { numBlocks: 7, dataCodewordsPerBlock: 112 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 46 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 7, dataCodewordsPerBlock: 24 },\\n          { numBlocks: 16, dataCodewordsPerBlock: 25 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 24,\\n        ecBlocks: [{ numBlocks: 34, dataCodewordsPerBlock: 13 }]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 96236,\\n    versionNumber: 23,\\n    alignmentPatternCenters: [6, 30, 54, 74, 102],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 4, dataCodewordsPerBlock: 121 },\\n          { numBlocks: 5, dataCodewordsPerBlock: 122 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 4, dataCodewordsPerBlock: 47 },\\n          { numBlocks: 14, dataCodewordsPerBlock: 48 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 11, dataCodewordsPerBlock: 24 },\\n          { numBlocks: 14, dataCodewordsPerBlock: 25 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 16, dataCodewordsPerBlock: 15 },\\n          { numBlocks: 14, dataCodewordsPerBlock: 16 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 102084,\\n    versionNumber: 24,\\n    alignmentPatternCenters: [6, 28, 54, 80, 106],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 6, dataCodewordsPerBlock: 117 },\\n          { numBlocks: 4, dataCodewordsPerBlock: 118 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 6, dataCodewordsPerBlock: 45 },\\n          { numBlocks: 14, dataCodewordsPerBlock: 46 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 11, dataCodewordsPerBlock: 24 },\\n          { numBlocks: 16, dataCodewordsPerBlock: 25 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 30, dataCodewordsPerBlock: 16 },\\n          { numBlocks: 2, dataCodewordsPerBlock: 17 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 102881,\\n    versionNumber: 25,\\n    alignmentPatternCenters: [6, 32, 58, 84, 110],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 26,\\n        ecBlocks: [\\n          { numBlocks: 8, dataCodewordsPerBlock: 106 },\\n          { numBlocks: 4, dataCodewordsPerBlock: 107 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 8, dataCodewordsPerBlock: 47 },\\n          { numBlocks: 13, dataCodewordsPerBlock: 48 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 7, dataCodewordsPerBlock: 24 },\\n          { numBlocks: 22, dataCodewordsPerBlock: 25 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 22, dataCodewordsPerBlock: 15 },\\n          { numBlocks: 13, dataCodewordsPerBlock: 16 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 110507,\\n    versionNumber: 26,\\n    alignmentPatternCenters: [6, 30, 58, 86, 114],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 10, dataCodewordsPerBlock: 114 },\\n          { numBlocks: 2, dataCodewordsPerBlock: 115 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 19, dataCodewordsPerBlock: 46 },\\n          { numBlocks: 4, dataCodewordsPerBlock: 47 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 28, dataCodewordsPerBlock: 22 },\\n          { numBlocks: 6, dataCodewordsPerBlock: 23 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 33, dataCodewordsPerBlock: 16 },\\n          { numBlocks: 4, dataCodewordsPerBlock: 17 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 110734,\\n    versionNumber: 27,\\n    alignmentPatternCenters: [6, 34, 62, 90, 118],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 8, dataCodewordsPerBlock: 122 },\\n          { numBlocks: 4, dataCodewordsPerBlock: 123 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 22, dataCodewordsPerBlock: 45 },\\n          { numBlocks: 3, dataCodewordsPerBlock: 46 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 8, dataCodewordsPerBlock: 23 },\\n          { numBlocks: 26, dataCodewordsPerBlock: 24 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 12, dataCodewordsPerBlock: 15 },\\n          { numBlocks: 28, dataCodewordsPerBlock: 16 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 117786,\\n    versionNumber: 28,\\n    alignmentPatternCenters: [6, 26, 50, 74, 98, 122],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 3, dataCodewordsPerBlock: 117 },\\n          { numBlocks: 10, dataCodewordsPerBlock: 118 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 3, dataCodewordsPerBlock: 45 },\\n          { numBlocks: 23, dataCodewordsPerBlock: 46 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 4, dataCodewordsPerBlock: 24 },\\n          { numBlocks: 31, dataCodewordsPerBlock: 25 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 11, dataCodewordsPerBlock: 15 },\\n          { numBlocks: 31, dataCodewordsPerBlock: 16 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 119615,\\n    versionNumber: 29,\\n    alignmentPatternCenters: [6, 30, 54, 78, 102, 126],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 7, dataCodewordsPerBlock: 116 },\\n          { numBlocks: 7, dataCodewordsPerBlock: 117 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 21, dataCodewordsPerBlock: 45 },\\n          { numBlocks: 7, dataCodewordsPerBlock: 46 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 1, dataCodewordsPerBlock: 23 },\\n          { numBlocks: 37, dataCodewordsPerBlock: 24 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 19, dataCodewordsPerBlock: 15 },\\n          { numBlocks: 26, dataCodewordsPerBlock: 16 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 126325,\\n    versionNumber: 30,\\n    alignmentPatternCenters: [6, 26, 52, 78, 104, 130],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 5, dataCodewordsPerBlock: 115 },\\n          { numBlocks: 10, dataCodewordsPerBlock: 116 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 19, dataCodewordsPerBlock: 47 },\\n          { numBlocks: 10, dataCodewordsPerBlock: 48 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 15, dataCodewordsPerBlock: 24 },\\n          { numBlocks: 25, dataCodewordsPerBlock: 25 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 23, dataCodewordsPerBlock: 15 },\\n          { numBlocks: 25, dataCodewordsPerBlock: 16 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 127568,\\n    versionNumber: 31,\\n    alignmentPatternCenters: [6, 30, 56, 82, 108, 134],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 13, dataCodewordsPerBlock: 115 },\\n          { numBlocks: 3, dataCodewordsPerBlock: 116 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 2, dataCodewordsPerBlock: 46 },\\n          { numBlocks: 29, dataCodewordsPerBlock: 47 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 42, dataCodewordsPerBlock: 24 },\\n          { numBlocks: 1, dataCodewordsPerBlock: 25 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 23, dataCodewordsPerBlock: 15 },\\n          { numBlocks: 28, dataCodewordsPerBlock: 16 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 133589,\\n    versionNumber: 32,\\n    alignmentPatternCenters: [6, 34, 60, 86, 112, 138],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 115 }]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 10, dataCodewordsPerBlock: 46 },\\n          { numBlocks: 23, dataCodewordsPerBlock: 47 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 10, dataCodewordsPerBlock: 24 },\\n          { numBlocks: 35, dataCodewordsPerBlock: 25 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 19, dataCodewordsPerBlock: 15 },\\n          { numBlocks: 35, dataCodewordsPerBlock: 16 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 136944,\\n    versionNumber: 33,\\n    alignmentPatternCenters: [6, 30, 58, 86, 114, 142],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 17, dataCodewordsPerBlock: 115 },\\n          { numBlocks: 1, dataCodewordsPerBlock: 116 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 14, dataCodewordsPerBlock: 46 },\\n          { numBlocks: 21, dataCodewordsPerBlock: 47 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 29, dataCodewordsPerBlock: 24 },\\n          { numBlocks: 19, dataCodewordsPerBlock: 25 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 11, dataCodewordsPerBlock: 15 },\\n          { numBlocks: 46, dataCodewordsPerBlock: 16 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 141498,\\n    versionNumber: 34,\\n    alignmentPatternCenters: [6, 34, 62, 90, 118, 146],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 13, dataCodewordsPerBlock: 115 },\\n          { numBlocks: 6, dataCodewordsPerBlock: 116 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 14, dataCodewordsPerBlock: 46 },\\n          { numBlocks: 23, dataCodewordsPerBlock: 47 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 44, dataCodewordsPerBlock: 24 },\\n          { numBlocks: 7, dataCodewordsPerBlock: 25 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 59, dataCodewordsPerBlock: 16 },\\n          { numBlocks: 1, dataCodewordsPerBlock: 17 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 145311,\\n    versionNumber: 35,\\n    alignmentPatternCenters: [6, 30, 54, 78, 102, 126, 150],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 12, dataCodewordsPerBlock: 121 },\\n          { numBlocks: 7, dataCodewordsPerBlock: 122 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 12, dataCodewordsPerBlock: 47 },\\n          { numBlocks: 26, dataCodewordsPerBlock: 48 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 39, dataCodewordsPerBlock: 24 },\\n          { numBlocks: 14, dataCodewordsPerBlock: 25 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 22, dataCodewordsPerBlock: 15 },\\n          { numBlocks: 41, dataCodewordsPerBlock: 16 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 150283,\\n    versionNumber: 36,\\n    alignmentPatternCenters: [6, 24, 50, 76, 102, 128, 154],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 6, dataCodewordsPerBlock: 121 },\\n          { numBlocks: 14, dataCodewordsPerBlock: 122 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 6, dataCodewordsPerBlock: 47 },\\n          { numBlocks: 34, dataCodewordsPerBlock: 48 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 46, dataCodewordsPerBlock: 24 },\\n          { numBlocks: 10, dataCodewordsPerBlock: 25 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 2, dataCodewordsPerBlock: 15 },\\n          { numBlocks: 64, dataCodewordsPerBlock: 16 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 152622,\\n    versionNumber: 37,\\n    alignmentPatternCenters: [6, 28, 54, 80, 106, 132, 158],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 17, dataCodewordsPerBlock: 122 },\\n          { numBlocks: 4, dataCodewordsPerBlock: 123 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 29, dataCodewordsPerBlock: 46 },\\n          { numBlocks: 14, dataCodewordsPerBlock: 47 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 49, dataCodewordsPerBlock: 24 },\\n          { numBlocks: 10, dataCodewordsPerBlock: 25 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 24, dataCodewordsPerBlock: 15 },\\n          { numBlocks: 46, dataCodewordsPerBlock: 16 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 158308,\\n    versionNumber: 38,\\n    alignmentPatternCenters: [6, 32, 58, 84, 110, 136, 162],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 4, dataCodewordsPerBlock: 122 },\\n          { numBlocks: 18, dataCodewordsPerBlock: 123 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 13, dataCodewordsPerBlock: 46 },\\n          { numBlocks: 32, dataCodewordsPerBlock: 47 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 48, dataCodewordsPerBlock: 24 },\\n          { numBlocks: 14, dataCodewordsPerBlock: 25 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 42, dataCodewordsPerBlock: 15 },\\n          { numBlocks: 32, dataCodewordsPerBlock: 16 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 161089,\\n    versionNumber: 39,\\n    alignmentPatternCenters: [6, 26, 54, 82, 110, 138, 166],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 20, dataCodewordsPerBlock: 117 },\\n          { numBlocks: 4, dataCodewordsPerBlock: 118 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 40, dataCodewordsPerBlock: 47 },\\n          { numBlocks: 7, dataCodewordsPerBlock: 48 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 43, dataCodewordsPerBlock: 24 },\\n          { numBlocks: 22, dataCodewordsPerBlock: 25 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 10, dataCodewordsPerBlock: 15 },\\n          { numBlocks: 67, dataCodewordsPerBlock: 16 }\\n        ]\\n      }\\n    ]\\n  },\\n  {\\n    infoBits: 167017,\\n    versionNumber: 40,\\n    alignmentPatternCenters: [6, 30, 58, 86, 114, 142, 170],\\n    errorCorrectionLevels: [\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 19, dataCodewordsPerBlock: 118 },\\n          { numBlocks: 6, dataCodewordsPerBlock: 119 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 28,\\n        ecBlocks: [\\n          { numBlocks: 18, dataCodewordsPerBlock: 47 },\\n          { numBlocks: 31, dataCodewordsPerBlock: 48 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 34, dataCodewordsPerBlock: 24 },\\n          { numBlocks: 34, dataCodewordsPerBlock: 25 }\\n        ]\\n      },\\n      {\\n        ecCodewordsPerBlock: 30,\\n        ecBlocks: [\\n          { numBlocks: 20, dataCodewordsPerBlock: 15 },\\n          { numBlocks: 61, dataCodewordsPerBlock: 16 }\\n        ]\\n      }\\n    ]\\n  }\\n];\\nfunction numBitsDiffering(x, y) {\\n  let z = x ^ y;\\n  let bitCount = 0;\\n  while (z) {\\n    bitCount++;\\n    z &= z - 1;\\n  }\\n  return bitCount;\\n}\\nfunction pushBit(bit, byte) {\\n  return byte << 1 | bit;\\n}\\nvar FORMAT_INFO_TABLE = [\\n  { bits: 21522, formatInfo: { errorCorrectionLevel: 1, dataMask: 0 } },\\n  { bits: 20773, formatInfo: { errorCorrectionLevel: 1, dataMask: 1 } },\\n  { bits: 24188, formatInfo: { errorCorrectionLevel: 1, dataMask: 2 } },\\n  { bits: 23371, formatInfo: { errorCorrectionLevel: 1, dataMask: 3 } },\\n  { bits: 17913, formatInfo: { errorCorrectionLevel: 1, dataMask: 4 } },\\n  { bits: 16590, formatInfo: { errorCorrectionLevel: 1, dataMask: 5 } },\\n  { bits: 20375, formatInfo: { errorCorrectionLevel: 1, dataMask: 6 } },\\n  { bits: 19104, formatInfo: { errorCorrectionLevel: 1, dataMask: 7 } },\\n  { bits: 30660, formatInfo: { errorCorrectionLevel: 0, dataMask: 0 } },\\n  { bits: 29427, formatInfo: { errorCorrectionLevel: 0, dataMask: 1 } },\\n  { bits: 32170, formatInfo: { errorCorrectionLevel: 0, dataMask: 2 } },\\n  { bits: 30877, formatInfo: { errorCorrectionLevel: 0, dataMask: 3 } },\\n  { bits: 26159, formatInfo: { errorCorrectionLevel: 0, dataMask: 4 } },\\n  { bits: 25368, formatInfo: { errorCorrectionLevel: 0, dataMask: 5 } },\\n  { bits: 27713, formatInfo: { errorCorrectionLevel: 0, dataMask: 6 } },\\n  { bits: 26998, formatInfo: { errorCorrectionLevel: 0, dataMask: 7 } },\\n  { bits: 5769, formatInfo: { errorCorrectionLevel: 3, dataMask: 0 } },\\n  { bits: 5054, formatInfo: { errorCorrectionLevel: 3, dataMask: 1 } },\\n  { bits: 7399, formatInfo: { errorCorrectionLevel: 3, dataMask: 2 } },\\n  { bits: 6608, formatInfo: { errorCorrectionLevel: 3, dataMask: 3 } },\\n  { bits: 1890, formatInfo: { errorCorrectionLevel: 3, dataMask: 4 } },\\n  { bits: 597, formatInfo: { errorCorrectionLevel: 3, dataMask: 5 } },\\n  { bits: 3340, formatInfo: { errorCorrectionLevel: 3, dataMask: 6 } },\\n  { bits: 2107, formatInfo: { errorCorrectionLevel: 3, dataMask: 7 } },\\n  { bits: 13663, formatInfo: { errorCorrectionLevel: 2, dataMask: 0 } },\\n  { bits: 12392, formatInfo: { errorCorrectionLevel: 2, dataMask: 1 } },\\n  { bits: 16177, formatInfo: { errorCorrectionLevel: 2, dataMask: 2 } },\\n  { bits: 14854, formatInfo: { errorCorrectionLevel: 2, dataMask: 3 } },\\n  { bits: 9396, formatInfo: { errorCorrectionLevel: 2, dataMask: 4 } },\\n  { bits: 8579, formatInfo: { errorCorrectionLevel: 2, dataMask: 5 } },\\n  { bits: 11994, formatInfo: { errorCorrectionLevel: 2, dataMask: 6 } },\\n  { bits: 11245, formatInfo: { errorCorrectionLevel: 2, dataMask: 7 } }\\n];\\nvar DATA_MASKS = [\\n  (p) => (p.y + p.x) % 2 === 0,\\n  (p) => p.y % 2 === 0,\\n  (p) => p.x % 3 === 0,\\n  (p) => (p.y + p.x) % 3 === 0,\\n  (p) => (Math.floor(p.y / 2) + Math.floor(p.x / 3)) % 2 === 0,\\n  (p) => p.x * p.y % 2 + p.x * p.y % 3 === 0,\\n  (p) => (p.y * p.x % 2 + p.y * p.x % 3) % 2 === 0,\\n  (p) => ((p.y + p.x) % 2 + p.y * p.x % 3) % 2 === 0\\n];\\nfunction buildFunctionPatternMask(version) {\\n  const dimension = 17 + 4 * version.versionNumber;\\n  const matrix = BitMatrix.createEmpty(dimension, dimension);\\n  matrix.setRegion(0, 0, 9, 9, true);\\n  matrix.setRegion(dimension - 8, 0, 8, 9, true);\\n  matrix.setRegion(0, dimension - 8, 9, 8, true);\\n  for (const x of version.alignmentPatternCenters) {\\n    for (const y of version.alignmentPatternCenters) {\\n      if (!(x === 6 && y === 6 || x === 6 && y === dimension - 7 || x === dimension - 7 && y === 6)) {\\n        matrix.setRegion(x - 2, y - 2, 5, 5, true);\\n      }\\n    }\\n  }\\n  matrix.setRegion(6, 9, 1, dimension - 17, true);\\n  matrix.setRegion(9, 6, dimension - 17, 1, true);\\n  if (version.versionNumber > 6) {\\n    matrix.setRegion(dimension - 11, 0, 3, 6, true);\\n    matrix.setRegion(0, dimension - 11, 6, 3, true);\\n  }\\n  return matrix;\\n}\\nfunction readCodewords(matrix, version, formatInfo) {\\n  const dataMask = DATA_MASKS[formatInfo.dataMask];\\n  const dimension = matrix.height;\\n  const functionPatternMask = buildFunctionPatternMask(version);\\n  const codewords = [];\\n  let currentByte = 0;\\n  let bitsRead = 0;\\n  let readingUp = true;\\n  for (let columnIndex = dimension - 1; columnIndex > 0; columnIndex -= 2) {\\n    if (columnIndex === 6) {\\n      columnIndex--;\\n    }\\n    for (let i = 0; i < dimension; i++) {\\n      const y = readingUp ? dimension - 1 - i : i;\\n      for (let columnOffset = 0; columnOffset < 2; columnOffset++) {\\n        const x = columnIndex - columnOffset;\\n        if (!functionPatternMask.get(x, y)) {\\n          bitsRead++;\\n          let bit = matrix.get(x, y);\\n          if (dataMask({ y, x })) {\\n            bit = !bit;\\n          }\\n          currentByte = pushBit(bit, currentByte);\\n          if (bitsRead === 8) {\\n            codewords.push(currentByte);\\n            bitsRead = 0;\\n            currentByte = 0;\\n          }\\n        }\\n      }\\n    }\\n    readingUp = !readingUp;\\n  }\\n  return codewords;\\n}\\nfunction readVersion(matrix) {\\n  const dimension = matrix.height;\\n  const provisionalVersion = Math.floor((dimension - 17) / 4);\\n  if (provisionalVersion <= 6) {\\n    return VERSIONS[provisionalVersion - 1];\\n  }\\n  let topRightVersionBits = 0;\\n  for (let y = 5; y >= 0; y--) {\\n    for (let x = dimension - 9; x >= dimension - 11; x--) {\\n      topRightVersionBits = pushBit(matrix.get(x, y), topRightVersionBits);\\n    }\\n  }\\n  let bottomLeftVersionBits = 0;\\n  for (let x = 5; x >= 0; x--) {\\n    for (let y = dimension - 9; y >= dimension - 11; y--) {\\n      bottomLeftVersionBits = pushBit(matrix.get(x, y), bottomLeftVersionBits);\\n    }\\n  }\\n  let bestDifference = Infinity;\\n  let bestVersion;\\n  for (const version of VERSIONS) {\\n    if (version.infoBits === topRightVersionBits || version.infoBits === bottomLeftVersionBits) {\\n      return version;\\n    }\\n    let difference = numBitsDiffering(topRightVersionBits, version.infoBits);\\n    if (difference < bestDifference) {\\n      bestVersion = version;\\n      bestDifference = difference;\\n    }\\n    difference = numBitsDiffering(bottomLeftVersionBits, version.infoBits);\\n    if (difference < bestDifference) {\\n      bestVersion = version;\\n      bestDifference = difference;\\n    }\\n  }\\n  if (bestDifference <= 3) {\\n    return bestVersion;\\n  }\\n}\\nfunction readFormatInformation(matrix) {\\n  let topLeftFormatInfoBits = 0;\\n  for (let x = 0; x <= 8; x++) {\\n    if (x !== 6) {\\n      topLeftFormatInfoBits = pushBit(matrix.get(x, 8), topLeftFormatInfoBits);\\n    }\\n  }\\n  for (let y = 7; y >= 0; y--) {\\n    if (y !== 6) {\\n      topLeftFormatInfoBits = pushBit(matrix.get(8, y), topLeftFormatInfoBits);\\n    }\\n  }\\n  const dimension = matrix.height;\\n  let topRightBottomRightFormatInfoBits = 0;\\n  for (let y = dimension - 1; y >= dimension - 7; y--) {\\n    topRightBottomRightFormatInfoBits = pushBit(matrix.get(8, y), topRightBottomRightFormatInfoBits);\\n  }\\n  for (let x = dimension - 8; x < dimension; x++) {\\n    topRightBottomRightFormatInfoBits = pushBit(matrix.get(x, 8), topRightBottomRightFormatInfoBits);\\n  }\\n  let bestDifference = Infinity;\\n  let bestFormatInfo = null;\\n  for (const { bits, formatInfo } of FORMAT_INFO_TABLE) {\\n    if (bits === topLeftFormatInfoBits || bits === topRightBottomRightFormatInfoBits) {\\n      return formatInfo;\\n    }\\n    let difference = numBitsDiffering(topLeftFormatInfoBits, bits);\\n    if (difference < bestDifference) {\\n      bestFormatInfo = formatInfo;\\n      bestDifference = difference;\\n    }\\n    if (topLeftFormatInfoBits !== topRightBottomRightFormatInfoBits) {\\n      difference = numBitsDiffering(topRightBottomRightFormatInfoBits, bits);\\n      if (difference < bestDifference) {\\n        bestFormatInfo = formatInfo;\\n        bestDifference = difference;\\n      }\\n    }\\n  }\\n  if (bestDifference <= 3) {\\n    return bestFormatInfo;\\n  }\\n  return null;\\n}\\nfunction getDataBlocks(codewords, version, ecLevel) {\\n  const ecInfo = version.errorCorrectionLevels[ecLevel];\\n  const dataBlocks = [];\\n  let totalCodewords = 0;\\n  ecInfo.ecBlocks.forEach((block) => {\\n    for (let i = 0; i < block.numBlocks; i++) {\\n      dataBlocks.push({ numDataCodewords: block.dataCodewordsPerBlock, codewords: [] });\\n      totalCodewords += block.dataCodewordsPerBlock + ecInfo.ecCodewordsPerBlock;\\n    }\\n  });\\n  if (codewords.length < totalCodewords) {\\n    return null;\\n  }\\n  codewords = codewords.slice(0, totalCodewords);\\n  const shortBlockSize = ecInfo.ecBlocks[0].dataCodewordsPerBlock;\\n  for (let i = 0; i < shortBlockSize; i++) {\\n    for (const dataBlock of dataBlocks) {\\n      dataBlock.codewords.push(codewords.shift());\\n    }\\n  }\\n  if (ecInfo.ecBlocks.length > 1) {\\n    const smallBlockCount = ecInfo.ecBlocks[0].numBlocks;\\n    const largeBlockCount = ecInfo.ecBlocks[1].numBlocks;\\n    for (let i = 0; i < largeBlockCount; i++) {\\n      dataBlocks[smallBlockCount + i].codewords.push(codewords.shift());\\n    }\\n  }\\n  while (codewords.length > 0) {\\n    for (const dataBlock of dataBlocks) {\\n      dataBlock.codewords.push(codewords.shift());\\n    }\\n  }\\n  return dataBlocks;\\n}\\nfunction decodeMatrix(matrix) {\\n  const version = readVersion(matrix);\\n  if (!version) {\\n    return null;\\n  }\\n  const formatInfo = readFormatInformation(matrix);\\n  if (!formatInfo) {\\n    return null;\\n  }\\n  const codewords = readCodewords(matrix, version, formatInfo);\\n  const dataBlocks = getDataBlocks(codewords, version, formatInfo.errorCorrectionLevel);\\n  if (!dataBlocks) {\\n    return null;\\n  }\\n  const totalBytes = dataBlocks.reduce((a, b) => a + b.numDataCodewords, 0);\\n  const resultBytes = new Uint8ClampedArray(totalBytes);\\n  let resultIndex = 0;\\n  for (const dataBlock of dataBlocks) {\\n    const correctedBytes = decode$1(dataBlock.codewords, dataBlock.codewords.length - dataBlock.numDataCodewords);\\n    if (!correctedBytes) {\\n      return null;\\n    }\\n    for (let i = 0; i < dataBlock.numDataCodewords; i++) {\\n      resultBytes[resultIndex++] = correctedBytes[i];\\n    }\\n  }\\n  try {\\n    return decode$2(resultBytes, version.versionNumber);\\n  } catch (_a) {\\n    return null;\\n  }\\n}\\nfunction decode(matrix) {\\n  if (matrix == null) {\\n    return null;\\n  }\\n  const result = decodeMatrix(matrix);\\n  if (result) {\\n    return result;\\n  }\\n  for (let x = 0; x < matrix.width; x++) {\\n    for (let y = x + 1; y < matrix.height; y++) {\\n      if (matrix.get(x, y) !== matrix.get(y, x)) {\\n        matrix.set(x, y, !matrix.get(x, y));\\n        matrix.set(y, x, !matrix.get(y, x));\\n      }\\n    }\\n  }\\n  return decodeMatrix(matrix);\\n}\\nfunction squareToQuadrilateral(p1, p2, p3, p4) {\\n  const dx3 = p1.x - p2.x + p3.x - p4.x;\\n  const dy3 = p1.y - p2.y + p3.y - p4.y;\\n  if (dx3 === 0 && dy3 === 0) {\\n    return {\\n      a11: p2.x - p1.x,\\n      a12: p2.y - p1.y,\\n      a13: 0,\\n      a21: p3.x - p2.x,\\n      a22: p3.y - p2.y,\\n      a23: 0,\\n      a31: p1.x,\\n      a32: p1.y,\\n      a33: 1\\n    };\\n  } else {\\n    const dx1 = p2.x - p3.x;\\n    const dx2 = p4.x - p3.x;\\n    const dy1 = p2.y - p3.y;\\n    const dy2 = p4.y - p3.y;\\n    const denominator = dx1 * dy2 - dx2 * dy1;\\n    const a13 = (dx3 * dy2 - dx2 * dy3) / denominator;\\n    const a23 = (dx1 * dy3 - dx3 * dy1) / denominator;\\n    return {\\n      a11: p2.x - p1.x + a13 * p2.x,\\n      a12: p2.y - p1.y + a13 * p2.y,\\n      a13,\\n      a21: p4.x - p1.x + a23 * p4.x,\\n      a22: p4.y - p1.y + a23 * p4.y,\\n      a23,\\n      a31: p1.x,\\n      a32: p1.y,\\n      a33: 1\\n    };\\n  }\\n}\\nfunction quadrilateralToSquare(p1, p2, p3, p4) {\\n  const sToQ = squareToQuadrilateral(p1, p2, p3, p4);\\n  return {\\n    a11: sToQ.a22 * sToQ.a33 - sToQ.a23 * sToQ.a32,\\n    a12: sToQ.a13 * sToQ.a32 - sToQ.a12 * sToQ.a33,\\n    a13: sToQ.a12 * sToQ.a23 - sToQ.a13 * sToQ.a22,\\n    a21: sToQ.a23 * sToQ.a31 - sToQ.a21 * sToQ.a33,\\n    a22: sToQ.a11 * sToQ.a33 - sToQ.a13 * sToQ.a31,\\n    a23: sToQ.a13 * sToQ.a21 - sToQ.a11 * sToQ.a23,\\n    a31: sToQ.a21 * sToQ.a32 - sToQ.a22 * sToQ.a31,\\n    a32: sToQ.a12 * sToQ.a31 - sToQ.a11 * sToQ.a32,\\n    a33: sToQ.a11 * sToQ.a22 - sToQ.a12 * sToQ.a21\\n  };\\n}\\nfunction times(a, b) {\\n  return {\\n    a11: a.a11 * b.a11 + a.a21 * b.a12 + a.a31 * b.a13,\\n    a12: a.a12 * b.a11 + a.a22 * b.a12 + a.a32 * b.a13,\\n    a13: a.a13 * b.a11 + a.a23 * b.a12 + a.a33 * b.a13,\\n    a21: a.a11 * b.a21 + a.a21 * b.a22 + a.a31 * b.a23,\\n    a22: a.a12 * b.a21 + a.a22 * b.a22 + a.a32 * b.a23,\\n    a23: a.a13 * b.a21 + a.a23 * b.a22 + a.a33 * b.a23,\\n    a31: a.a11 * b.a31 + a.a21 * b.a32 + a.a31 * b.a33,\\n    a32: a.a12 * b.a31 + a.a22 * b.a32 + a.a32 * b.a33,\\n    a33: a.a13 * b.a31 + a.a23 * b.a32 + a.a33 * b.a33\\n  };\\n}\\nfunction extract(image, location) {\\n  const qToS = quadrilateralToSquare({ x: 3.5, y: 3.5 }, { x: location.dimension - 3.5, y: 3.5 }, { x: location.dimension - 6.5, y: location.dimension - 6.5 }, { x: 3.5, y: location.dimension - 3.5 });\\n  const sToQ = squareToQuadrilateral(location.topLeft, location.topRight, location.alignmentPattern, location.bottomLeft);\\n  const transform = times(sToQ, qToS);\\n  const matrix = BitMatrix.createEmpty(location.dimension, location.dimension);\\n  const mappingFunction = (x, y) => {\\n    const denominator = transform.a13 * x + transform.a23 * y + transform.a33;\\n    return {\\n      x: (transform.a11 * x + transform.a21 * y + transform.a31) / denominator,\\n      y: (transform.a12 * x + transform.a22 * y + transform.a32) / denominator\\n    };\\n  };\\n  for (let y = 0; y < location.dimension; y++) {\\n    for (let x = 0; x < location.dimension; x++) {\\n      const xValue = x + 0.5;\\n      const yValue = y + 0.5;\\n      const sourcePixel = mappingFunction(xValue, yValue);\\n      matrix.set(x, y, image.get(Math.floor(sourcePixel.x), Math.floor(sourcePixel.y)));\\n    }\\n  }\\n  return {\\n    matrix,\\n    mappingFunction\\n  };\\n}\\nvar MAX_FINDERPATTERNS_TO_SEARCH = 5;\\nvar MIN_QUAD_RATIO = 0.5;\\nvar MAX_QUAD_RATIO = 1.5;\\nvar distance = (a, b) => Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\\nfunction sum(values) {\\n  return values.reduce((a, b) => a + b);\\n}\\nfunction reorderFinderPatterns(pattern1, pattern2, pattern3) {\\n  const oneTwoDistance = distance(pattern1, pattern2);\\n  const twoThreeDistance = distance(pattern2, pattern3);\\n  const oneThreeDistance = distance(pattern1, pattern3);\\n  let bottomLeft;\\n  let topLeft;\\n  let topRight;\\n  if (twoThreeDistance >= oneTwoDistance && twoThreeDistance >= oneThreeDistance) {\\n    [bottomLeft, topLeft, topRight] = [pattern2, pattern1, pattern3];\\n  } else if (oneThreeDistance >= twoThreeDistance && oneThreeDistance >= oneTwoDistance) {\\n    [bottomLeft, topLeft, topRight] = [pattern1, pattern2, pattern3];\\n  } else {\\n    [bottomLeft, topLeft, topRight] = [pattern1, pattern3, pattern2];\\n  }\\n  if ((topRight.x - topLeft.x) * (bottomLeft.y - topLeft.y) - (topRight.y - topLeft.y) * (bottomLeft.x - topLeft.x) < 0) {\\n    [bottomLeft, topRight] = [topRight, bottomLeft];\\n  }\\n  return { bottomLeft, topLeft, topRight };\\n}\\nfunction computeDimension(topLeft, topRight, bottomLeft, matrix) {\\n  const moduleSize = (sum(countBlackWhiteRun(topLeft, bottomLeft, matrix, 5)) / 7 + sum(countBlackWhiteRun(topLeft, topRight, matrix, 5)) / 7 + sum(countBlackWhiteRun(bottomLeft, topLeft, matrix, 5)) / 7 + sum(countBlackWhiteRun(topRight, topLeft, matrix, 5)) / 7) / 4;\\n  if (moduleSize < 1) {\\n    throw new Error(\\\"Invalid module size\\\");\\n  }\\n  const topDimension = Math.round(distance(topLeft, topRight) / moduleSize);\\n  const sideDimension = Math.round(distance(topLeft, bottomLeft) / moduleSize);\\n  let dimension = Math.floor((topDimension + sideDimension) / 2) + 7;\\n  switch (dimension % 4) {\\n    case 0:\\n      dimension++;\\n      break;\\n    case 2:\\n      dimension--;\\n      break;\\n  }\\n  return { dimension, moduleSize };\\n}\\nfunction countBlackWhiteRunTowardsPoint(origin, end, matrix, length) {\\n  const switchPoints = [{ x: Math.floor(origin.x), y: Math.floor(origin.y) }];\\n  const steep = Math.abs(end.y - origin.y) > Math.abs(end.x - origin.x);\\n  let fromX;\\n  let fromY;\\n  let toX;\\n  let toY;\\n  if (steep) {\\n    fromX = Math.floor(origin.y);\\n    fromY = Math.floor(origin.x);\\n    toX = Math.floor(end.y);\\n    toY = Math.floor(end.x);\\n  } else {\\n    fromX = Math.floor(origin.x);\\n    fromY = Math.floor(origin.y);\\n    toX = Math.floor(end.x);\\n    toY = Math.floor(end.y);\\n  }\\n  const dx = Math.abs(toX - fromX);\\n  const dy = Math.abs(toY - fromY);\\n  let error = Math.floor(-dx / 2);\\n  const xStep = fromX < toX ? 1 : -1;\\n  const yStep = fromY < toY ? 1 : -1;\\n  let currentPixel = true;\\n  for (let x = fromX, y = fromY; x !== toX + xStep; x += xStep) {\\n    const realX = steep ? y : x;\\n    const realY = steep ? x : y;\\n    if (matrix.get(realX, realY) !== currentPixel) {\\n      currentPixel = !currentPixel;\\n      switchPoints.push({ x: realX, y: realY });\\n      if (switchPoints.length === length + 1) {\\n        break;\\n      }\\n    }\\n    error += dy;\\n    if (error > 0) {\\n      if (y === toY) {\\n        break;\\n      }\\n      y += yStep;\\n      error -= dx;\\n    }\\n  }\\n  const distances = [];\\n  for (let i = 0; i < length; i++) {\\n    if (switchPoints[i] && switchPoints[i + 1]) {\\n      distances.push(distance(switchPoints[i], switchPoints[i + 1]));\\n    } else {\\n      distances.push(0);\\n    }\\n  }\\n  return distances;\\n}\\nfunction countBlackWhiteRun(origin, end, matrix, length) {\\n  const rise = end.y - origin.y;\\n  const run = end.x - origin.x;\\n  const towardsEnd = countBlackWhiteRunTowardsPoint(origin, end, matrix, Math.ceil(length / 2));\\n  const awayFromEnd = countBlackWhiteRunTowardsPoint(origin, { x: origin.x - run, y: origin.y - rise }, matrix, Math.ceil(length / 2));\\n  const middleValue = towardsEnd.shift() + awayFromEnd.shift() - 1;\\n  return awayFromEnd.concat(middleValue).concat(...towardsEnd);\\n}\\nfunction scoreBlackWhiteRun(sequence, ratios) {\\n  const averageSize = sum(sequence) / sum(ratios);\\n  let error = 0;\\n  ratios.forEach((ratio, i) => {\\n    error += Math.pow(sequence[i] - ratio * averageSize, 2);\\n  });\\n  return { averageSize, error };\\n}\\nfunction scorePattern(point, ratios, matrix) {\\n  try {\\n    const horizontalRun = countBlackWhiteRun(point, { x: -1, y: point.y }, matrix, ratios.length);\\n    const verticalRun = countBlackWhiteRun(point, { x: point.x, y: -1 }, matrix, ratios.length);\\n    const topLeftPoint = {\\n      x: Math.max(0, point.x - point.y) - 1,\\n      y: Math.max(0, point.y - point.x) - 1\\n    };\\n    const topLeftBottomRightRun = countBlackWhiteRun(point, topLeftPoint, matrix, ratios.length);\\n    const bottomLeftPoint = {\\n      x: Math.min(matrix.width, point.x + point.y) + 1,\\n      y: Math.min(matrix.height, point.y + point.x) + 1\\n    };\\n    const bottomLeftTopRightRun = countBlackWhiteRun(point, bottomLeftPoint, matrix, ratios.length);\\n    const horzError = scoreBlackWhiteRun(horizontalRun, ratios);\\n    const vertError = scoreBlackWhiteRun(verticalRun, ratios);\\n    const diagDownError = scoreBlackWhiteRun(topLeftBottomRightRun, ratios);\\n    const diagUpError = scoreBlackWhiteRun(bottomLeftTopRightRun, ratios);\\n    const ratioError = Math.sqrt(horzError.error * horzError.error + vertError.error * vertError.error + diagDownError.error * diagDownError.error + diagUpError.error * diagUpError.error);\\n    const avgSize = (horzError.averageSize + vertError.averageSize + diagDownError.averageSize + diagUpError.averageSize) / 4;\\n    const sizeError = (Math.pow(horzError.averageSize - avgSize, 2) + Math.pow(vertError.averageSize - avgSize, 2) + Math.pow(diagDownError.averageSize - avgSize, 2) + Math.pow(diagUpError.averageSize - avgSize, 2)) / avgSize;\\n    return ratioError + sizeError;\\n  } catch (_a) {\\n    return Infinity;\\n  }\\n}\\nfunction recenterLocation(matrix, p) {\\n  let leftX = Math.round(p.x);\\n  while (matrix.get(leftX, Math.round(p.y))) {\\n    leftX--;\\n  }\\n  let rightX = Math.round(p.x);\\n  while (matrix.get(rightX, Math.round(p.y))) {\\n    rightX++;\\n  }\\n  const x = (leftX + rightX) / 2;\\n  let topY = Math.round(p.y);\\n  while (matrix.get(Math.round(x), topY)) {\\n    topY--;\\n  }\\n  let bottomY = Math.round(p.y);\\n  while (matrix.get(Math.round(x), bottomY)) {\\n    bottomY++;\\n  }\\n  const y = (topY + bottomY) / 2;\\n  return { x, y };\\n}\\nfunction locate(matrix) {\\n  const finderPatternQuads = [];\\n  let activeFinderPatternQuads = [];\\n  const alignmentPatternQuads = [];\\n  let activeAlignmentPatternQuads = [];\\n  for (let y = 0; y <= matrix.height; y++) {\\n    let length = 0;\\n    let lastBit = false;\\n    let scans = [0, 0, 0, 0, 0];\\n    for (let x = -1; x <= matrix.width; x++) {\\n      const v = matrix.get(x, y);\\n      if (v === lastBit) {\\n        length++;\\n      } else {\\n        scans = [scans[1], scans[2], scans[3], scans[4], length];\\n        length = 1;\\n        lastBit = v;\\n        const averageFinderPatternBlocksize = sum(scans) / 7;\\n        const validFinderPattern = Math.abs(scans[0] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize && Math.abs(scans[1] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize && Math.abs(scans[2] - 3 * averageFinderPatternBlocksize) < 3 * averageFinderPatternBlocksize && Math.abs(scans[3] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize && Math.abs(scans[4] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize && !v;\\n        const averageAlignmentPatternBlocksize = sum(scans.slice(-3)) / 3;\\n        const validAlignmentPattern = Math.abs(scans[2] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize && Math.abs(scans[3] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize && Math.abs(scans[4] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize && v;\\n        if (validFinderPattern) {\\n          const endX = x - scans[3] - scans[4];\\n          const startX = endX - scans[2];\\n          const line = { startX, endX, y };\\n          const matchingQuads = activeFinderPatternQuads.filter((q) => startX >= q.bottom.startX && startX <= q.bottom.endX || endX >= q.bottom.startX && startX <= q.bottom.endX || startX <= q.bottom.startX && endX >= q.bottom.endX && (scans[2] / (q.bottom.endX - q.bottom.startX) < MAX_QUAD_RATIO && scans[2] / (q.bottom.endX - q.bottom.startX) > MIN_QUAD_RATIO));\\n          if (matchingQuads.length > 0) {\\n            matchingQuads[0].bottom = line;\\n          } else {\\n            activeFinderPatternQuads.push({ top: line, bottom: line });\\n          }\\n        }\\n        if (validAlignmentPattern) {\\n          const endX = x - scans[4];\\n          const startX = endX - scans[3];\\n          const line = { startX, y, endX };\\n          const matchingQuads = activeAlignmentPatternQuads.filter((q) => startX >= q.bottom.startX && startX <= q.bottom.endX || endX >= q.bottom.startX && startX <= q.bottom.endX || startX <= q.bottom.startX && endX >= q.bottom.endX && (scans[2] / (q.bottom.endX - q.bottom.startX) < MAX_QUAD_RATIO && scans[2] / (q.bottom.endX - q.bottom.startX) > MIN_QUAD_RATIO));\\n          if (matchingQuads.length > 0) {\\n            matchingQuads[0].bottom = line;\\n          } else {\\n            activeAlignmentPatternQuads.push({ top: line, bottom: line });\\n          }\\n        }\\n      }\\n    }\\n    finderPatternQuads.push(...activeFinderPatternQuads.filter((q) => q.bottom.y !== y && q.bottom.y - q.top.y >= 2));\\n    activeFinderPatternQuads = activeFinderPatternQuads.filter((q) => q.bottom.y === y);\\n    alignmentPatternQuads.push(...activeAlignmentPatternQuads.filter((q) => q.bottom.y !== y));\\n    activeAlignmentPatternQuads = activeAlignmentPatternQuads.filter((q) => q.bottom.y === y);\\n  }\\n  finderPatternQuads.push(...activeFinderPatternQuads.filter((q) => q.bottom.y - q.top.y >= 2));\\n  alignmentPatternQuads.push(...activeAlignmentPatternQuads);\\n  const scoredFinderPatternPositions = [];\\n  for (const quad of finderPatternQuads) {\\n    if (quad.bottom.y - quad.top.y < 2) {\\n      continue;\\n    }\\n    const x = (quad.top.startX + quad.top.endX + quad.bottom.startX + quad.bottom.endX) / 4;\\n    const y = (quad.top.y + quad.bottom.y + 1) / 2;\\n    if (!matrix.get(Math.round(x), Math.round(y))) {\\n      continue;\\n    }\\n    const lengths = [quad.top.endX - quad.top.startX, quad.bottom.endX - quad.bottom.startX, quad.bottom.y - quad.top.y + 1];\\n    const size = sum(lengths) / lengths.length;\\n    const score = scorePattern({ x: Math.round(x), y: Math.round(y) }, [1, 1, 3, 1, 1], matrix);\\n    scoredFinderPatternPositions.push({ score, x, y, size });\\n  }\\n  if (scoredFinderPatternPositions.length < 3) {\\n    return null;\\n  }\\n  scoredFinderPatternPositions.sort((a, b) => a.score - b.score);\\n  const finderPatternGroups = [];\\n  for (let i = 0; i < Math.min(scoredFinderPatternPositions.length, MAX_FINDERPATTERNS_TO_SEARCH); ++i) {\\n    const point = scoredFinderPatternPositions[i];\\n    const otherPoints = [];\\n    for (const otherPoint of scoredFinderPatternPositions) {\\n      if (otherPoint === point) {\\n        continue;\\n      }\\n      otherPoints.push(Object.assign(Object.assign({}, otherPoint), { score: otherPoint.score + Math.pow(otherPoint.size - point.size, 2) / point.size }));\\n    }\\n    otherPoints.sort((a, b) => a.score - b.score);\\n    finderPatternGroups.push({\\n      points: [point, otherPoints[0], otherPoints[1]],\\n      score: point.score + otherPoints[0].score + otherPoints[1].score\\n    });\\n  }\\n  finderPatternGroups.sort((a, b) => a.score - b.score);\\n  const bestFinderPatternGroup = finderPatternGroups[0];\\n  const { topRight, topLeft, bottomLeft } = reorderFinderPatterns(...bestFinderPatternGroup.points);\\n  const alignment = findAlignmentPattern(matrix, alignmentPatternQuads, topRight, topLeft, bottomLeft);\\n  const result = [];\\n  if (alignment) {\\n    result.push({\\n      alignmentPattern: { x: alignment.alignmentPattern.x, y: alignment.alignmentPattern.y },\\n      bottomLeft: { x: bottomLeft.x, y: bottomLeft.y },\\n      dimension: alignment.dimension,\\n      topLeft: { x: topLeft.x, y: topLeft.y },\\n      topRight: { x: topRight.x, y: topRight.y }\\n    });\\n  }\\n  const midTopRight = recenterLocation(matrix, topRight);\\n  const midTopLeft = recenterLocation(matrix, topLeft);\\n  const midBottomLeft = recenterLocation(matrix, bottomLeft);\\n  const centeredAlignment = findAlignmentPattern(matrix, alignmentPatternQuads, midTopRight, midTopLeft, midBottomLeft);\\n  if (centeredAlignment) {\\n    result.push({\\n      alignmentPattern: { x: centeredAlignment.alignmentPattern.x, y: centeredAlignment.alignmentPattern.y },\\n      bottomLeft: { x: midBottomLeft.x, y: midBottomLeft.y },\\n      topLeft: { x: midTopLeft.x, y: midTopLeft.y },\\n      topRight: { x: midTopRight.x, y: midTopRight.y },\\n      dimension: centeredAlignment.dimension\\n    });\\n  }\\n  if (result.length === 0) {\\n    return null;\\n  }\\n  return result;\\n}\\nfunction findAlignmentPattern(matrix, alignmentPatternQuads, topRight, topLeft, bottomLeft) {\\n  let dimension;\\n  let moduleSize;\\n  try {\\n    ({ dimension, moduleSize } = computeDimension(topLeft, topRight, bottomLeft, matrix));\\n  } catch (e) {\\n    return null;\\n  }\\n  const bottomRightFinderPattern = {\\n    x: topRight.x - topLeft.x + bottomLeft.x,\\n    y: topRight.y - topLeft.y + bottomLeft.y\\n  };\\n  const modulesBetweenFinderPatterns = (distance(topLeft, bottomLeft) + distance(topLeft, topRight)) / 2 / moduleSize;\\n  const correctionToTopLeft = 1 - 3 / modulesBetweenFinderPatterns;\\n  const expectedAlignmentPattern = {\\n    x: topLeft.x + correctionToTopLeft * (bottomRightFinderPattern.x - topLeft.x),\\n    y: topLeft.y + correctionToTopLeft * (bottomRightFinderPattern.y - topLeft.y)\\n  };\\n  const alignmentPatterns = alignmentPatternQuads.map((q) => {\\n    const x = (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) / 4;\\n    const y = (q.top.y + q.bottom.y + 1) / 2;\\n    if (!matrix.get(Math.floor(x), Math.floor(y))) {\\n      return;\\n    }\\n    const sizeScore = scorePattern({ x: Math.floor(x), y: Math.floor(y) }, [1, 1, 1], matrix);\\n    const score = sizeScore + distance({ x, y }, expectedAlignmentPattern);\\n    return { x, y, score };\\n  }).filter((v) => !!v).sort((a, b) => a.score - b.score);\\n  const alignmentPattern = modulesBetweenFinderPatterns >= 15 && alignmentPatterns.length ? alignmentPatterns[0] : expectedAlignmentPattern;\\n  return { alignmentPattern, dimension };\\n}\\nfunction scan(matrix) {\\n  const locations = locate(matrix);\\n  if (!locations) {\\n    return null;\\n  }\\n  for (const location of locations) {\\n    const extracted = extract(matrix, location);\\n    const decoded = decode(extracted.matrix);\\n    if (decoded) {\\n      return {\\n        binaryData: decoded.bytes,\\n        data: decoded.text,\\n        chunks: decoded.chunks,\\n        version: decoded.version,\\n        location: {\\n          topRightCorner: extracted.mappingFunction(location.dimension, 0),\\n          topLeftCorner: extracted.mappingFunction(0, 0),\\n          bottomRightCorner: extracted.mappingFunction(location.dimension, location.dimension),\\n          bottomLeftCorner: extracted.mappingFunction(0, location.dimension),\\n          topRightFinderPattern: location.topRight,\\n          topLeftFinderPattern: location.topLeft,\\n          bottomLeftFinderPattern: location.bottomLeft,\\n          bottomRightAlignmentPattern: location.alignmentPattern\\n        },\\n        matrix: extracted.matrix\\n      };\\n    }\\n  }\\n  return null;\\n}\\nvar defaultOptions = {\\n  inversionAttempts: \\\"attemptBoth\\\",\\n  greyScaleWeights: {\\n    red: 0.2126,\\n    green: 0.7152,\\n    blue: 0.0722,\\n    useIntegerApproximation: false\\n  },\\n  canOverwriteImage: true\\n};\\nfunction mergeObject(target, src) {\\n  Object.keys(src).forEach((opt) => {\\n    target[opt] = src[opt];\\n  });\\n}\\nfunction jsQR(data, width, height, providedOptions = {}) {\\n  const options = /* @__PURE__ */ Object.create(null);\\n  mergeObject(options, defaultOptions);\\n  mergeObject(options, providedOptions);\\n  const tryInvertedFirst = options.inversionAttempts === \\\"onlyInvert\\\" || options.inversionAttempts === \\\"invertFirst\\\";\\n  const shouldInvert = options.inversionAttempts === \\\"attemptBoth\\\" || tryInvertedFirst;\\n  const { binarized, inverted } = binarize(data, width, height, shouldInvert, options.greyScaleWeights, options.canOverwriteImage);\\n  let result = scan(tryInvertedFirst ? inverted : binarized);\\n  if (!result && (options.inversionAttempts === \\\"attemptBoth\\\" || options.inversionAttempts === \\\"invertFirst\\\")) {\\n    result = scan(tryInvertedFirst ? binarized : inverted);\\n  }\\n  return result;\\n}\\njsQR.default = jsQR;\\n\\n// src/scan-qr-widget.ts\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\nvar ScanQRWidget = class extends Widget {\\n  refresh(_changedTiddlers) {\\n    return false;\\n  }\\n  loopId = 0;\\n  render(parent, _nextSibling) {\\n    this.parentDomNode = parent;\\n    this.execute();\\n    const outputTiddlerTitle = this.getAttribute(\\\"outputTiddlerTitle\\\");\\n    const containerElement = document.createElement(\\\"div\\\");\\n    containerElement.innerHTML = `\\n    <div>\\n      <div id=\\\"scan-qr-widget-loadingMessage\\\">\\\\u{1F3A5} Unable to access video stream (please make sure you have a webcam enabled)</div>\\n      <canvas id=\\\"scan-qr-widget-canvas\\\" hidden></canvas>\\n      <div id=\\\"scan-qr-widget-output\\\" hidden>\\n        <div id=\\\"scan-qr-widget-outputMessage\\\">No QR code detected.</div>\\n        <div hidden><b>Data:</b> <span id=\\\"scan-qr-widget-outputData\\\"></span></div>\\n      </div>\\n    </div>\\n    `;\\n    this.domNodes.push(containerElement);\\n    this.loopId += 1;\\n    const loopId = this.loopId;\\n    requestAnimationFrame(() => this.jsqr(loopId, containerElement, outputTiddlerTitle));\\n    parent.appendChild(containerElement);\\n  }\\n  async jsqr(loopId, containerElement, outputTiddlerTitle) {\\n    let video = document.createElement(\\\"video\\\");\\n    let canvasElement = document.getElementById(\\\"scan-qr-widget-canvas\\\");\\n    if (!canvasElement) {\\n      console.warn(\\\"ScanQRWidget: canvasElement is null\\\");\\n      return;\\n    }\\n    let canvas = canvasElement.getContext(\\\"2d\\\");\\n    let loadingMessage = document.getElementById(\\\"scan-qr-widget-loadingMessage\\\");\\n    let outputContainer = document.getElementById(\\\"scan-qr-widget-output\\\");\\n    let outputMessage = document.getElementById(\\\"scan-qr-widget-outputMessage\\\");\\n    let outputData = document.getElementById(\\\"scan-qr-widget-outputData\\\");\\n    if (!canvas || !outputData) {\\n      console.warn(\\\"ScanQRWidget: canvas or outputData is null\\\", { canvas, outputData });\\n      return;\\n    }\\n    const stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: \\\"environment\\\" } });\\n    function drawLine(begin, end, color) {\\n      if (!canvas) {\\n        return;\\n      }\\n      canvas.beginPath();\\n      canvas.moveTo(begin.x, begin.y);\\n      canvas.lineTo(end.x, end.y);\\n      canvas.lineWidth = 4;\\n      canvas.strokeStyle = color;\\n      canvas.stroke();\\n    }\\n    let lastResult;\\n    const tick = () => {\\n      if (!loadingMessage || !canvasElement || !outputContainer || !canvas || !outputMessage || !outputData || !outputData.parentElement) {\\n        console.warn(\\\"ScanQRWidget: !loadingMessage || !canvasElement || !outputContainer || !canvas || !outputMessage || !outputData || !outputData.parentElement, it is null\\\", {\\n          loadingMessage,\\n          canvasElement,\\n          outputContainer,\\n          canvas,\\n          outputMessage,\\n          outputData,\\n          \\\"outputData.parentElement\\\": outputData && outputData.parentElement\\n        });\\n        return;\\n      }\\n      loadingMessage.innerText = \\\"\\\\u231B Loading video...\\\";\\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\\n        loadingMessage.hidden = true;\\n        canvasElement.hidden = false;\\n        outputContainer.hidden = false;\\n        canvasElement.height = video.videoHeight;\\n        canvasElement.width = video.videoWidth;\\n        canvas.drawImage(video, 0, 0, canvasElement.width, canvasElement.height);\\n        let imageData = canvas.getImageData(0, 0, canvasElement.width, canvasElement.height);\\n        let code = jsQR(imageData.data, imageData.width, imageData.height, {\\n          inversionAttempts: \\\"dontInvert\\\"\\n        });\\n        outputMessage.hidden = true;\\n        outputData.parentElement.hidden = false;\\n        let result;\\n        if (code) {\\n          drawLine(code.location.topLeftCorner, code.location.topRightCorner, \\\"#FF3B58\\\");\\n          drawLine(code.location.topRightCorner, code.location.bottomRightCorner, \\\"#FF3B58\\\");\\n          drawLine(code.location.bottomRightCorner, code.location.bottomLeftCorner, \\\"#FF3B58\\\");\\n          drawLine(code.location.bottomLeftCorner, code.location.topLeftCorner, \\\"#FF3B58\\\");\\n          result = code.data;\\n        } else {\\n          result = \\\"No code detected\\\";\\n        }\\n        if (result !== lastResult) {\\n          outputData.innerText += result + \\\"\\\\n\\\";\\n          lastResult = result;\\n          if (outputTiddlerTitle && result.includes(\\\":\\\")) {\\n            const textFieldTiddler = $tw.wiki.getTiddler(outputTiddlerTitle);\\n            const newServerInfoTiddler = __spreadValues({\\n              title: outputTiddlerTitle,\\n              text: result\\n            }, textFieldTiddler?.fields);\\n            $tw.wiki.addTiddler(newServerInfoTiddler);\\n          }\\n        }\\n      }\\n      if (this.loopId === loopId && containerElement.offsetParent !== null) {\\n        requestAnimationFrame(tick);\\n      } else {\\n        stream.getTracks().forEach(function(track) {\\n          track.stop();\\n        });\\n      }\\n    };\\n    video.srcObject = stream;\\n    video.setAttribute(\\\"playsinline\\\", \\\"true\\\");\\n    video.play();\\n    requestAnimationFrame(tick);\\n  }\\n};\\nexports.widget = ScanQRWidget;\\nexports.ScanQRWidget = ScanQRWidget;\\n//# sourceMappingURL=data:application/json;base64,\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/plugins/linonetwo/tw-mobile-sync/server-get-html-endpoint-options.js\":{\"title\":\"$:/plugins/linonetwo/tw-mobile-sync/server-get-html-endpoint-options.js\",\"text\":\"// src/server/server-get-html-endpoint-options.ts\\nexports.method = \\\"OPTIONS\\\";\\nexports.path = /^\\\\/tw-mobile-sync\\\\/get-full-html$/;\\nvar handler = function handler2(request, response, context) {\\n  response.setHeader(\\\"Access-Control-Allow-Origin\\\", \\\"*\\\");\\n  response.setHeader(\\\"Access-Control-Allow-Methods\\\", \\\"GET, OPTIONS\\\");\\n  response.setHeader(\\\"Access-Control-Allow-Headers\\\", \\\"*\\\");\\n  response.writeHead(200);\\n  response.end();\\n};\\nexports.handler = handler;\\n//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vLi4vc3JjL3NlcnZlci9zZXJ2ZXItZ2V0LWh0bWwtZW5kcG9pbnQtb3B0aW9ucy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHR5cGUgeyBTZXJ2ZXJFbmRwb2ludEhhbmRsZXIgfSBmcm9tICd0aWRkbHl3aWtpJztcbmltcG9ydCB0eXBlIEh0dHAgZnJvbSAnaHR0cCc7XG5cbi8qKiB0aGlzIHJvdXRlIGlzIGFkZGluZyBDT1JTIHRvIHRoZSBQT1NUIGluIHNhbWUgcm91dGUgKi9cbmV4cG9ydHMubWV0aG9kID0gJ09QVElPTlMnO1xuXG4vLyByb3V0ZSBzaG91bGQgc3RhcnQgd2l0aCBzb21ldGhpbmcgaHR0cHM6Ly9naXRodWIuY29tL0plcm1vbGVuZS9UaWRkbHlXaWtpNS9pc3N1ZXMvNDgwN1xuLy8gcm91dGUgaXMgYWxzbyBpbiBzcmMvc3luYy9nZXRFbmRQb2ludC50c1xuZXhwb3J0cy5wYXRoID0gL15cXC90dy1tb2JpbGUtc3luY1xcL2dldC1mdWxsLWh0bWwkLztcblxuLy8gVE9ETzogdXNlIHRoaXMgY3VzdG9tIGVuZHBvaW50IHRvIGhhbmRsZSBjb25mbGljdCBvbiBzZXJ2ZXIgc2lkZVxuY29uc3QgaGFuZGxlcjogU2VydmVyRW5kcG9pbnRIYW5kbGVyID0gZnVuY3Rpb24gaGFuZGxlcihyZXF1ZXN0OiBIdHRwLkNsaWVudFJlcXVlc3QsIHJlc3BvbnNlOiBIdHRwLlNlcnZlclJlc3BvbnNlLCBjb250ZXh0KSB7XG4gIHJlc3BvbnNlLnNldEhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJywgJyonKTtcbiAgcmVzcG9uc2Uuc2V0SGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzJywgJ0dFVCwgT1BUSU9OUycpO1xuICByZXNwb25zZS5zZXRIZWFkZXIoJ0FjY2Vzcy1Db250cm9sLUFsbG93LUhlYWRlcnMnLCAnKicpO1xuICByZXNwb25zZS53cml0ZUhlYWQoMjAwKTtcbiAgcmVzcG9uc2UuZW5kKCk7XG59O1xuXG5leHBvcnRzLmhhbmRsZXIgPSBoYW5kbGVyO1xuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUlBLFFBQVEsU0FBUztBQUlqQixRQUFRLE9BQU87QUFHZixJQUFNLFVBQWlDLGtCQUFpQixTQUE2QixVQUErQixTQUFTO0FBQzNILFdBQVMsVUFBVSwrQkFBK0IsR0FBRztBQUNyRCxXQUFTLFVBQVUsZ0NBQWdDLGNBQWM7QUFDakUsV0FBUyxVQUFVLGdDQUFnQyxHQUFHO0FBQ3RELFdBQVMsVUFBVSxHQUFHO0FBQ3RCLFdBQVMsSUFBSTtBQUNmO0FBRUEsUUFBUSxVQUFVOyIsCiAgIm5hbWVzIjogW10KfQo=\\n\",\"creator\":\"LinOnetwo\",\"type\":\"application/javascript\",\"module-type\":\"route\"},\"$:/plugins/linonetwo/tw-mobile-sync/server-get-html-endpoint.js\":{\"title\":\"$:/plugins/linonetwo/tw-mobile-sync/server-get-html-endpoint.js\",\"text\":\"// src/server/server-get-html-endpoint.ts\\nexports.method = \\\"GET\\\";\\nexports.path = /^\\\\/tw-mobile-sync\\\\/get-full-html$/;\\nvar handler = function handler2(request, response, context) {\\n  response.setHeader(\\\"Access-Control-Allow-Origin\\\", \\\"*\\\");\\n  const templateName = context.server.get(\\\"root-tiddler\\\") ?? context.wiki.getTiddlerText(\\\"$:/config/SaveWikiButton/Template\\\", \\\"$:/core/save/all\\\").trim();\\n  const downloadType = context.server.get(\\\"root-render-type\\\") ?? \\\"text/plain\\\";\\n  const exportedHTMLContent = context.wiki.renderTiddler(downloadType, templateName);\\n  try {\\n    response.writeHead(200, { \\\"Content-Type\\\": context.server.get(\\\"root-serve-type\\\") ?? downloadType });\\n    response.end(exportedHTMLContent, \\\"utf8\\\");\\n  } catch (error) {\\n    response.writeHead(500);\\n    response.end(`Failed to render tiddlers using ${templateName} , ${error.message} ${error.stack}`, \\\"utf8\\\");\\n  }\\n};\\nexports.handler = handler;\\n//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vLi4vc3JjL3NlcnZlci9zZXJ2ZXItZ2V0LWh0bWwtZW5kcG9pbnQudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB0eXBlIHsgU2VydmVyRW5kcG9pbnRIYW5kbGVyIH0gZnJvbSAndGlkZGx5d2lraSc7XG5pbXBvcnQgdHlwZSBIdHRwIGZyb20gJ2h0dHAnO1xuXG5leHBvcnRzLm1ldGhvZCA9ICdHRVQnO1xuXG4vLyByb3V0ZSBzaG91bGQgc3RhcnQgd2l0aCBzb21ldGhpbmcgaHR0cHM6Ly9naXRodWIuY29tL0plcm1vbGVuZS9UaWRkbHlXaWtpNS9pc3N1ZXMvNDgwN1xuLy8gcm91dGUgaXMgYWxzbyBpbiBzcmMvc3luYy9nZXRFbmRQb2ludC50c1xuZXhwb3J0cy5wYXRoID0gL15cXC90dy1tb2JpbGUtc3luY1xcL2dldC1mdWxsLWh0bWwkLztcblxuLy8gVE9ETzogbW92ZSB0byAvc2VydmVyIGZvbGRlclxuY29uc3QgaGFuZGxlcjogU2VydmVyRW5kcG9pbnRIYW5kbGVyID0gZnVuY3Rpb24gaGFuZGxlcihyZXF1ZXN0OiBIdHRwLkNsaWVudFJlcXVlc3QsIHJlc3BvbnNlOiBIdHRwLlNlcnZlclJlc3BvbnNlLCBjb250ZXh0KSB7XG4gIHJlc3BvbnNlLnNldEhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJywgJyonKTtcbiAgLy8gbGF6eSBpbWFnZSA/PyAkOi9wbHVnaW5zL3RpZGRseXdpa2kvdGlkZGx5d2ViL3NhdmUvb2ZmbGluZVxuICBjb25zdCB0ZW1wbGF0ZU5hbWU6IHN0cmluZyA9XG4gICAgY29udGV4dC5zZXJ2ZXIuZ2V0KCdyb290LXRpZGRsZXInKSA/PyBjb250ZXh0Lndpa2kuZ2V0VGlkZGxlclRleHQoJyQ6L2NvbmZpZy9TYXZlV2lraUJ1dHRvbi9UZW1wbGF0ZScsICckOi9jb3JlL3NhdmUvYWxsJykudHJpbSgpO1xuXG4gIGNvbnN0IGRvd25sb2FkVHlwZSA9IGNvbnRleHQuc2VydmVyLmdldCgncm9vdC1yZW5kZXItdHlwZScpID8/ICd0ZXh0L3BsYWluJztcbiAgY29uc3QgZXhwb3J0ZWRIVE1MQ29udGVudCA9IGNvbnRleHQud2lraS5yZW5kZXJUaWRkbGVyKGRvd25sb2FkVHlwZSwgdGVtcGxhdGVOYW1lKTtcblxuICB0cnkge1xuICAgIHJlc3BvbnNlLndyaXRlSGVhZCgyMDAsIHsgJ0NvbnRlbnQtVHlwZSc6IGNvbnRleHQuc2VydmVyLmdldCgncm9vdC1zZXJ2ZS10eXBlJykgPz8gZG93bmxvYWRUeXBlIH0pO1xuICAgIHJlc3BvbnNlLmVuZChleHBvcnRlZEhUTUxDb250ZW50LCAndXRmOCcpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlc3BvbnNlLndyaXRlSGVhZCg1MDApO1xuICAgIHJlc3BvbnNlLmVuZChgRmFpbGVkIHRvIHJlbmRlciB0aWRkbGVycyB1c2luZyAke3RlbXBsYXRlTmFtZX0gLCAkeyhlcnJvciBhcyBFcnJvcikubWVzc2FnZX0gJHsoZXJyb3IgYXMgRXJyb3IpLnN0YWNrfWAsICd1dGY4Jyk7XG4gIH1cbn07XG5cbmV4cG9ydHMuaGFuZGxlciA9IGhhbmRsZXI7XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBR0EsUUFBUSxTQUFTO0FBSWpCLFFBQVEsT0FBTztBQUdmLElBQU0sVUFBaUMsa0JBQWlCLFNBQTZCLFVBQStCLFNBQVM7QUFDM0gsV0FBUyxVQUFVLCtCQUErQixHQUFHO0FBRXJELFFBQU0sZUFDSixRQUFRLE9BQU8sSUFBSSxjQUFjLEtBQUssUUFBUSxLQUFLLGVBQWUscUNBQXFDLGtCQUFrQixFQUFFLEtBQUs7QUFFbEksUUFBTSxlQUFlLFFBQVEsT0FBTyxJQUFJLGtCQUFrQixLQUFLO0FBQy9ELFFBQU0sc0JBQXNCLFFBQVEsS0FBSyxjQUFjLGNBQWMsWUFBWTtBQUVqRixNQUFJO0FBQ0YsYUFBUyxVQUFVLEtBQUssRUFBRSxnQkFBZ0IsUUFBUSxPQUFPLElBQUksaUJBQWlCLEtBQUssYUFBYSxDQUFDO0FBQ2pHLGFBQVMsSUFBSSxxQkFBcUIsTUFBTTtBQUFBLEVBQzFDLFNBQVMsT0FBUDtBQUNBLGFBQVMsVUFBVSxHQUFHO0FBQ3RCLGFBQVMsSUFBSSxtQ0FBbUMsa0JBQW1CLE1BQWdCLFdBQVksTUFBZ0IsU0FBUyxNQUFNO0FBQUEsRUFDaEk7QUFDRjtBQUVBLFFBQVEsVUFBVTsiLAogICJuYW1lcyI6IFtdCn0K\\n\",\"creator\":\"LinOnetwo\",\"type\":\"application/javascript\",\"module-type\":\"route\"},\"$:/plugins/linonetwo/tw-mobile-sync/server-status-endpoint.js\":{\"title\":\"$:/plugins/linonetwo/tw-mobile-sync/server-status-endpoint.js\",\"text\":\"// src/server/server-status-endpoint.ts\\nexports.method = \\\"GET\\\";\\nexports.path = /^\\\\/tw-mobile-sync\\\\/status$/;\\nvar handler = function handler2(request, response, context) {\\n  const text = JSON.stringify({\\n    username: context.authenticatedUsername || context.server.get(\\\"anon-username\\\") || \\\"\\\",\\n    anonymous: !context.authenticatedUsername,\\n    read_only: !context.server.isAuthorized(\\\"writers\\\", context.authenticatedUsername),\\n    space: {\\n      recipe: \\\"default\\\"\\n    },\\n    tiddlywiki_version: $tw.version\\n  });\\n  response.setHeader(\\\"Access-Control-Allow-Origin\\\", \\\"*\\\");\\n  response.writeHead(200, { \\\"Content-Type\\\": \\\"application/json\\\" });\\n  response.end(text, \\\"utf8\\\");\\n};\\nexports.handler = handler;\\n//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vLi4vc3JjL3NlcnZlci9zZXJ2ZXItc3RhdHVzLWVuZHBvaW50LnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgdHlwZSB7IFNlcnZlckVuZHBvaW50SGFuZGxlciB9IGZyb20gJ3RpZGRseXdpa2knO1xuaW1wb3J0IHR5cGUgSHR0cCBmcm9tICdodHRwJztcblxuZXhwb3J0cy5tZXRob2QgPSAnR0VUJztcblxuLy8gcm91dGUgc2hvdWxkIHN0YXJ0IHdpdGggc29tZXRoaW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9KZXJtb2xlbmUvVGlkZGx5V2lraTUvaXNzdWVzLzQ4MDdcbi8vIHJvdXRlIGlzIGFsc28gaW4gc3JjL3N5bmMvZ2V0RW5kUG9pbnQudHNcbmV4cG9ydHMucGF0aCA9IC9eXFwvdHctbW9iaWxlLXN5bmNcXC9zdGF0dXMkLztcblxuLyoqIGEgL3N0YXR1cyBlbmRwb2ludCB3aXRoIENPUlMgKHRoZSBvcmlnaW5hbCBvbmUgd2lsbCBzYXkgQ09SUyBlcnJvcikgKi9cbmNvbnN0IGhhbmRsZXI6IFNlcnZlckVuZHBvaW50SGFuZGxlciA9IGZ1bmN0aW9uIGhhbmRsZXIocmVxdWVzdDogSHR0cC5DbGllbnRSZXF1ZXN0LCByZXNwb25zZTogSHR0cC5TZXJ2ZXJSZXNwb25zZSwgY29udGV4dCkge1xuICAvLyBtb3N0bHkgY29waWVkIGZyb20gdGhlIG9mZmljaWFsIHJlcG8ncyBjb3JlL21vZHVsZXMvc2VydmVyL3JvdXRlcy9nZXQtc3RhdHVzLmpzXG4gIGNvbnN0IHRleHQgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgdXNlcm5hbWU6IGNvbnRleHQuYXV0aGVudGljYXRlZFVzZXJuYW1lIHx8IGNvbnRleHQuc2VydmVyLmdldCgnYW5vbi11c2VybmFtZScpIHx8ICcnLFxuICAgIGFub255bW91czogIWNvbnRleHQuYXV0aGVudGljYXRlZFVzZXJuYW1lLFxuICAgIHJlYWRfb25seTogIWNvbnRleHQuc2VydmVyLmlzQXV0aG9yaXplZCgnd3JpdGVycycsIGNvbnRleHQuYXV0aGVudGljYXRlZFVzZXJuYW1lKSxcbiAgICBzcGFjZToge1xuICAgICAgcmVjaXBlOiAnZGVmYXVsdCcsXG4gICAgfSxcbiAgICB0aWRkbHl3aWtpX3ZlcnNpb246ICR0dy52ZXJzaW9uLFxuICB9KTtcbiAgcmVzcG9uc2Uuc2V0SGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nLCAnKicpO1xuICByZXNwb25zZS53cml0ZUhlYWQoMjAwLCB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSk7XG4gIHJlc3BvbnNlLmVuZCh0ZXh0LCAndXRmOCcpO1xufTtcbmV4cG9ydHMuaGFuZGxlciA9IGhhbmRsZXI7XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBR0EsUUFBUSxTQUFTO0FBSWpCLFFBQVEsT0FBTztBQUdmLElBQU0sVUFBaUMsa0JBQWlCLFNBQTZCLFVBQStCLFNBQVM7QUFFM0gsUUFBTSxPQUFPLEtBQUssVUFBVTtBQUFBLElBQzFCLFVBQVUsUUFBUSx5QkFBeUIsUUFBUSxPQUFPLElBQUksZUFBZSxLQUFLO0FBQUEsSUFDbEYsV0FBVyxDQUFDLFFBQVE7QUFBQSxJQUNwQixXQUFXLENBQUMsUUFBUSxPQUFPLGFBQWEsV0FBVyxRQUFRLHFCQUFxQjtBQUFBLElBQ2hGLE9BQU87QUFBQSxNQUNMLFFBQVE7QUFBQSxJQUNWO0FBQUEsSUFDQSxvQkFBb0IsSUFBSTtBQUFBLEVBQzFCLENBQUM7QUFDRCxXQUFTLFVBQVUsK0JBQStCLEdBQUc7QUFDckQsV0FBUyxVQUFVLEtBQUssRUFBRSxnQkFBZ0IsbUJBQW1CLENBQUM7QUFDOUQsV0FBUyxJQUFJLE1BQU0sTUFBTTtBQUMzQjtBQUNBLFFBQVEsVUFBVTsiLAogICJuYW1lcyI6IFtdCn0K\\n\",\"creator\":\"LinOnetwo\",\"type\":\"application/javascript\",\"module-type\":\"route\"},\"$:/plugins/linonetwo/tw-mobile-sync/server-sync-endpoint-options.js\":{\"title\":\"$:/plugins/linonetwo/tw-mobile-sync/server-sync-endpoint-options.js\",\"text\":\"// src/server/server-sync-endpoint-options.ts\\nexports.method = \\\"OPTIONS\\\";\\nexports.path = /^\\\\/tw-mobile-sync\\\\/html-node-sync$/;\\nvar handler = function handler2(request, response, context) {\\n  response.setHeader(\\\"Access-Control-Allow-Origin\\\", \\\"*\\\");\\n  response.setHeader(\\\"Access-Control-Allow-Methods\\\", \\\"POST, OPTIONS\\\");\\n  response.setHeader(\\\"Access-Control-Allow-Headers\\\", \\\"*\\\");\\n  response.writeHead(200);\\n  response.end();\\n};\\nexports.handler = handler;\\n//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vLi4vc3JjL3NlcnZlci9zZXJ2ZXItc3luYy1lbmRwb2ludC1vcHRpb25zLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgdHlwZSB7IFNlcnZlckVuZHBvaW50SGFuZGxlciB9IGZyb20gJ3RpZGRseXdpa2knO1xuaW1wb3J0IHR5cGUgSHR0cCBmcm9tICdodHRwJztcblxuLyoqIHRoaXMgcm91dGUgaXMgYWRkaW5nIENPUlMgdG8gdGhlIFBPU1QgaW4gc2FtZSByb3V0ZSAqL1xuZXhwb3J0cy5tZXRob2QgPSAnT1BUSU9OUyc7XG5cbi8vIHJvdXRlIHNob3VsZCBzdGFydCB3aXRoIHNvbWV0aGluZyBodHRwczovL2dpdGh1Yi5jb20vSmVybW9sZW5lL1RpZGRseVdpa2k1L2lzc3Vlcy80ODA3XG4vLyByb3V0ZSBpcyBhbHNvIGluIHNyYy9zeW5jL2dldEVuZFBvaW50LnRzXG5leHBvcnRzLnBhdGggPSAvXlxcL3R3LW1vYmlsZS1zeW5jXFwvaHRtbC1ub2RlLXN5bmMkLztcblxuLy8gVE9ETzogdXNlIHRoaXMgY3VzdG9tIGVuZHBvaW50IHRvIGhhbmRsZSBjb25mbGljdCBvbiBzZXJ2ZXIgc2lkZVxuY29uc3QgaGFuZGxlcjogU2VydmVyRW5kcG9pbnRIYW5kbGVyID0gZnVuY3Rpb24gaGFuZGxlcihyZXF1ZXN0OiBIdHRwLkNsaWVudFJlcXVlc3QsIHJlc3BvbnNlOiBIdHRwLlNlcnZlclJlc3BvbnNlLCBjb250ZXh0KSB7XG4gIHJlc3BvbnNlLnNldEhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJywgJyonKTtcbiAgcmVzcG9uc2Uuc2V0SGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzJywgJ1BPU1QsIE9QVElPTlMnKTtcbiAgcmVzcG9uc2Uuc2V0SGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzJywgJyonKTtcbiAgcmVzcG9uc2Uud3JpdGVIZWFkKDIwMCk7XG4gIHJlc3BvbnNlLmVuZCgpO1xufTtcblxuZXhwb3J0cy5oYW5kbGVyID0gaGFuZGxlcjtcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFJQSxRQUFRLFNBQVM7QUFJakIsUUFBUSxPQUFPO0FBR2YsSUFBTSxVQUFpQyxrQkFBaUIsU0FBNkIsVUFBK0IsU0FBUztBQUMzSCxXQUFTLFVBQVUsK0JBQStCLEdBQUc7QUFDckQsV0FBUyxVQUFVLGdDQUFnQyxlQUFlO0FBQ2xFLFdBQVMsVUFBVSxnQ0FBZ0MsR0FBRztBQUN0RCxXQUFTLFVBQVUsR0FBRztBQUN0QixXQUFTLElBQUk7QUFDZjtBQUVBLFFBQVEsVUFBVTsiLAogICJuYW1lcyI6IFtdCn0K\\n\",\"creator\":\"LinOnetwo\",\"type\":\"application/javascript\",\"module-type\":\"route\"},\"$:/plugins/linonetwo/tw-mobile-sync/server-sync-endpoint.js\":{\"title\":\"$:/plugins/linonetwo/tw-mobile-sync/server-sync-endpoint.js\",\"text\":\"// src/filters.ts\\nfunction getDiffFilter(lastSync) {\\n  return `[all[]] :filter[get[modified]compare:date:gt[${lastSync ?? \\\"\\\"}]]`;\\n}\\n\\n// src/server/server-sync-endpoint.ts\\nexports.method = \\\"POST\\\";\\nexports.path = /^\\\\/tw-mobile-sync\\\\/html-node-sync$/;\\nvar handler = function handler2(request, response, context) {\\n  response.setHeader(\\\"Access-Control-Allow-Origin\\\", \\\"*\\\");\\n  const { tiddlers, lastSync } = $tw.utils.parseJSONSafe(context.data);\\n  if (!Array.isArray(tiddlers)) {\\n    response.writeHead(400, { \\\"Content-Type\\\": \\\"application/json\\\" });\\n    response.end(`Bad request body, not a tiddler list. ${String(tiddlers)}`, \\\"utf8\\\");\\n  }\\n  const diffTiddlersFilter = getDiffFilter(lastSync);\\n  const diffTiddlers = $tw.wiki.compileFilter(diffTiddlersFilter)() ?? [];\\n  const changedTiddlersFromServer = diffTiddlers.map((title) => {\\n    return $tw.wiki.getTiddler(title);\\n  }).filter((i) => i !== void 0).map((tiddler) => tiddler.fields);\\n  try {\\n    context.wiki.addTiddlers(tiddlers);\\n    response.writeHead(201, { \\\"Content-Type\\\": \\\"application/json\\\" });\\n    response.end(JSON.stringify(changedTiddlersFromServer), \\\"utf8\\\");\\n  } catch (error) {\\n    response.writeHead(500);\\n    response.end(`Failed to add tiddlers ${error.message} ${error.stack}`, \\\"utf8\\\");\\n  }\\n};\\nexports.handler = handler;\\n//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vLi4vc3JjL2ZpbHRlcnMudHMiLCAiLi4vLi4vLi4vLi4vLi4vc3JjL3NlcnZlci9zZXJ2ZXItc3luYy1lbmRwb2ludC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiZXhwb3J0IGZ1bmN0aW9uIGdldERpZmZGaWx0ZXIobGFzdFN5bmM6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICByZXR1cm4gYFthbGxbXV0gOmZpbHRlcltnZXRbbW9kaWZpZWRdY29tcGFyZTpkYXRlOmd0WyR7bGFzdFN5bmMgPz8gJyd9XV1gO1xufVxuXG4vKipcbiAqIGFsc28gaW4gc3JjL3VpL1NlcnZlckxpc3QudGlkICdzIGxpc3Qgd2lkZ2V0XG4gKi9cbmV4cG9ydCBjb25zdCBzZXJ2ZXJMaXN0RmlsdGVyOiBzdHJpbmcgPSBgW3ByZWZpeFskOi9zdGF0ZS90dy1tb2JpbGUtc3luYy9zZXJ2ZXIvXV0gLVtbJDovc3RhdGUvdHctbW9iaWxlLXN5bmMvc2VydmVyL25ld11dIC1bWyQ6L3N0YXRlL3R3LW1vYmlsZS1zeW5jL3NlcnZlci9uZXcvc2Nhbi1xci13aWRnZXQtb3Blbl1dYDtcbiIsICJpbXBvcnQgdHlwZSB7IFNlcnZlckVuZHBvaW50SGFuZGxlciwgVGlkZGxlciB9IGZyb20gJ3RpZGRseXdpa2knO1xuaW1wb3J0IHR5cGUgSHR0cCBmcm9tICdodHRwJztcbmltcG9ydCB7IElTeW5jRW5kUG9pbnRSZXF1ZXN0IH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgZ2V0RGlmZkZpbHRlciB9IGZyb20gJy4uL2ZpbHRlcnMnO1xuXG5leHBvcnRzLm1ldGhvZCA9ICdQT1NUJztcblxuLy8gcm91dGUgc2hvdWxkIHN0YXJ0IHdpdGggc29tZXRoaW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9KZXJtb2xlbmUvVGlkZGx5V2lraTUvaXNzdWVzLzQ4MDdcbi8vIHJvdXRlIGlzIGFsc28gaW4gc3JjL3N5bmMvZ2V0RW5kUG9pbnQudHNcbmV4cG9ydHMucGF0aCA9IC9eXFwvdHctbW9iaWxlLXN5bmNcXC9odG1sLW5vZGUtc3luYyQvO1xuXG4vLyBUT0RPOiB1c2UgdGhpcyBjdXN0b20gZW5kcG9pbnQgdG8gaGFuZGxlIGNvbmZsaWN0IG9uIHNlcnZlciBzaWRlXG5jb25zdCBoYW5kbGVyOiBTZXJ2ZXJFbmRwb2ludEhhbmRsZXIgPSBmdW5jdGlvbiBoYW5kbGVyKHJlcXVlc3Q6IEh0dHAuQ2xpZW50UmVxdWVzdCwgcmVzcG9uc2U6IEh0dHAuU2VydmVyUmVzcG9uc2UsIGNvbnRleHQpIHtcbiAgcmVzcG9uc2Uuc2V0SGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nLCAnKicpO1xuXG4gIGNvbnN0IHsgdGlkZGxlcnMsIGxhc3RTeW5jIH0gPSAkdHcudXRpbHMucGFyc2VKU09OU2FmZShjb250ZXh0LmRhdGEpIGFzIElTeW5jRW5kUG9pbnRSZXF1ZXN0O1xuICBpZiAoIUFycmF5LmlzQXJyYXkodGlkZGxlcnMpKSB7XG4gICAgcmVzcG9uc2Uud3JpdGVIZWFkKDQwMCwgeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0pO1xuICAgIHJlc3BvbnNlLmVuZChgQmFkIHJlcXVlc3QgYm9keSwgbm90IGEgdGlkZGxlciBsaXN0LiAke1N0cmluZyh0aWRkbGVycyl9YCwgJ3V0ZjgnKTtcbiAgfVxuICAvLyBnZXQgY2hhbmdlZCB0aWRkbGVyc1xuICBjb25zdCBkaWZmVGlkZGxlcnNGaWx0ZXI6IHN0cmluZyA9IGdldERpZmZGaWx0ZXIobGFzdFN5bmMpO1xuICBjb25zdCBkaWZmVGlkZGxlcnM6IHN0cmluZ1tdID0gJHR3Lndpa2kuY29tcGlsZUZpbHRlcihkaWZmVGlkZGxlcnNGaWx0ZXIpKCkgPz8gW107XG4gIGNvbnN0IGNoYW5nZWRUaWRkbGVyc0Zyb21TZXJ2ZXIgPSBkaWZmVGlkZGxlcnNcbiAgICAubWFwKCh0aXRsZSkgPT4ge1xuICAgICAgcmV0dXJuICR0dy53aWtpLmdldFRpZGRsZXIodGl0bGUpO1xuICAgIH0pXG4gICAgLmZpbHRlcigoaSk6IGkgaXMgVGlkZGxlciA9PiBpICE9PSB1bmRlZmluZWQpXG4gICAgLm1hcCgodGlkZGxlcikgPT4gdGlkZGxlci5maWVsZHMpO1xuXG4gIHRyeSB7XG4gICAgY29udGV4dC53aWtpLmFkZFRpZGRsZXJzKHRpZGRsZXJzKTtcbiAgICByZXNwb25zZS53cml0ZUhlYWQoMjAxLCB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSk7XG4gICAgcmVzcG9uc2UuZW5kKEpTT04uc3RyaW5naWZ5KGNoYW5nZWRUaWRkbGVyc0Zyb21TZXJ2ZXIpLCAndXRmOCcpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlc3BvbnNlLndyaXRlSGVhZCg1MDApO1xuICAgIHJlc3BvbnNlLmVuZChgRmFpbGVkIHRvIGFkZCB0aWRkbGVycyAkeyhlcnJvciBhcyBFcnJvcikubWVzc2FnZX0gJHsoZXJyb3IgYXMgRXJyb3IpLnN0YWNrfWAsICd1dGY4Jyk7XG4gIH1cbn07XG5cbmV4cG9ydHMuaGFuZGxlciA9IGhhbmRsZXI7XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQU8sdUJBQXVCLFVBQThCO0FBQzFELFNBQU8sZ0RBQWdELFlBQVk7QUFDckU7OztBQ0dBLFFBQVEsU0FBUztBQUlqQixRQUFRLE9BQU87QUFHZixJQUFNLFVBQWlDLGtCQUFpQixTQUE2QixVQUErQixTQUFTO0FBQzNILFdBQVMsVUFBVSwrQkFBK0IsR0FBRztBQUVyRCxRQUFNLEVBQUUsVUFBVSxhQUFhLElBQUksTUFBTSxjQUFjLFFBQVEsSUFBSTtBQUNuRSxNQUFJLENBQUMsTUFBTSxRQUFRLFFBQVEsR0FBRztBQUM1QixhQUFTLFVBQVUsS0FBSyxFQUFFLGdCQUFnQixtQkFBbUIsQ0FBQztBQUM5RCxhQUFTLElBQUkseUNBQXlDLE9BQU8sUUFBUSxLQUFLLE1BQU07QUFBQSxFQUNsRjtBQUVBLFFBQU0scUJBQTZCLGNBQWMsUUFBUTtBQUN6RCxRQUFNLGVBQXlCLElBQUksS0FBSyxjQUFjLGtCQUFrQixFQUFFLEtBQUssQ0FBQztBQUNoRixRQUFNLDRCQUE0QixhQUMvQixJQUFJLENBQUMsVUFBVTtBQUNkLFdBQU8sSUFBSSxLQUFLLFdBQVcsS0FBSztBQUFBLEVBQ2xDLENBQUMsRUFDQSxPQUFPLENBQUMsTUFBb0IsTUFBTSxNQUFTLEVBQzNDLElBQUksQ0FBQyxZQUFZLFFBQVEsTUFBTTtBQUVsQyxNQUFJO0FBQ0YsWUFBUSxLQUFLLFlBQVksUUFBUTtBQUNqQyxhQUFTLFVBQVUsS0FBSyxFQUFFLGdCQUFnQixtQkFBbUIsQ0FBQztBQUM5RCxhQUFTLElBQUksS0FBSyxVQUFVLHlCQUF5QixHQUFHLE1BQU07QUFBQSxFQUNoRSxTQUFTLE9BQVA7QUFDQSxhQUFTLFVBQVUsR0FBRztBQUN0QixhQUFTLElBQUksMEJBQTJCLE1BQWdCLFdBQVksTUFBZ0IsU0FBUyxNQUFNO0FBQUEsRUFDckc7QUFDRjtBQUVBLFFBQVEsVUFBVTsiLAogICJuYW1lcyI6IFtdCn0K\\n\",\"creator\":\"LinOnetwo\",\"type\":\"application/javascript\",\"module-type\":\"route\"},\"$:/plugins/linonetwo/tw-mobile-sync/smart-recognize-ip-address.js\":{\"title\":\"$:/plugins/linonetwo/tw-mobile-sync/smart-recognize-ip-address.js\",\"text\":\"var __create = Object.create;\\nvar __defProp = Object.defineProperty;\\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\\nvar __getOwnPropNames = Object.getOwnPropertyNames;\\nvar __getProtoOf = Object.getPrototypeOf;\\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\\nvar __commonJS = (cb, mod) => function __require() {\\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\\n};\\nvar __copyProps = (to, from, except, desc) => {\\n  if (from && typeof from === \\\"object\\\" || typeof from === \\\"function\\\") {\\n    for (let key of __getOwnPropNames(from))\\n      if (!__hasOwnProp.call(to, key) && key !== except)\\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\\n  }\\n  return to;\\n};\\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, \\\"default\\\", { value: mod, enumerable: true }) : target, mod));\\n\\n// node_modules/lodash/_freeGlobal.js\\nvar require_freeGlobal = __commonJS({\\n  \\\"node_modules/lodash/_freeGlobal.js\\\"(exports2, module2) {\\n    var freeGlobal = typeof global == \\\"object\\\" && global && global.Object === Object && global;\\n    module2.exports = freeGlobal;\\n  }\\n});\\n\\n// node_modules/lodash/_root.js\\nvar require_root = __commonJS({\\n  \\\"node_modules/lodash/_root.js\\\"(exports2, module2) {\\n    var freeGlobal = require_freeGlobal();\\n    var freeSelf = typeof self == \\\"object\\\" && self && self.Object === Object && self;\\n    var root = freeGlobal || freeSelf || Function(\\\"return this\\\")();\\n    module2.exports = root;\\n  }\\n});\\n\\n// node_modules/lodash/_Symbol.js\\nvar require_Symbol = __commonJS({\\n  \\\"node_modules/lodash/_Symbol.js\\\"(exports2, module2) {\\n    var root = require_root();\\n    var Symbol = root.Symbol;\\n    module2.exports = Symbol;\\n  }\\n});\\n\\n// node_modules/lodash/_arrayMap.js\\nvar require_arrayMap = __commonJS({\\n  \\\"node_modules/lodash/_arrayMap.js\\\"(exports2, module2) {\\n    function arrayMap(array, iteratee) {\\n      var index = -1, length = array == null ? 0 : array.length, result = Array(length);\\n      while (++index < length) {\\n        result[index] = iteratee(array[index], index, array);\\n      }\\n      return result;\\n    }\\n    module2.exports = arrayMap;\\n  }\\n});\\n\\n// node_modules/lodash/isArray.js\\nvar require_isArray = __commonJS({\\n  \\\"node_modules/lodash/isArray.js\\\"(exports2, module2) {\\n    var isArray = Array.isArray;\\n    module2.exports = isArray;\\n  }\\n});\\n\\n// node_modules/lodash/_getRawTag.js\\nvar require_getRawTag = __commonJS({\\n  \\\"node_modules/lodash/_getRawTag.js\\\"(exports2, module2) {\\n    var Symbol = require_Symbol();\\n    var objectProto = Object.prototype;\\n    var hasOwnProperty = objectProto.hasOwnProperty;\\n    var nativeObjectToString = objectProto.toString;\\n    var symToStringTag = Symbol ? Symbol.toStringTag : void 0;\\n    function getRawTag(value) {\\n      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];\\n      try {\\n        value[symToStringTag] = void 0;\\n        var unmasked = true;\\n      } catch (e) {\\n      }\\n      var result = nativeObjectToString.call(value);\\n      if (unmasked) {\\n        if (isOwn) {\\n          value[symToStringTag] = tag;\\n        } else {\\n          delete value[symToStringTag];\\n        }\\n      }\\n      return result;\\n    }\\n    module2.exports = getRawTag;\\n  }\\n});\\n\\n// node_modules/lodash/_objectToString.js\\nvar require_objectToString = __commonJS({\\n  \\\"node_modules/lodash/_objectToString.js\\\"(exports2, module2) {\\n    var objectProto = Object.prototype;\\n    var nativeObjectToString = objectProto.toString;\\n    function objectToString(value) {\\n      return nativeObjectToString.call(value);\\n    }\\n    module2.exports = objectToString;\\n  }\\n});\\n\\n// node_modules/lodash/_baseGetTag.js\\nvar require_baseGetTag = __commonJS({\\n  \\\"node_modules/lodash/_baseGetTag.js\\\"(exports2, module2) {\\n    var Symbol = require_Symbol();\\n    var getRawTag = require_getRawTag();\\n    var objectToString = require_objectToString();\\n    var nullTag = \\\"[object Null]\\\";\\n    var undefinedTag = \\\"[object Undefined]\\\";\\n    var symToStringTag = Symbol ? Symbol.toStringTag : void 0;\\n    function baseGetTag(value) {\\n      if (value == null) {\\n        return value === void 0 ? undefinedTag : nullTag;\\n      }\\n      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\\n    }\\n    module2.exports = baseGetTag;\\n  }\\n});\\n\\n// node_modules/lodash/isObjectLike.js\\nvar require_isObjectLike = __commonJS({\\n  \\\"node_modules/lodash/isObjectLike.js\\\"(exports2, module2) {\\n    function isObjectLike(value) {\\n      return value != null && typeof value == \\\"object\\\";\\n    }\\n    module2.exports = isObjectLike;\\n  }\\n});\\n\\n// node_modules/lodash/isSymbol.js\\nvar require_isSymbol = __commonJS({\\n  \\\"node_modules/lodash/isSymbol.js\\\"(exports2, module2) {\\n    var baseGetTag = require_baseGetTag();\\n    var isObjectLike = require_isObjectLike();\\n    var symbolTag = \\\"[object Symbol]\\\";\\n    function isSymbol(value) {\\n      return typeof value == \\\"symbol\\\" || isObjectLike(value) && baseGetTag(value) == symbolTag;\\n    }\\n    module2.exports = isSymbol;\\n  }\\n});\\n\\n// node_modules/lodash/_baseToString.js\\nvar require_baseToString = __commonJS({\\n  \\\"node_modules/lodash/_baseToString.js\\\"(exports2, module2) {\\n    var Symbol = require_Symbol();\\n    var arrayMap = require_arrayMap();\\n    var isArray = require_isArray();\\n    var isSymbol = require_isSymbol();\\n    var INFINITY = 1 / 0;\\n    var symbolProto = Symbol ? Symbol.prototype : void 0;\\n    var symbolToString = symbolProto ? symbolProto.toString : void 0;\\n    function baseToString(value) {\\n      if (typeof value == \\\"string\\\") {\\n        return value;\\n      }\\n      if (isArray(value)) {\\n        return arrayMap(value, baseToString) + \\\"\\\";\\n      }\\n      if (isSymbol(value)) {\\n        return symbolToString ? symbolToString.call(value) : \\\"\\\";\\n      }\\n      var result = value + \\\"\\\";\\n      return result == \\\"0\\\" && 1 / value == -INFINITY ? \\\"-0\\\" : result;\\n    }\\n    module2.exports = baseToString;\\n  }\\n});\\n\\n// node_modules/lodash/_trimmedEndIndex.js\\nvar require_trimmedEndIndex = __commonJS({\\n  \\\"node_modules/lodash/_trimmedEndIndex.js\\\"(exports2, module2) {\\n    var reWhitespace = /\\\\s/;\\n    function trimmedEndIndex(string) {\\n      var index = string.length;\\n      while (index-- && reWhitespace.test(string.charAt(index))) {\\n      }\\n      return index;\\n    }\\n    module2.exports = trimmedEndIndex;\\n  }\\n});\\n\\n// node_modules/lodash/_baseTrim.js\\nvar require_baseTrim = __commonJS({\\n  \\\"node_modules/lodash/_baseTrim.js\\\"(exports2, module2) {\\n    var trimmedEndIndex = require_trimmedEndIndex();\\n    var reTrimStart = /^\\\\s+/;\\n    function baseTrim(string) {\\n      return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, \\\"\\\") : string;\\n    }\\n    module2.exports = baseTrim;\\n  }\\n});\\n\\n// node_modules/lodash/_baseSlice.js\\nvar require_baseSlice = __commonJS({\\n  \\\"node_modules/lodash/_baseSlice.js\\\"(exports2, module2) {\\n    function baseSlice(array, start, end) {\\n      var index = -1, length = array.length;\\n      if (start < 0) {\\n        start = -start > length ? 0 : length + start;\\n      }\\n      end = end > length ? length : end;\\n      if (end < 0) {\\n        end += length;\\n      }\\n      length = start > end ? 0 : end - start >>> 0;\\n      start >>>= 0;\\n      var result = Array(length);\\n      while (++index < length) {\\n        result[index] = array[index + start];\\n      }\\n      return result;\\n    }\\n    module2.exports = baseSlice;\\n  }\\n});\\n\\n// node_modules/lodash/_castSlice.js\\nvar require_castSlice = __commonJS({\\n  \\\"node_modules/lodash/_castSlice.js\\\"(exports2, module2) {\\n    var baseSlice = require_baseSlice();\\n    function castSlice(array, start, end) {\\n      var length = array.length;\\n      end = end === void 0 ? length : end;\\n      return !start && end >= length ? array : baseSlice(array, start, end);\\n    }\\n    module2.exports = castSlice;\\n  }\\n});\\n\\n// node_modules/lodash/_baseFindIndex.js\\nvar require_baseFindIndex = __commonJS({\\n  \\\"node_modules/lodash/_baseFindIndex.js\\\"(exports2, module2) {\\n    function baseFindIndex(array, predicate, fromIndex, fromRight) {\\n      var length = array.length, index = fromIndex + (fromRight ? 1 : -1);\\n      while (fromRight ? index-- : ++index < length) {\\n        if (predicate(array[index], index, array)) {\\n          return index;\\n        }\\n      }\\n      return -1;\\n    }\\n    module2.exports = baseFindIndex;\\n  }\\n});\\n\\n// node_modules/lodash/_baseIsNaN.js\\nvar require_baseIsNaN = __commonJS({\\n  \\\"node_modules/lodash/_baseIsNaN.js\\\"(exports2, module2) {\\n    function baseIsNaN(value) {\\n      return value !== value;\\n    }\\n    module2.exports = baseIsNaN;\\n  }\\n});\\n\\n// node_modules/lodash/_strictIndexOf.js\\nvar require_strictIndexOf = __commonJS({\\n  \\\"node_modules/lodash/_strictIndexOf.js\\\"(exports2, module2) {\\n    function strictIndexOf(array, value, fromIndex) {\\n      var index = fromIndex - 1, length = array.length;\\n      while (++index < length) {\\n        if (array[index] === value) {\\n          return index;\\n        }\\n      }\\n      return -1;\\n    }\\n    module2.exports = strictIndexOf;\\n  }\\n});\\n\\n// node_modules/lodash/_baseIndexOf.js\\nvar require_baseIndexOf = __commonJS({\\n  \\\"node_modules/lodash/_baseIndexOf.js\\\"(exports2, module2) {\\n    var baseFindIndex = require_baseFindIndex();\\n    var baseIsNaN = require_baseIsNaN();\\n    var strictIndexOf = require_strictIndexOf();\\n    function baseIndexOf(array, value, fromIndex) {\\n      return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);\\n    }\\n    module2.exports = baseIndexOf;\\n  }\\n});\\n\\n// node_modules/lodash/_charsEndIndex.js\\nvar require_charsEndIndex = __commonJS({\\n  \\\"node_modules/lodash/_charsEndIndex.js\\\"(exports2, module2) {\\n    var baseIndexOf = require_baseIndexOf();\\n    function charsEndIndex(strSymbols, chrSymbols) {\\n      var index = strSymbols.length;\\n      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {\\n      }\\n      return index;\\n    }\\n    module2.exports = charsEndIndex;\\n  }\\n});\\n\\n// node_modules/lodash/_charsStartIndex.js\\nvar require_charsStartIndex = __commonJS({\\n  \\\"node_modules/lodash/_charsStartIndex.js\\\"(exports2, module2) {\\n    var baseIndexOf = require_baseIndexOf();\\n    function charsStartIndex(strSymbols, chrSymbols) {\\n      var index = -1, length = strSymbols.length;\\n      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {\\n      }\\n      return index;\\n    }\\n    module2.exports = charsStartIndex;\\n  }\\n});\\n\\n// node_modules/lodash/_asciiToArray.js\\nvar require_asciiToArray = __commonJS({\\n  \\\"node_modules/lodash/_asciiToArray.js\\\"(exports2, module2) {\\n    function asciiToArray(string) {\\n      return string.split(\\\"\\\");\\n    }\\n    module2.exports = asciiToArray;\\n  }\\n});\\n\\n// node_modules/lodash/_hasUnicode.js\\nvar require_hasUnicode = __commonJS({\\n  \\\"node_modules/lodash/_hasUnicode.js\\\"(exports2, module2) {\\n    var rsAstralRange = \\\"\\\\\\\\ud800-\\\\\\\\udfff\\\";\\n    var rsComboMarksRange = \\\"\\\\\\\\u0300-\\\\\\\\u036f\\\";\\n    var reComboHalfMarksRange = \\\"\\\\\\\\ufe20-\\\\\\\\ufe2f\\\";\\n    var rsComboSymbolsRange = \\\"\\\\\\\\u20d0-\\\\\\\\u20ff\\\";\\n    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;\\n    var rsVarRange = \\\"\\\\\\\\ufe0e\\\\\\\\ufe0f\\\";\\n    var rsZWJ = \\\"\\\\\\\\u200d\\\";\\n    var reHasUnicode = RegExp(\\\"[\\\" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + \\\"]\\\");\\n    function hasUnicode(string) {\\n      return reHasUnicode.test(string);\\n    }\\n    module2.exports = hasUnicode;\\n  }\\n});\\n\\n// node_modules/lodash/_unicodeToArray.js\\nvar require_unicodeToArray = __commonJS({\\n  \\\"node_modules/lodash/_unicodeToArray.js\\\"(exports2, module2) {\\n    var rsAstralRange = \\\"\\\\\\\\ud800-\\\\\\\\udfff\\\";\\n    var rsComboMarksRange = \\\"\\\\\\\\u0300-\\\\\\\\u036f\\\";\\n    var reComboHalfMarksRange = \\\"\\\\\\\\ufe20-\\\\\\\\ufe2f\\\";\\n    var rsComboSymbolsRange = \\\"\\\\\\\\u20d0-\\\\\\\\u20ff\\\";\\n    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;\\n    var rsVarRange = \\\"\\\\\\\\ufe0e\\\\\\\\ufe0f\\\";\\n    var rsAstral = \\\"[\\\" + rsAstralRange + \\\"]\\\";\\n    var rsCombo = \\\"[\\\" + rsComboRange + \\\"]\\\";\\n    var rsFitz = \\\"\\\\\\\\ud83c[\\\\\\\\udffb-\\\\\\\\udfff]\\\";\\n    var rsModifier = \\\"(?:\\\" + rsCombo + \\\"|\\\" + rsFitz + \\\")\\\";\\n    var rsNonAstral = \\\"[^\\\" + rsAstralRange + \\\"]\\\";\\n    var rsRegional = \\\"(?:\\\\\\\\ud83c[\\\\\\\\udde6-\\\\\\\\uddff]){2}\\\";\\n    var rsSurrPair = \\\"[\\\\\\\\ud800-\\\\\\\\udbff][\\\\\\\\udc00-\\\\\\\\udfff]\\\";\\n    var rsZWJ = \\\"\\\\\\\\u200d\\\";\\n    var reOptMod = rsModifier + \\\"?\\\";\\n    var rsOptVar = \\\"[\\\" + rsVarRange + \\\"]?\\\";\\n    var rsOptJoin = \\\"(?:\\\" + rsZWJ + \\\"(?:\\\" + [rsNonAstral, rsRegional, rsSurrPair].join(\\\"|\\\") + \\\")\\\" + rsOptVar + reOptMod + \\\")*\\\";\\n    var rsSeq = rsOptVar + reOptMod + rsOptJoin;\\n    var rsSymbol = \\\"(?:\\\" + [rsNonAstral + rsCombo + \\\"?\\\", rsCombo, rsRegional, rsSurrPair, rsAstral].join(\\\"|\\\") + \\\")\\\";\\n    var reUnicode = RegExp(rsFitz + \\\"(?=\\\" + rsFitz + \\\")|\\\" + rsSymbol + rsSeq, \\\"g\\\");\\n    function unicodeToArray(string) {\\n      return string.match(reUnicode) || [];\\n    }\\n    module2.exports = unicodeToArray;\\n  }\\n});\\n\\n// node_modules/lodash/_stringToArray.js\\nvar require_stringToArray = __commonJS({\\n  \\\"node_modules/lodash/_stringToArray.js\\\"(exports2, module2) {\\n    var asciiToArray = require_asciiToArray();\\n    var hasUnicode = require_hasUnicode();\\n    var unicodeToArray = require_unicodeToArray();\\n    function stringToArray(string) {\\n      return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);\\n    }\\n    module2.exports = stringToArray;\\n  }\\n});\\n\\n// node_modules/lodash/toString.js\\nvar require_toString = __commonJS({\\n  \\\"node_modules/lodash/toString.js\\\"(exports2, module2) {\\n    var baseToString = require_baseToString();\\n    function toString(value) {\\n      return value == null ? \\\"\\\" : baseToString(value);\\n    }\\n    module2.exports = toString;\\n  }\\n});\\n\\n// node_modules/lodash/trim.js\\nvar require_trim = __commonJS({\\n  \\\"node_modules/lodash/trim.js\\\"(exports2, module2) {\\n    var baseToString = require_baseToString();\\n    var baseTrim = require_baseTrim();\\n    var castSlice = require_castSlice();\\n    var charsEndIndex = require_charsEndIndex();\\n    var charsStartIndex = require_charsStartIndex();\\n    var stringToArray = require_stringToArray();\\n    var toString = require_toString();\\n    function trim2(string, chars, guard) {\\n      string = toString(string);\\n      if (string && (guard || chars === void 0)) {\\n        return baseTrim(string);\\n      }\\n      if (!string || !(chars = baseToString(chars))) {\\n        return string;\\n      }\\n      var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;\\n      return castSlice(strSymbols, start, end).join(\\\"\\\");\\n    }\\n    module2.exports = trim2;\\n  }\\n});\\n\\n// src/smart-recognize-ip-address.ts\\nvar import_trim = __toESM(require_trim());\\nfunction recognize(tiddlerName) {\\n  if (tiddlerName === void 0) {\\n    return;\\n  }\\n  const textFieldTiddler = $tw.wiki.getTiddler(tiddlerName);\\n  if (textFieldTiddler === void 0) {\\n    return;\\n  }\\n  if (typeof textFieldTiddler.fields.text !== \\\"string\\\" || (0, import_trim.default)(textFieldTiddler.fields.text).length === 0) {\\n    return;\\n  }\\n  const regex = /((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[\\\\.。]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))[:：]([0-9]{2,5})/gm;\\n  let match;\\n  let ipAddress;\\n  let port;\\n  while ((match = regex.exec(textFieldTiddler.fields.text)) !== null) {\\n    if (match.index === regex.lastIndex) {\\n      regex.lastIndex++;\\n    }\\n    match.forEach((match2, groupIndex) => {\\n      console.log(`Found match, group ${groupIndex}: ${match2}`);\\n      if (groupIndex === 1) {\\n        ipAddress = match2;\\n      }\\n      if (groupIndex === 5) {\\n        port = match2;\\n      }\\n    });\\n  }\\n  if (ipAddress !== void 0 || port !== void 0) {\\n    const newServerInfoTiddler = {\\n      title: tiddlerName,\\n      text: textFieldTiddler.fields.text,\\n      ipAddress,\\n      port\\n    };\\n    $tw.wiki.addTiddler(newServerInfoTiddler);\\n  }\\n}\\nexports.startup = () => {\\n  $tw.rootWidget.addEventListener(\\\"tw-mobile-sync-smart-recognize-ip-address\\\", (event) => recognize(event.param));\\n};\\n//# sourceMappingURL=data:application/json;base64,\\n\",\"creator\":\"LinOnetwo\",\"type\":\"application/javascript\",\"module-type\":\"startup\"},\"$:/plugins/linonetwo/tw-mobile-sync/ui/DownloadFullHtml\":{\"title\":\"$:/plugins/linonetwo/tw-mobile-sync/ui/DownloadFullHtml\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$list filter=\\\"[prefix[$:/state/tw-mobile-sync/server/]field:text[onlineActive]]\\\">\\n<details>\\n  <summary>\\n  拉取并覆盖 Pull and override\\n  </summary>\\n  <fieldset>\\n    <legend>拉取服务端最新完整内容覆盖本地所有内容 Pull the latest complete content from the server to cover all local content</legend>\\n    <div>普通同步没法更新插件和导入的内容，如果你在电脑端更新或安装了插件，则需要在移动端点下面的按钮做一次完整拉取。</div>\\n    <div>If you have updated or installed the plugin on your computer, you will need to do a full pull on the mobile side by clicking the button below.</div>\\n    <div>请慎重点击，本地若有未同步内容将丢失！如果确保本地没有未同步内容，则可以放心拉取。</div>\\n    <div>Please click carefully, local unsynced content will be lost if there is any! If you make sure there is no unsynced content locally, you can pull it without worry.</div>\\n    <$button>\\n      <div>{{!!name}}</div>\\n      <div>拉取内容覆盖本地 Pull content to cover local</div>\\n      <$action-sendmessage $message=\\\"tw-mobile-sync-download-full-html\\\" />\\n    </$button>\\n  </fieldset>\\n</details>\\n</$list>\\n\"},\"$:/plugins/linonetwo/tw-mobile-sync/ui/ServerItemViewTemplate\":{\"title\":\"$:/plugins/linonetwo/tw-mobile-sync/ui/ServerItemViewTemplate\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<div class=\\\"tw-mobile-sync-server-list-item\\\">\\n  <div style=\\\"display: flex; flex-direction: column;\\\">\\n    <h3 style=\\\"margin-top: 0;\\\">\\n      <$link to={{!!title}}>\\n        <$text text={{!!name}}/>\\n      </$link>\\n    </h3>\\n    <div style=\\\"margin-bottom: 10px;\\\">{{!!ipAddress}}:{{!!port}}</div>\\n    <!-- we use text as status field -->\\n    <div>{{!!text}}</div>\\n  </div>\\n\\n  <$reveal type=\\\"nomatch\\\" state=<<currentTiddler>> text=\\\"onlineActive\\\" class=\\\"tw-mobile-sync-sync-reveal\\\">\\n    <$button class=\\\"tw-mobile-sync-sync-button\\\">\\n      <div><$text text={{!!name}}/></div>\\n      <div>启用同步并立即同步</div>\\n      <div>Enable and Sync Now</div>\\n      <$action-sendmessage $message=\\\"tw-mobile-sync-set-active-server-and-sync\\\" title={{!!title}} />\\n    </$button>\\n  </$reveal>\\n\\n  <$reveal type=\\\"match\\\" state=<<currentTiddler>> text=\\\"onlineActive\\\" class=\\\"tw-mobile-sync-sync-reveal\\\">\\n    <$button class=\\\"tw-mobile-sync-sync-button\\\">\\n      <div><$text text={{!!name}}/></div>\\n      <div>立即同步</div>\\n      <div>Sync Now</div>\\n      <$action-sendmessage $message=\\\"tw-mobile-sync-sync-start\\\" />\\n    </$button>\\n  </$reveal>\\n\\n</div>\\n\"},\"$:/plugins/linonetwo/tw-mobile-sync/ui/ServerList\":{\"title\":\"$:/plugins/linonetwo/tw-mobile-sync/ui/ServerList\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<div class=\\\"tw-mobile-sync-server-list\\\">\\n  <$list filter=\\\"[prefix[$:/state/tw-mobile-sync/server/]] -[[$:/state/tw-mobile-sync/server/new]] -[[$:/state/tw-mobile-sync/server/new/scan-qr-widget-open]]\\\">\\n    {{||$:/plugins/linonetwo/tw-mobile-sync/ui/ServerItemViewTemplate}}\\n  </$list>\\n</div>\\n\\n<div style=\\\"display: flex; flex-direction: row;\\\">\\n  <div class=\\\"tw-mobile-sync-new-server-field-fields-container-outer\\\">\\n    <fieldset>\\n      <legend>智能识别黏贴框 Smart Identify Sticky Box</legend>\\n\\n      <div class=\\\"tw-mobile-sync-new-server-field-fields-container\\\">\\n        <$edit-text tiddler=\\\"$:/state/tw-mobile-sync/server/new\\\" field=\\\"text\\\" default=\\\"\\\" />\\n\\n        <div class=\\\"tw-mobile-sync-new-server-field-fields-buttons\\\">\\n          <$button>\\n            智能识别 Smart Identify\\n            <$action-sendmessage $message=\\\"tw-mobile-sync-smart-recognize-ip-address\\\" $param=\\\"$:/state/tw-mobile-sync/server/new\\\"/>\\n          </$button>\\n\\n          <$reveal type=\\\"nomatch\\\" state=\\\"$:/state/tw-mobile-sync/server/new/scan-qr-widget-open\\\" text=\\\"true\\\">\\n            <$button>\\n              扫二维码 Scan QR\\n              <$action-setfield $tiddler=\\\"$:/state/tw-mobile-sync/server/new/scan-qr-widget-open\\\" text=\\\"true\\\" />\\n            </$button>\\n          </$reveal>\\n          <$reveal type=\\\"match\\\" state=\\\"$:/state/tw-mobile-sync/server/new/scan-qr-widget-open\\\" text=\\\"true\\\">\\n            <$button>\\n              停止扫码 Stop Scan\\n              <$action-setfield $tiddler=\\\"$:/state/tw-mobile-sync/server/new/scan-qr-widget-open\\\" text=\\\"false\\\" />\\n            </$button>\\n          </$reveal>\\n        </div>\\n      </div>\\n\\n      <$reveal type=\\\"match\\\" state=\\\"$:/state/tw-mobile-sync/server/new/scan-qr-widget-open\\\" text=\\\"true\\\">\\n        <$ScanQRWidget outputTiddlerTitle=\\\"$:/state/tw-mobile-sync/server/new\\\" />\\n      </$reveal>\\n\\n    </fieldset>\\n    <fieldset>\\n      <legend>服务器名 Server Name</legend>\\n      <$edit-text tiddler=\\\"$:/state/tw-mobile-sync/server/new\\\" field=\\\"name\\\" default=\\\"\\\" />\\n    </fieldset>\\n    <fieldset>\\n      <legend>服务器IP Server IP</legend>\\n      <$edit-text tiddler=\\\"$:/state/tw-mobile-sync/server/new\\\" field=\\\"ipAddress\\\" default=\\\"\\\" />\\n    </fieldset>\\n    <fieldset>\\n      <legend>服务器端口 Server Port</legend>\\n      <$edit-text tiddler=\\\"$:/state/tw-mobile-sync/server/new\\\" field=\\\"port\\\" default=\\\"\\\" />\\n    </fieldset>\\n  </div>\\n  <$button style=\\\"width: 160px; margin-top: 10px;\\\">\\n    <div>新增服务器</div>\\n    <div>Add New</div>\\n    <$action-sendmessage\\n      $message=\\\"tm-new-tiddler\\\"\\n      title={{{ [<now \\\"YYYY-MM-DD\\\">] +[addprefix[$:/state/tw-mobile-sync/server/]] }}}\\n      text=\\\"offline\\\"\\n      name={{$:/state/tw-mobile-sync/server/new!!name}}\\n      caption={{$:/state/tw-mobile-sync/server/new!!name}}\\n      ipAddress={{$:/state/tw-mobile-sync/server/new!!ipAddress}}\\n      port={{$:/state/tw-mobile-sync/server/new!!port}}\\n      lastSync=<<now \\\"[UTC]YYYY0MM0DD0hh0mm0ssXXX\\\">>\\n    />\\n    <$action-setfield $tiddler=\\\"$:/state/tw-mobile-sync/server/new\\\" text=\\\"\\\" name=\\\"\\\" ipAddress=\\\"\\\" port=\\\"\\\" />\\n  </$button>\\n</div>\\n\\n<div>\\n  {{$:/plugins/linonetwo/tw-mobile-sync/ui/DownloadFullHtml}}\\n</div>\\n\"},\"$:/plugins/linonetwo/tw-mobile-sync/ui/SidebarField\":{\"title\":\"$:/plugins/linonetwo/tw-mobile-sync/ui/SidebarField\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<fieldset class=\\\"tw-mobile-sync-sicebar-fieldset\\\">\\n  <legend>与桌面端同步 Sync With Desktop</legend>\\n\\n  {{{[prefix[$:/state/tw-mobile-sync/server/]field:text[onlineActive]] ~[prefix[$:/state/tw-mobile-sync/server/]field:text[online]first[]]||$:/plugins/linonetwo/tw-mobile-sync/ui/ServerItemViewTemplate}}}\\n\\n  [[服务器列表|$:/plugins/linonetwo/tw-mobile-sync/ui/ServerList]]\\n\\n</fieldset>\\n\"},\"$:/plugins/linonetwo/tw-mobile-sync/ui/SidebarFragment\":{\"title\":\"$:/plugins/linonetwo/tw-mobile-sync/ui/SidebarFragment\",\"type\":\"text/vnd.tiddlywiki\",\"tags\":\"$:/tags/SideBarSegment\",\"text\":\"<!-- only display plugin fragment in Tiddloid, which will use content scheme to load -->\\n<$reveal type=\\\"match\\\" state=\\\"$:/info/url/protocol\\\" text=\\\"content:\\\">\\n  {{$:/plugins/linonetwo/tw-mobile-sync/ui/SidebarField}}\\n</$reveal>\\n\"},\"$:/plugins/linonetwo/tw-mobile-sync/ui/style.css\":{\"title\":\"$:/plugins/linonetwo/tw-mobile-sync/ui/style.css\",\"tags\":\"$:/tags/Stylesheet\",\"type\":\"text/css\",\"text\":\".tw-mobile-sync-server-list {\\n  padding-left: 0;\\n  max-width: 500px;\\n}\\n\\n.tw-mobile-sync-sync-button {\\n  width: 100%; height: 100px; display: flex; flex-direction: column; justify-content: center; align-items: center;\\n  max-width: 300px;\\n}\\n\\n.tw-mobile-sync-sync-reveal {\\n  margin-left: 20px;\\n}\\n\\n.tw-mobile-sync-new-server-field-fields-container-outer textarea,\\n.tw-mobile-sync-new-server-field-fields-container-outer input {\\n  width: 100%;\\n}\\n.tw-mobile-sync-new-server-field-fields-container-outer {\\n  display: flex; flex-direction: column; width: 340px;\\n}\\n.tw-mobile-sync-new-server-field-fields-container {\\n  display: flex; flex-direction: row; justify-content: center; align-items: center;\\n}\\n.tw-mobile-sync-new-server-field-fields-buttons {\\n  display: flex; flex-direction: column; justify-content: center; align-items: center;\\n}\\n@media (max-width: 535px) {\\n  .tw-mobile-sync-new-server-field-fields-container {\\n    flex-direction: column;\\n  }\\n  .tw-mobile-sync-new-server-field-fields-buttons {\\n    width: 100%;\\n    flex-direction: row;\\n    justify-content: space-between;\\n    margin-top: 10px;\\n  }\\n}\\n\\n\\n.tw-mobile-sync-sicebar-fieldset {\\n  display: flex; flex-direction: column; justify-content: center; align-items: center;\\n}\\n\\n.tw-mobile-sync-server-list-item {\\n  display: flex; flex-direction: row; align-items: center;\\n  justify-content: space-between;\\n}\\n\"}}}"}