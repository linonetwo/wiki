created: 20230207160904920
creator: 林一二
modified: 20230207161346479
modifier: 林一二
tags: 想法
title: 字节之外： Affine 与 TiddlyWiki 与 SoLiD （林东吴离职去向分享）
type: text/vnd.tiddlywiki

本文不涉及字节跳动 ™ 相关保密信息。

（之前放在[[飞书文档上|https://bytedance.feishu.cn/wiki/wikcnAuzhMMDuXXFcw6qIPv3Prd]]，通过[[Wsine/feishu2md|https://github.com/Wsine/feishu2md]]导出为md后，用[[md2tid|https://tw-cpl.netlify.app/#linonetwo%2Fmarkdown-transformer]]插件转换为wiki条目）

!! 摘要

本文简单介绍了作者作为在字节练习时长两年半的工程师，业余两个兴趣爱好：知识管理产品设计和多元宇宙游戏开发，以及这和作者离开字节加入 Affine 及未来将做的创业项目之间的因果联系。

!! TiddlyWiki

在进入字节前，我和 [[Authing.cn|https://authing.cn]] 的谢扬讨论过要不要一起用 SoLiD 做一个类似 Notion 或 Airtable 的多合一知识管理工具，实现一个语义网的现代化的前端界面，或者要是能想到更好的语义网产品也行，不过我们在奶茶店里讨论了一下午也没想到在国内环境能有足够商业价值的产品。

但我还是很希望有一个我能基本掌握其技术，但又足够强大的知识助理，因为这样就<em>不用很麻烦很累也能</em>记住东西了。既然没机会一起创业开发这样的产品，我就基于之前在「集智俱乐部注意力与知识管理群」了解到的 TiddlyWiki 开发一个吧。

我的自我介绍，使用 TiddlyWiki 部署：[[https://onetwo.ren/wiki/#林东吴|https://onetwo.ren/wiki/#%E6%9E%97%E4%B8%9C%E5%90%B4]] （页面大小 2.5M）

此后开发太微（TiddlyWiki）就成了我业余的娱乐活动之一：

!!! 什么是太微

「太微」是我和朋友们运营的 TiddlyWiki 中国社区给它起的音译中文名。太微是一个 JS 的知识管理产品开发框架，也指基于这个框架制作出来的单页面应用，可以从 [ext[https://tiddlywiki.com]] 下载到单个 HTML，双击执行后就是一个本地化的笔记应用。

之所以「太」是因为它主打的是便携和功能全面，像 Wiki 应用该有的双向链接、嵌入（Transclusion）、微件（Widget）、筛选器它都有。它里面的笔记可以包含代码并被框架执行，从而通过添加新笔记来给应用增加功能，是一种类似[[文式编程|https://www.zhihu.com/question/26978956/answer/2349585817]]的插件化架构。笔记的集合可以被打包成插件，在插件市场分发，从而为应用接入白板、日历、看板、富文本编辑器等功能。

之所以「微」是因为里面的每个笔记被称为「条目」（Tiddler，小鱼），不鼓励写一些很长的条目，最好拆分成很多足够小，像函数一样能复用的笔记。

下面介绍一下它的一些主要技术，非技术同学可以直接跳过到后面的[[运营社区|https://bytedance.feishu.cn/docx/SXPjdEfYdoo7hjxSw9YcQP1Gnmf#I4yCdYYgKo6eUKxuivNcBaWPnHe]]段落。

!!! 太微如何存储笔记

（这些内容已经重构放到了太微中文教程-）

!!! 太微如何加载核心 API 和插件提供的 API

!!! 太微如何显示界面

!!! 筛选器、宏、变量、界面级联？

* 筛选器：用类似 DataLog / SQL 的语法执行 JS 的 map、filter 等函数，筛选出笔记库里的笔记
* 宏：在编译期替换文本，再提供给维基语法解析器
* 变量：保存文本内容，在用维基文本写低代码应用时，实现类似 React Context 的功能
* 界面级联：像 CSS 一样，允许插件提供的界面覆盖应用本身的界面

这些高级特性由于时间原因，本次就不一一介绍了。自己从头把他们实现一遍，很可能需要花费五年以上的业余时间，所以我很庆幸我基于太微来做了自己的笔记应用： [[Github.com - 「 太记 」是一个基于「 太微 TiddlyWiki 」的知识管理桌面应用，能保护隐私内容、高级自动化、自动 Git 云备份、部署为博客，且可通过 RESTAPI 与 Anki 等应用连接|https://github.com/tiddly-gittly/TidGi-Desktop]] 。

!!! 运营社区

太微在 Github 上，已经开发了十余年，但在中国一直是一个很小众的存在。我在大学的时候（2016 年）就通过了集智俱乐部了解到了它，但很可惜当时觉得这东西怎么用起来这么复杂，而且又是单页面应用不适合我这种喜欢客户端的人，保存还复杂，于是当时就一直在用 Notion。很明显其他的潜在用户也和我是类似的想法，所以当时 TiddlyWiki 爱好者 QQ 群好像只有几十人，假设 QQ 用户群和实际用户的比例是 1:100，那中国可能也就上千人了解过它，实际用户可能也就几百。

后来在进入字节前，因为相当于有一段时间的 Gap Year 比较闲，我终于折腾懂了这东西咋用，但意识到他还缺失很多我需要的功能，例如多人协作分享、白板、看板、日程管理、渐进阅读（[[渐进阅读：轻松学习长篇文档|https://bytedance.feishu.cn/docx/doxcn6r8uxxsyMnOJp43NJmpWqg]] ）等等，这就需要像传销一样，吸引更多开发者来加入才行，而这些开发者首先得是用户，所有必须提升用户友好度，才能把社区运营大，吸引到更多人。

我觉得之前我一直没用起他的主要原因就是他太麻烦，没法像其他应用一样下载下来打开就能被新手用起来。可能做到这一点最好的方式就是打包一个桌面应用，并预置好一系列的插件和配置，这样它打开来就跟 Notion APP 一样了。

因此在自己第一年的业余时间，我主要就在做这个体验优化后的应用，列了个[[需求看板|https://github.com/tiddly-gittly/TidGi-Desktop/projects?type=classic]]，花了不少业余时间写了个开箱即用的 Electron 应用。

果然在自己接下来的一年半里，在我业余没有花费过多的精力去运营社区的情况下，产品驱动增长也带来了 600% 的用户量提升（根据群成员指标从 100- 增长到 600+），也吸引到了至少三位 JS 开发者，开发了很多新插件，放在中文社区的插件源（[ext[https://tw-cpl.netlify.app/]]）里，大大增强了知识管理体验，让我可以不用很麻烦很累就能永远记住至少一些东西了。

!! SoLiD 和游戏开发

大约是 17 年的时候，文因互联的鲍捷博士让我调研一下万维网发明者 Tim Burners Lee 的 Web3.0 项目 Social Linked Data，简称 SoLiD。[[SoLiD 与可验证凭证科普|https://questerai.feishu.cn/docx/DWWVdZLVEoozYxx7CpccFpf1njh]]

它看似只是一个 BaaS，宣传口号中的让互联网重新去中心化其它 BaaS 似乎也能做到，但他是以语义网的理念为核心设计的，也使用了大量 W3C 为语义网准备的标准。这对于知识管理爱好者以及自动化爱好者就是非常有吸引力的了。

!!! 为什么要语义网

就像太微的笔记一样，通过一些预定义的字段作为笔记的元信息，就可以让笔记系统在加载这条笔记之后做些事情。太微在全球有一个挺活跃的开发者社区，开发者水平参差不齐，甚至很多只开发低代码应用的人都不会编程语言，只会 WikiText。但只要大家基于同样的元信息规范协作，就能开发出有互操作性的笔记，也就是能够互相直接拖动到别人的笔记本里的插件。

但由于这些元信息规范是只在太微里被定义的，所以他们只能在太微里被执行，而语义网的设想就是大家用国际化组织（包括但不限于 W3C 和各学术机构、商业公司）制定的规范来填写元信息。这样对用户来说互联网本身就会是一个非常动态化的 All in One 应用了；对开发者来说则是一次学习到处开发，因为各种应用的字段直接就根据标准打通了，也不再需要想字段名了。

但语义网架构也有很多问题，例如学习成本高、知识生产成本高、需要联盟共建、削弱商业壁垒等等，导致我们目前的 Web 并没有达到这么高的共识程度。

!!! 游戏本体

我从小无限流看得比较多（《无限恐怖》、《死亡万花筒》等多世界设定的小说），喜欢这种多元宇宙的设定。也比较喜欢《星界边境》、《无人深空》等多世界或多星球的游戏，但总觉得这些游戏没有能还原无限流里面不同世界观有不同力量体系和文化背景的多元兼容感，因为没人做就一直很想自己做一个。

我又很喜欢《矮人要塞》、《CDDA》、《边缘世界》这种数据驱动的游戏，或者说是「知识驱动」，因为游戏会加载上百种异构数据，描述了游戏里的日用百货、武器装备、角色美丑、殖民者的行为模式、敌人的基地副本地图等等（例如 CDDA 的 [[CleverRaven/Cataclysm-DDA JSON\_INFO.md|https://github.com/CleverRaven/Cataclysm-DDA/blob/f643cd5519e9399408b728e388e50b7d680f9ae0/doc/JSON_INFO.md]] ）。这些数据和上面说的太微里的很类似，太微管理的知识条目所用的字段名是太微私有的（就像我们日常开发的大部分系统一样，基本就是前后端对一对就决定了。），这些游戏每个也使用了各自私有的字段，使得每个游戏都各自为战。我有时候会想，要是能在 CDDA 的游戏系统里体验到边缘世界里那上 GB 的物品 MOD 内容就好了，或者能在边缘世界的游戏系统里使用 CDDA 那数十 MB 的副本地图就好了。

如果能有一个万维网上通用的游戏本体，以及相应的基础设施，我们是不是就能把各个游戏连通起来，实现一种真正的多元宇宙游戏呢？目前还没人做过，而我出于对此无限的热情，一定要在有生之年探索一下。

!!! 语义网商业模式

我和很多语义网爱好者朋友讨论过，SoLiD 这东西能有什么好的商业模式？但其实挺难想的，于是一次次想基于它创业又不了了之。于是在毕业后就先进了字节看看情况。

在字节到了第二年，在 WebXR 交流群的耳濡目染下，我意识到现在在 Web 平台上，已经可以运行起图像效果和计算能力较为高端的游戏了，甚至能以较好的效果身临其境（也就是前段时间很火的元宇宙），这引起我的思考：WebXR 游戏 + 语义网数据源 + 去中心化 BaaS 数据存储 + GameFi + Gacha ，这样的模式是否是带火语义网的机会？

* 人们会为了游戏的叙事付出大量时间成本，这解决了学习成本高、知识生产成本高的问题；
* 结合智能合约的中立性和经济激励，解决了组织起联盟塑造本体共识成本高的问题；
* 游戏叙事和美学体验带来的留存，也可以解决去中心化削弱商业壁垒的问题。

而如果这样的基础设施能建设起来，就能实现《头号玩家》里那种多世界互联的 WebXR 世界，我们建设的基础设施也将成为电影里那个中立但包容万象的系统。

这是在字节的过程中激发的一些思考，但我还在等待足够好的创业时机。

在字节一年多的时候，我正在参与一些广告样式自动生成相关的项目，在上科大 GeekPie 社团里正好看到有人在招实习生，说在做广告素材自动生成，虽然不完全是同一个方向，但我还是联系上那位创业者并讨论了一些思路。

后来也正是我在和他聊起这个多·元宇宙项目时，他说这或许是一个还不错的创业机会，想做的话，可以结合一下元宇宙风口，做一下喜欢的事情。在他的鼓励下，我也就开始筹备相关的技术方案和团队了，目前这个项目还在写 Demo 找投资的状态。

!! Affine

在集智俱乐部注意力与知识管理群里我们经常聊到各种最近新出现的笔记软件，例如字节之前做的 innos 、主打白板的 Heptabase 等等，中间也提到过 Affine ，但我当时还以为这只是一个国产的、完全开源化的 Notion 替代品而已，没有太在意，毕竟 Wolai、Flowus 等等来了又去，我也还是一直继续在用我纯开源本地的 TiddlyWiki 嘛。

!!! Affine 的愿景

贺嘉琛和谢扬都是奇绩创坛的校友，一次我们线下聊天时他提到他在做的 [[Affine.pro |https://affine.pro/]]其实是一个多人在线协作的插件化 All-in-One 工作区软件，和我详细介绍了一下愿景：

笔记中的各个内容块使用统一的元信息格式来表示，从而让数据和展示能够真正分离，同一份数据可以被以各种展示形式展示出来，例如一开始在页面模式里写的内容，可以一键转换为白版中的一个便签。而且这些展现形式是可以由社区添加的，大家可以基于同一套元信息格式保持很高的互操作性。

我想，超级现代版 TiddlyWiki ！

应用是多人协作的，使用一个从头设计的新型多人协作模块（他们叫它 JWST™ 和 BlockSite™），之后所有社区的插件都是可以以很低的成本实现多人协同的，就像以前使用 Redux 要写很多 boilerplate code，后来 JS 有了 Proxy，就出现了 Mobx ，很简单就能搞定状态管理。他们要做这样子的多人协作版本的 Mobx。

我想，支持 Mod 的游戏的救世主！

于是我瞬间对 Affine 大改观，意识到这是一个和我两个业余兴趣很相关的产品团队，其实如果早点与贺嘉琛沟通的话，我可能会很早就离开字节一起去做这个东西。在开发这款产品的过程中，我可以学到很多对构建多人在线的多元宇宙有用的理念和技术，更重要的是也可以认识很多志同道合的新朋友，我们理念的碰撞将进一步打磨我半成型的想法。

!!! Affine 的架构（Outdated）

基于目前开源的代码（[ext[https://github.com/toeverything/AFFiNE/tree/master]]），可以看到旧版的 Affine 是一个 ReactJS 应用，结合了 React 上的富文本编辑器库 SlateJS 和白板库 @tldraw/tldraw 。

这种结合方法的一个问题是，两边的事件和状态需要做很多的桥接，在读代码的过程中，我也用 @tldraw/tldraw 写了一个 TiddlyWiki 插件 ，可玩 [[Demo 页面|https://tiddly-gittly.github.io/tiddlywiki-whiteboard/]]。 [ext[https://github.com/tiddly-gittly/tiddlywiki-whiteboard]] 里的代码就含有很多处理 tldraw 本地状态和 TiddlyWiki 笔记知识库状态的代码，通过加锁、加版本号等方式避免保存时的版本 bug，通过把 tldraw 里的部分 dom 节点嫁接到 TiddlyWiki 的微件树上来接收更新等等。

因此即使仅出于结合富文本和白板的考虑，Affine 的工程师也提出应该抽象一个统一的存储操作层，叫做 BlockSuit。它向展示层提供对内容块的增删改查和多端同步，然后在展示层紧密结合 BlockSuit 开发「BlockSuit-native」的富文本和白板组件。

    Affine -> BlockSuit -> JWST

由于提供了对同步内容块的通用操作接口，未来其他内容块，例如日历、看板，也可以像操作本地对象一样操作内容块，然后在底层通过 JWST 自动在考虑了 ACL 后广播给对等端。一些语义网共识也可能放在这一层，以便各开发者能低成本地获得互操作性（减少插件间需要互相适配的地方）。

JWST 则是一个和多端同步数据结构库 YJS 的作者合作开发的 Rust 库，通过 wasm 分发给前端或在 tauri 里接入 Rust 客户端程序。它将用最新的实现提供最高的多端同步性能和最少的同步 bug，以支持更多本地优先的去中心化应用出现，未来可能会有更多去中心化多端协同的 SaaS 基于它来构建，以实现 Open Core 商业模式。

!! 结语

时间所限，还有很多东西写不完（现在是 22-12-12T1721 ，而 19 点我飞书字节账号就要没了），所以本分享到此为止。

字节给我带来了快乐充实的两年半，我永远爱字节和这里的同学，谢谢！
