created: 20230913143015289
creator: 林一二
modified: 20230920134145063
modifier: 林一二
tags: 任务 基于状态机的插件化的AI流程工具Memeloop
title: 写NoFlo正在执行的任务的管理界面
tmo_priority: High
tmo_taskState: Running
type: text/vnd.tiddlywiki
wysiwyg: yes

任何工作流都可能持续循环运行，点击「使用」按钮进入一个工作流详情后，看到类似 GPT 的界面。

# 在初次打开聊天界面后，工作流自动运行，需要可配置是否后台运行，此后需要存储执行到的位置并断点续运行。
## GPT4 说 noflo 没有断点续传功能，需要自己维护状态
## 尽量类似FAAS，自己把需要持久化的状态存到长期记忆里，此后每次都重新初始化并自己去加载记忆
## 虽然单个状态内不持久化状态，但需要持久化有哪些任务在运行，它们的ID和能访问的存储是什么，方便重启任务并加载状态
## 而且如果把细粒度状态都存下来，会导致wiki的git一直有变更需要同步到云端；不过就算只存创建了的对话，也会有这个结果，因为用户可能会创建巨量的对话。所以需要有个开关，手动打开才会把结果放在wiki里，不然都只是存在本地SQLite，以后服务端版用SoLiD替代SQLite
# 后台运行管理界面就类似FAAS管理界面，但允许存在多个实例，每个实例内部都可以并发运行（NoFlo的Graph可以写服务器，一个实例高并发），但管理粒度只是实例级别
## 用一个应用级别的单例来管理NoFlo实例，用SQLite作为存储，加上用户系统方便之后把它迁移到后端用，对接多个用户
## 放在后端的问题是需要异步修改前端的状态、加载的库不能涉及前端功能，都能解决
